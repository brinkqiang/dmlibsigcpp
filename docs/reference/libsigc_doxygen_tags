<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>adaptor_trait.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptor__trait_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::adaptor_functor</class>
    <class kind="struct">sigc::adaptor_functor::deduce_result_type</class>
    <class kind="struct">sigc::adaptor_trait&lt; T_functor, true &gt;</class>
    <class kind="struct">sigc::adaptor_trait&lt; T_functor, false &gt;</class>
    <class kind="struct">sigc::adapts</class>
    <member kind="define">
      <type>#define</type>
      <name>SIGC_WORKAROUND_OPERATOR_PARENTHESES</name>
      <anchorfile>adaptor__trait_8h.html</anchorfile>
      <anchor>58ac129f20cc3085fe573a39136f86b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__adaptors.html</anchorfile>
      <anchor>gfb822cac23e9bf97c164793a36246d5c</anchor>
      <arglist>(const T_action &amp;_A_action, const adaptor_functor&lt; T_functor &gt; &amp;_A_target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_8h</filename>
  </compound>
  <compound kind="file">
    <name>base.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/lambda/</path>
    <filename>base_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::lambda_base</class>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, true &gt;</class>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, true &gt;::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, false &gt;</class>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, false &gt;::deduce_result_type</class>
    <class kind="struct">sigc::lambda</class>
    <class kind="struct">sigc::unwrap_lambda_type</class>
    <class kind="struct">sigc::unwrap_lambda_type&lt; lambda&lt; T_type &gt; &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c14e861d541fd6172fd66bd96b79d3c1</anchor>
      <arglist>(const T_action &amp;_A_action, const internal::lambda_core&lt; T_functor, I_islambda &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6df6801c9173642c618ac337112bb2b7</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda&lt; T_type &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; T_type &amp; &gt;</type>
      <name>var</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a354a134fa27b2dc8295af1c871b5885</anchor>
      <arglist>(T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; const T_type &amp; &gt;</type>
      <name>var</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d0f037b8944e6c5828ccbffa28726525</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>72c9f563f8d97738fa8d3d494e0ff0f5</anchor>
      <arglist>(T_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6d9b97698fd134e2ec1e103fbe893b07</anchor>
      <arglist>(const T_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>55f65aefeb2254213ed4149610c58e16</anchor>
      <arglist>(const lambda&lt; T_type &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors/bind.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_2bind_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;::deduce_result_type</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ged4a6aaa9d804f82fd558d553b67c3a8</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt; T_loc, T_functor, T_bound &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g97d5feac063beaf49157990f98aad6fe</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gca2e99785599f7631337d5fbbecbc610</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb9bc9f3ffe4a706128948eb00751eadc</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ga60aa29a584517ad422473281ce2864b</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5237d6d834423536367bf130760e88b3</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5017f20f5c99a9a1007476a397e6b0af</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb7f865e06297273a2b5d80b7d7865bdb</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt; I_location, T_functor, T_bound1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g2148290d2cf9c1961ec157a085badd5a</anchor>
      <arglist>(const T_functor &amp;_A_func, T_bound1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5858818e62c9df7ded906d9461d012cd</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g68057ec737e31fa433a0a5f726f27cd1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g006c34f47e2a19358be290d438c0de19</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gafb060da662d2ab98bf377c16a5df8f4</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ge20edab579c98fecb975a5cc698d8ab2</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g7f4b6bd72965b7840fa5b518e0d069c1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g356da93520385d48f66125257d2b8f2b</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6, T_type7 _A_b7)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bind.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>bind_8h</filename>
    <namespace>SigC</namespace>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>66994e20ebbb275ea2554c8d097cb019</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound2 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>67258c5dc81d130d8ec60e7211f5ae2b</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1, T_bound2 _A_b2)</arglist>
    </member>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound2 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound3 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>8a6caa87aa2bc64398e35f58856460a3</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1, T_bound2 _A_b2, T_bound3 _A_b3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors/bind_return.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_2bind__return_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::bind_return_functor</class>
    <class kind="struct">sigc::bind_return_functor::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g27e8bea76ba380b8223b059369b2c485</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_return_functor&lt; T_return, T_functor &gt;</type>
      <name>bind_return</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g8a001b0bb588d2ac1af712781b89dc8a</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_return _A_ret_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bind_return.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>bind__return_8h</filename>
    <namespace>SigC</namespace>
  </compound>
  <compound kind="file">
    <name>bound_argument.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>bound__argument_8h</filename>
    <namespace>sigc</namespace>
    <class kind="class">sigc::bound_argument</class>
    <class kind="class">sigc::bound_argument&lt; reference_wrapper&lt; T_wrapped &gt; &gt;</class>
    <class kind="class">sigc::bound_argument&lt; const_reference_wrapper&lt; T_wrapped &gt; &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>78af6ff8fb24c17f5e72fd36d0be7975</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_argument&lt; T_type &gt; &amp;_A_argument)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>class_slot.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>class__slot_8h</filename>
    <namespace>SigC</namespace>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91af9b19917042109ebd6a01009dfcd7</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gb1e0a43a66d818a52b29479c85531139</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g4c4822aeb56b6c748008226648791860</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd8d25c2c7dd544a6b2b280e7e62e6048</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gde17bd35ebbbdd4f7e81d64f723376f1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g81a5adc40307650a5cd89d375e0987ac</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge46071e505c2519a76993d3262904ef1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g622d6dbceeade9a3bb4faeff3e5d5a8a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g75a6ff95d43b210d56f61264a56dc373</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdc3f898be979b722b25a4ad24668e3ab</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2c46b761223b969cb7a63bc60d9b8249</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g09e1ce614750eb0dda785c2dcb0820a1</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g606334d30de15d8a9b2a4b9b3bd23f68</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g635b197d134d20e6593c59b02b17b361</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd49affd5459e463a7a2fc038d4e6614b</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gaaa4e86a7f5efa0d68360725a9035e3a</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compatibility.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>compatibility_8h</filename>
    <namespace>SigC</namespace>
  </compound>
  <compound kind="file">
    <name>compose.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>compose_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::compose1_functor</class>
    <class kind="struct">sigc::compose1_functor::deduce_result_type</class>
    <class kind="struct">sigc::compose2_functor</class>
    <class kind="struct">sigc::compose2_functor::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g3e7453863caa786e5e6a0401a8450958</anchor>
      <arglist>(const T_action &amp;_A_action, const compose1_functor&lt; T_setter, T_getter &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g234770a49ae510afbf6530047005294e</anchor>
      <arglist>(const T_action &amp;_A_action, const compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>compose1_functor&lt; T_setter, T_getter &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g57692495ec80dd855d4653adde4c8f49</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter &amp;_A_getter)</arglist>
    </member>
    <member kind="function">
      <type>compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g5ccef00a13aa5672806c46d4abe4ce55</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter1 &amp;_A_getter1, const T_getter2 &amp;_A_getter2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>connection.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>connection_8h</filename>
    <namespace>sigc</namespace>
    <namespace>SigC</namespace>
    <class kind="struct">sigc::connection</class>
    <member kind="typedef">
      <type>::sigc::connection</type>
      <name>Connection</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91f89ef3d156946196625c06de970957</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deduce_result_type.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>deduce__result__type_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::adaptor_base</class>
    <class kind="struct">sigc::deduce_result_type</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, void, void, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, void, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, true &gt;</class>
  </compound>
  <compound kind="file">
    <name>exception_catch.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>exception__catch_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::exception_catch_functor</class>
    <class kind="struct">sigc::exception_catch_functor::deduce_result_type</class>
    <class kind="struct">sigc::exception_catch_functor&lt; T_functor, T_catcher, void &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a223e54f7b85d4234b330a1c8502b6ba</anchor>
      <arglist>(const T_action &amp;_A_action, const exception_catch_functor&lt; T_functor, T_catcher, T_return &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>exception_catch_functor&lt; T_functor, T_catcher &gt;</type>
      <name>exception_catch</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9aee9af00f94197bed616f6a5059c491</anchor>
      <arglist>(const T_functor &amp;_A_func, const T_catcher &amp;_A_catcher)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functor_trait.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>functor__trait_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::functor_base</class>
    <class kind="struct">sigc::functor_trait</class>
    <class kind="struct">sigc::functor_trait&lt; T_functor, true &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)() const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const, false &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>SIGC_FUNCTORS_HAVE_RESULT_TYPE</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g93b6ee8815d90adccfdceed72bcda577</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGC_FUNCTOR_TRAIT</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g7a6f5575dc0b0ea896889c782721f6be</anchor>
      <arglist>(T_functor, T_return)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functors.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>functors_8h</filename>
  </compound>
  <compound kind="file">
    <name>group.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/lambda/</path>
    <filename>group_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::lambda_group1</class>
    <class kind="struct">sigc::lambda_group1::deduce_result_type</class>
    <class kind="struct">sigc::lambda_group2</class>
    <class kind="struct">sigc::lambda_group2::deduce_result_type</class>
    <class kind="struct">sigc::lambda_group3</class>
    <class kind="struct">sigc::lambda_group3::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f281160792e31db1dac80bc28a932ce9</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group1&lt; T_functor, T_type1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3c1afe7cb631539be654133b0c1b35fc</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group2&lt; T_functor, T_type1, T_type2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>93983affe370fea0a52fe7f8f47ff7ba</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group3&lt; T_functor, T_type1, T_type2, T_type3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group1&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d36281e6ca158599b36980a801f41aac</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group2&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type, typename unwrap_reference&lt; T_type2 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>948eb594b3254c2efbe88d1dbb4d35dc</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1, T_type2 _A_2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group3&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type, typename unwrap_reference&lt; T_type2 &gt;::type, typename unwrap_reference&lt; T_type3 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>373b1216c685961b9d073e300cbda78f</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1, T_type2 _A_2, T_type3 _A_3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors/hide.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_2hide_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::hide_functor&lt;-1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt;-1, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 0, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 0, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 1, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 2, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 2, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 3, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 3, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 4, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 4, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 5, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 5, T_functor &gt;::deduce_result_type</class>
    <class kind="struct">sigc::hide_functor&lt; 6, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 6, T_functor &gt;::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>ga07f0ffec52a12cd7dcf1601938b247c</anchor>
      <arglist>(const T_action &amp;_A_action, const hide_functor&lt; I_location, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>hide_functor&lt; I_location, T_functor &gt;</type>
      <name>hide</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>g6e9653e79dbd111f458a2ccd690dadc6</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hide.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>hide_8h</filename>
    <namespace>SigC</namespace>
    <member kind="function">
      <type>SigC::Slot1&lt; T_return, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>37f9e0a394209a52f64c603867e35ac7</anchor>
      <arglist>(const SigC::Slot0&lt; T_return &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot2&lt; T_return, T_arg1, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>751ad3eca2e15331cdc95e0e7dda1ce6</anchor>
      <arglist>(const SigC::Slot1&lt; T_return, T_arg1 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot3&lt; T_return, T_arg1, T_arg2, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>99b1cae7d2609f0362d6e02b4e8e140a</anchor>
      <arglist>(const SigC::Slot2&lt; T_return, T_arg1, T_arg2 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>0d1a625cb9559fb6ec618b537c177e60</anchor>
      <arglist>(const SigC::Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>93c9a95a7cab87a2498e71ba2fd350d4</anchor>
      <arglist>(const SigC::Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>b92113d83a5166bd0e7ce5a557e4d3e5</anchor>
      <arglist>(const SigC::Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>6422b98b62aca7432b1764dc77ee3753</anchor>
      <arglist>(const SigC::Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_slot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lambda.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/lambda/</path>
    <filename>lambda_8h</filename>
  </compound>
  <compound kind="file">
    <name>limit_reference.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>limit__reference_8h</filename>
    <namespace>sigc</namespace>
    <class kind="class">sigc::limit_reference</class>
    <class kind="class">sigc::limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::const_limit_reference</class>
    <class kind="class">sigc::const_limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::volatile_limit_reference</class>
    <class kind="class">sigc::volatile_limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::const_volatile_limit_reference</class>
    <class kind="class">sigc::const_volatile_limit_reference&lt; T_type, true &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>45fbeeeed09915ba6eac52d8c0e6f601</anchor>
      <arglist>(const T_action &amp;_A_action, const limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3d6923539508a182c7c0f2cd14f7da76</anchor>
      <arglist>(const T_action &amp;_A_action, const const_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6d8d4ebf03d12349254c840b6abeab1b</anchor>
      <arglist>(const T_action &amp;_A_action, const volatile_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0729e10eaf72affb56a48c20f7197009</anchor>
      <arglist>(const T_action &amp;_A_action, const const_volatile_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mem_fun.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>mem__fun_8h</filename>
    <namespace>sigc</namespace>
    <class kind="class">sigc::mem_functor0</class>
    <class kind="class">sigc::mem_functor1</class>
    <class kind="class">sigc::mem_functor2</class>
    <class kind="class">sigc::mem_functor3</class>
    <class kind="class">sigc::mem_functor4</class>
    <class kind="class">sigc::mem_functor5</class>
    <class kind="class">sigc::mem_functor6</class>
    <class kind="class">sigc::mem_functor7</class>
    <class kind="class">sigc::const_mem_functor0</class>
    <class kind="class">sigc::const_mem_functor1</class>
    <class kind="class">sigc::const_mem_functor2</class>
    <class kind="class">sigc::const_mem_functor3</class>
    <class kind="class">sigc::const_mem_functor4</class>
    <class kind="class">sigc::const_mem_functor5</class>
    <class kind="class">sigc::const_mem_functor6</class>
    <class kind="class">sigc::const_mem_functor7</class>
    <class kind="class">sigc::volatile_mem_functor0</class>
    <class kind="class">sigc::volatile_mem_functor1</class>
    <class kind="class">sigc::volatile_mem_functor2</class>
    <class kind="class">sigc::volatile_mem_functor3</class>
    <class kind="class">sigc::volatile_mem_functor4</class>
    <class kind="class">sigc::volatile_mem_functor5</class>
    <class kind="class">sigc::volatile_mem_functor6</class>
    <class kind="class">sigc::volatile_mem_functor7</class>
    <class kind="class">sigc::const_volatile_mem_functor0</class>
    <class kind="class">sigc::const_volatile_mem_functor1</class>
    <class kind="class">sigc::const_volatile_mem_functor2</class>
    <class kind="class">sigc::const_volatile_mem_functor3</class>
    <class kind="class">sigc::const_volatile_mem_functor4</class>
    <class kind="class">sigc::const_volatile_mem_functor5</class>
    <class kind="class">sigc::const_volatile_mem_functor6</class>
    <class kind="class">sigc::const_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_mem_functor0</class>
    <class kind="class">sigc::bound_mem_functor1</class>
    <class kind="class">sigc::bound_mem_functor2</class>
    <class kind="class">sigc::bound_mem_functor3</class>
    <class kind="class">sigc::bound_mem_functor4</class>
    <class kind="class">sigc::bound_mem_functor5</class>
    <class kind="class">sigc::bound_mem_functor6</class>
    <class kind="class">sigc::bound_mem_functor7</class>
    <class kind="class">sigc::bound_const_mem_functor0</class>
    <class kind="class">sigc::bound_const_mem_functor1</class>
    <class kind="class">sigc::bound_const_mem_functor2</class>
    <class kind="class">sigc::bound_const_mem_functor3</class>
    <class kind="class">sigc::bound_const_mem_functor4</class>
    <class kind="class">sigc::bound_const_mem_functor5</class>
    <class kind="class">sigc::bound_const_mem_functor6</class>
    <class kind="class">sigc::bound_const_mem_functor7</class>
    <class kind="class">sigc::bound_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor7</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a0e4bdca79dde7347318bff4d6e1eda</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gff3264460325cf2a34cc0502fec7b8b7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g497c57551529e8721861cedc1c3d5121</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5cc57f71faadc4101e7a10e0b5d7317f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g66608a108aa332faf3c3bfd418655fcb</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gee9534127cddea3f7b3e5461f768a42b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g259c308cca0572400aaed34384eafbe3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g56f7d4d8f86928edb83e1f65702a2978</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga0d89783277d6e9dede11eda2ff6c75a</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g20b2c11c8fb2a9e0bb86ad4c66c9c2e7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8ef4b45b1dcecb9270562c030e38e339</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga3c16c17557fcebdd7573fa6b2ed0dcf</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6bbf2084c41ca86d2ab99e21adf28f30</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g21e843c71a56dba1d507c9a92fad48d1</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5af2a45e22e6f53837fa0b5f9de0ad57</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf8ba948d4075a160a3c887d5bc29fe38</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g167fc8e84727e8b465c5f569da18fe7c</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc99d35f92c4859d7ba58c0f8dbee8a59</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfd990e80dc9ec40599b0e66526334ed3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8df64a5ef08edf9a3bffd45888cf6566</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g115420b91c53ff373128c8d9c5389e26</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g59db8f4f6bf774aac7a42e4db22fe525</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4fe42d39978e3534528e704a2ef69d19</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ged1e318f76b0b4560f7f7f15348bf74f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7f0b3a137305d0da984cfcaa69028645</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa45bea25d6b97dd4215c61845eb276b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8bbfab43840801b698deebdbcced31b8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4e8a4b740ba229328323782cdff5defc</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge32dedba98d5616ffed3bf45564b5925</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g0a7438643be599bd0687c6de6af6ec2b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcb29a90ac86fe224d4074619e0117cb8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gaa2493ee4790a02fad2dfd44e3e4e1f6</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gd6f8ec28efe46a939923e0ae83aa2888</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc54cbcf11289d7b7fe15dff1fc2e84f4</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g353bb1c7c03796bafe5ed2e52f012980</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga603c1c92cc9140a13d89256724de663</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g9e5cce0968f3f2a79240922ebc1b6745</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb0cbec1f295cbf8283208dedf5ab9ac7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1c9c46a46db3d5d01d582b6867665c7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfb7d7c8968bebcfea74f08c3eb55b14f</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge75bc5b94c36e78775ff5b5f20767baf</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3d62fea84f3f77ac5a315cebe5286b47</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gbb30783d2b0ac099089d70274d4459fb</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf19bbb21b4b903e1a6b97fea87e90663</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1a00dd97f2ca5e21b2b4f73fea4053b</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga34194e868680c9146f8d143ddbdd8a8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4908458d042d70f91be5f72547518e4f</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g750c42aaea61ec588daf64d4111e8429</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc725cb282b0c611c67a270a7821e173f</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g211bd1f151b5936a549a8d8e6ab911bf</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g55aafe144e22f4df7fe785c1eec839ca</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3b7fd6101534e982aa29c0308ce69006</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdedf83e65a2aca0d3aa4ac0b6d68ccd8</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g61cec9d9ec3d399f0d14a3b2edb6fecc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf6a1bce5fc8d6a117124874f2fa6ab18</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g208d42856768ebe922a1418f7250ca31</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7d9ea809173f48bf5c76cf1989591602</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa7e13948472a451e25485f2c5001028</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g13a02e1edfe8b4450aba9f9629c69183</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a171185d53c5ef87adb18bdd1d34aca</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g17d792c86d3251c2045987c4dec04494</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g72ce5f7bfd24897f48d0ebd676bcbe5a</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdbb4cac2850f0f61f6d5f9e17e02c7ba</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf995826321b8808ce8839e4abbb0550d</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g51fa4e5052666f6738abbaa628ec6cc2</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge53b7ef4bd43363998aff8a589bc254a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g47ec248386b6998e5f8b9a80191e4d5d</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6e58e3cf7e4f1b5fbcb85736369d018c</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1b200788ce261aef52a8dadaa1e2c9aa</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g81b830d633d756ca945bac75c4b2f8e8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g975cacf1b6fdd69a93c2f5ba0973f780</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb37fdbceea44a66560bb16345e1593e6</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdd76171e23f2e904c7f01264228440fc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g23120ad94420b72a8761423c5bab2bec</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g34e7257908fb33b2582f686ac51e1d74</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc41f442c5e8a533e98cce0d7df02efe6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1b6c289aa5b68e382c259bb5c35aa95</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8fbf4b5621eda8f79ba2be75bd7badd4</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfc3676e579d8e7b037c0589b2ab12270</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcdcec06e66f0ba9a970e530c953d60b6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>method_slot.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>method__slot_8h</filename>
    <namespace>SigC</namespace>
    <member kind="function">
      <type>Slot1&lt; T_return, T_obj &amp; &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g7246d6fa67ac9b66c913a35b93e18003</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_obj &amp;, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c952510d32d46cdfd2abf1128fc6d97</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_obj &amp;, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82b240878388eeecbaa7c279d955e807</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g52eae75f30f433a7833e700ff25ac278</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g16e743368f8ee8868a2ebf185b75f056</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g6c1842450bb4b8b99357df9c4b00cb7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gce1eff0e298e8d7cc580b827834607c7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>object.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>object_8h</filename>
    <namespace>SigC</namespace>
    <member kind="typedef">
      <type>::sigc::trackable</type>
      <name>Object</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>da96f27c4223c2c802ea830415739dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>object_slot.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>object__slot_8h</filename>
    <namespace>SigC</namespace>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge6e633fa340e3017871d86cb34367340</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3011c8f9efec0dc294994982f28fe520</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gcc3e1f6e658c464968947e19a188a180</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g86024098d53519ffa31aed081c347f07</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdbee3c6f5bf882d3d0283a0226db86e3</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c6d334b182a0a41a094f59d815a5367</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9f2487af1f489d5c39e019e05b579d52</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga6cd5deb8723357f578c5f57b2079a4c</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9bca6dad79e9b0cccb8550831324c06c</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g107343642e204fb11d430487da95f832</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g8fab160f730b83efbd9a74a24106a95b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g5dbe067d6c701ea6cacff393f9f240ba</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82d05033e2b2bee1ce03b1381c12da6b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga1bb9d6796c4e6c072cd83a9118307b9</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g88e87cb153a459d61776de5dfcda3677</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc47a32cf4be8bd49a9d1beef1e398f69</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>operator.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/lambda/</path>
    <filename>operator_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::dereference_trait</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type * &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type * &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type *&amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type *&amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type *const &amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type *const &amp; &gt;</class>
    <class kind="struct">sigc::arithmetic</class>
    <class kind="struct">sigc::bitwise</class>
    <class kind="struct">sigc::logical</class>
    <class kind="struct">sigc::relational</class>
    <class kind="struct">sigc::arithmetic_assign</class>
    <class kind="struct">sigc::bitwise_assign</class>
    <class kind="struct">sigc::other</class>
    <class kind="struct">sigc::unary_arithmetic</class>
    <class kind="struct">sigc::unary_bitwise</class>
    <class kind="struct">sigc::unary_logical</class>
    <class kind="struct">sigc::unary_other</class>
    <class kind="struct">sigc::cast_</class>
    <class kind="struct">sigc::plus</class>
    <class kind="struct">sigc::minus</class>
    <class kind="struct">sigc::multiplies</class>
    <class kind="struct">sigc::divides</class>
    <class kind="struct">sigc::modulus</class>
    <class kind="struct">sigc::leftshift</class>
    <class kind="struct">sigc::rightshift</class>
    <class kind="struct">sigc::and_</class>
    <class kind="struct">sigc::or_</class>
    <class kind="struct">sigc::xor_</class>
    <class kind="struct">sigc::less</class>
    <class kind="struct">sigc::greater</class>
    <class kind="struct">sigc::less_equal</class>
    <class kind="struct">sigc::greater_equal</class>
    <class kind="struct">sigc::equal_to</class>
    <class kind="struct">sigc::not_equal_to</class>
    <class kind="struct">sigc::subscript</class>
    <class kind="struct">sigc::assign</class>
    <class kind="struct">sigc::pre_increment</class>
    <class kind="struct">sigc::pre_decrement</class>
    <class kind="struct">sigc::negate</class>
    <class kind="struct">sigc::not_</class>
    <class kind="struct">sigc::address</class>
    <class kind="struct">sigc::dereference</class>
    <class kind="struct">sigc::reinterpret_</class>
    <class kind="struct">sigc::static_</class>
    <class kind="struct">sigc::dynamic_</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; logical&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; relational&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; arithmetic_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; bitwise_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; other&lt; subscript &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_convert_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_logical&lt; T_action &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; address &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; dereference &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action</class>
    <class kind="struct">sigc::lambda_action_unary</class>
    <class kind="struct">sigc::lambda_action_convert</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; plus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; minus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; multiplies &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; divides &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; modulus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; leftshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; rightshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; xor_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; logical&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; logical&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; less &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; greater &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; less_equal &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; greater_equal &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; equal_to &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; not_equal_to &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; plus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; minus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; multiplies &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; divides &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; modulus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; leftshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; rightshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; xor_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; other&lt; subscript &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; other&lt; assign &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_increment &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_decrement &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; negate &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_bitwise&lt; not_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_logical&lt; not_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_other&lt; address &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_other&lt; dereference &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; reinterpret_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; static_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; dynamic_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_operator</class>
    <class kind="struct">sigc::lambda_operator::deduce_result_type</class>
    <class kind="struct">sigc::lambda_operator_unary</class>
    <class kind="struct">sigc::lambda_operator_unary::deduce_result_type</class>
    <class kind="struct">sigc::lambda_operator_convert</class>
    <class kind="struct">sigc::lambda_operator_convert::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>eff5a0299fefc2899b6a920ec35539b1</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator&lt;T_lambda_action, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>63a15030d38a903406a7f0e3b4ef220a</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator_unary&lt; T_lambda_action, T_arg &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3413af839d2a7c15cbcd24e5d3098542</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator_convert&lt; T_lambda_action, T_type, T_arg &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>29d226d0e89c123a6a99df7cf7049e98</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cc0c03760fce65203d5f67f23a05aee7</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>74d41ed6e82b12e9d2079776d1381a1b</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>26c54de4f570705ef709f745a1ded9c7</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>ebf7d41a285af52c58329c66183aca15</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>000e30854e2ad97c82db1c8e55ae9c58</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>96302d55d9f9487b85bd723983bf7dc8</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b8250f41a97fbcaf00f38e3cdac71880</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db9970b1407a0d915eefd423acfc2af6</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2cd49ce61ca95eef20291ceaaa14f7f3</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>04d7fd3f8ecfe2ace16a5f03c318a56d</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>778da0346854b55c0605811e427f7ece</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>448f704e10cf7099d202544144257829</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0df1bd3cac2a2bfbb43d250aec11b171</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8900336dc8fbdcc1719095a98728aa07</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2be0aea0eb8880432737d42fa166a226</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>43931fdef62a0517ba0924de2f82d0a9</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>15266193ad2aad0a0b5c77b9d54f778e</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f82dddd5da2b904553cac0cbe28fbdef</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5d32e408b09d4b18017401a618deca22</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>961c52af18d38be10448d6305875ec42</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>461df6e22a0f398518cba4a6d188afc9</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c98c7424a1a331909cfe0e2a0761c18f</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cf462bfb7b85b19e4e4308c9a27ffcc2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7d613863e01f8cf39a3f7a67be586b37</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>79c58fce0596a170e3eb32aa589aa573</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2298b1d7394469e603ef17122d29e2c5</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9bd6e35894b866758aa37ec441e46c1b</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f5b039f488caaf8422ce7e04f8d22fd2</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>455402cbd5b9af2923150b24f1b586ed</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f68affa8bbefac3b556d333240a97f3e</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>bca5b3586ae165f374e0ecda6e742368</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9a43e8f2ed62653f3cdd1c7fc822eac1</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5c4eea4d6cfb47d019091f7b64177dcc</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>be7b14c8d37e24cc62259aba382f5b3e</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b185848c59fea219a747cb1009f1c881</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>64587ad0e3a569be542d546b9b1d9829</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a0f064417347c15e6c2eee46645f4b58</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e84ae7410cde285a4062beec3f2581dd</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>82df52344c1995f4b7f66efa2c6dd1e1</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>aed6caf81d925870fbc306ecaf562a9a</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>56f75748c8b6018401b8f82a93f29a58</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>276ae53620c9234c7964816aa94ba476</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>ffb5949de125154ba78a9fab53e5c88f</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4a9e25129fc0832aa465ce7ec679a1be</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e1c71b2dfbafd2701d1ee7be0a5c603b</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>109def8701355bae896321317c9fbda3</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8783dd0b543f6b51467ec1256a694174</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3d4a437822ac13a0b06f8d629f162441</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6a642d0f9179d581a95ac21ad10003b5</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>934ffbd686558b72a1ee12e4d9207a93</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2e406f67fa7336e1e6af7f2b6de89563</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>35550c6b98eab98d75f088abb1c06f6d</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0fc828769dcf706797f1b39f88b770f9</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e4450395ac4750ab095b170da8dfc0a0</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>334380d2c5ffd5febefb5aa0bfc6d162</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4f0fa4bcad9e6a2f2d084ae4d0253acc</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>053d463f15272d949eddd17c1eb6057c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>098d8644120cfbecfce6c2fdf3dcf4fe</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3f5f33195e31cf10b663d60bee6624be</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f0221188780339a72bddffa5e64a24a6</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4310d9b5aeb6048b08cce89273d11d9c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db177314c99341fd5b57f65989a31e10</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8749ada1d603fb667f3170e056c3d3fe</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>190f94964b496b4389ff0695459c97f2</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>91c8284788f629046b289b1b8bb92fd2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a22758b40768e4e1d5292711819e73f6</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>69bde4f0ffcf252e7b41e28c541943ba</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c5379cb4329503d13767b738a076b157</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>717ad3389bb00a107750f9134d6170ef</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7d37efde4fa6742ef6090076ffde6d26</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a3c8ebf217044832c473285315d0c978</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>002b4794715b5156dd45588364e52263</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>898e016d767b6caa5dbf55b2df889524</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>77622d65d029ad3e13ed40e5c6506195</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a25d6e499bf8c44cfd04d2900ca4a156</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cac27c3e543578eb522f66c1612435bb</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>56cab772bbbecd16ed69b0b3897d7622</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>188bc271d74500df8b312869b7db9100</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>38281683e4f30ae38ebd9a77acadd68c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5a32da57863bbe61bca7ef039e1e6c3a</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2108c7da0f2be4495e270b156f30cedd</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9fa6e2ff33616025e04285d6ad985b87</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a1f413cd83d012ce882fcb2654bd9ca2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; pre_increment &gt;, T_arg &gt; &gt;</type>
      <name>operator++</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e9659bd5e4dafbdbef94794ab280fd44</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; pre_decrement &gt;, T_arg &gt; &gt;</type>
      <name>operator--</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>979840b7fcd28955b01524d2d352a731</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; negate &gt;, T_arg &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a1e0215bf7c7cec50a46b4fbc5e09f88</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_bitwise&lt; not_ &gt;, T_arg &gt; &gt;</type>
      <name>operator~</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db7ab85e9d37fd0d23e68c39d4c9f7ae</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_logical&lt; not_ &gt;, T_arg &gt; &gt;</type>
      <name>operator!</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>1f087b34043a9ddd59fd58da582e4349</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_other&lt; address &gt;, T_arg &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8d9d07ddf7ce8aec640d92b45db91309</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_other&lt; dereference &gt;, T_arg &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>977f37aadcfd2fc5045800bdfd81cde1</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; reinterpret_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>reinterpret_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0ba07befc70db9c92da9a0ba298b7c4e</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; static_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>static_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>89e8b6d6a025937d9376edf132e369e9</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; dynamic_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>dynamic_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7eb410f49742a727c3292269b99771a2</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ptr_fun.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>ptr__fun_8h</filename>
    <namespace>sigc</namespace>
    <class kind="class">sigc::pointer_functor0</class>
    <class kind="class">sigc::pointer_functor1</class>
    <class kind="class">sigc::pointer_functor2</class>
    <class kind="class">sigc::pointer_functor3</class>
    <class kind="class">sigc::pointer_functor4</class>
    <class kind="class">sigc::pointer_functor5</class>
    <class kind="class">sigc::pointer_functor6</class>
    <class kind="class">sigc::pointer_functor7</class>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun0</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gd9b9e60a02af51249293093877d12366</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun1</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g0b111edc3fc4c7d7a50a715378033b1c</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun2</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g38c4617287cf62ea5778bcd45e6b8413</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun3</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf25f261757e4ca8433e60c48072dd506</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun4</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gb33650945fc4148175796c0b45a26c15</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun5</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gffd561d08fb54a910f5f0cea173c4bbe</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun6</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g48eb020d398df8dd911ae554ee2e9887</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun7</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g4678730f53d27b7a4a4eac2cae823426</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gda8b678665c14dc85eb32d25b7299465</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g9b28ec630d156c9251de7dd12139671f</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc5c9c67966d9e6872ae952a1b1f96f08</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc897cc13ff189eadb4a7577adba53e2a</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g825d6c1994a42e3eff13f7809b73f183</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g2ad99382247bb38fcc4ff361fa4784a1</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf3efb8e32d5509d89d9e2f80e63eee1b</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g8be3b4da1860c651aa63f0340af17a4e</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reference_wrapper.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>reference__wrapper_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::reference_wrapper</class>
    <class kind="struct">sigc::const_reference_wrapper</class>
    <class kind="struct">sigc::unwrap_reference</class>
    <class kind="struct">sigc::unwrap_reference&lt; reference_wrapper&lt; T_type &gt; &gt;</class>
    <class kind="struct">sigc::unwrap_reference&lt; const_reference_wrapper&lt; T_type &gt; &gt;</class>
    <member kind="function">
      <type>reference_wrapper&lt; T_type &gt;</type>
      <name>ref</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d6e63f1697c807728f518f21f69e1931</anchor>
      <arglist>(T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const_reference_wrapper&lt; T_type &gt;</type>
      <name>ref</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>70808607392abfe36e726a7d7a455b54</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>unwrap</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9ab34595691ae106045ce14a4c39c475</anchor>
      <arglist>(const reference_wrapper&lt; T_type &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>80818400f4a09973ac095c8d59d613be</anchor>
      <arglist>(const const_reference_wrapper&lt; T_type &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors/retype.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_2retype_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::retype_functor</class>
    <class kind="struct">sigc::retype_functor::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf94761944ad0dbd50e8b933adb07db33</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_functor&lt; T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9e7ecd809ebe0491bf96d63b34a3b7d6</anchor>
      <arglist>(const slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor0&lt; T_return &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ge7d8cd2a8fba2a4eccf2bed45a52bcee</anchor>
      <arglist>(const pointer_functor0&lt; T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor1&lt; T_arg1, T_return &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g43bcf770d8f32c0863ab49eca05e9e55</anchor>
      <arglist>(const pointer_functor1&lt; T_arg1, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5132d393a612ba8e1772e637eb161d6f</anchor>
      <arglist>(const pointer_functor2&lt; T_arg1, T_arg2, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g59ed197c477846291d4434a8d4362e07</anchor>
      <arglist>(const pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9cd37b9fc31f177779032c413f4ce466</anchor>
      <arglist>(const pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf196464375fb0c0734bfc1bcffce32fe</anchor>
      <arglist>(const pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4448964acc2dfd971ee910d25aa3ef99</anchor>
      <arglist>(const pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1c542592832a561bf4df1de874493524</anchor>
      <arglist>(const pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g48a60c1ad878688272cbb00ced921fff</anchor>
      <arglist>(const mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9f3cf52bbddcd3ddb733e15a52219945</anchor>
      <arglist>(const mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g997843d50341dde86ce7c710c74dcac7</anchor>
      <arglist>(const mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e941bc2e7d8e87edf97c9ae67146f51</anchor>
      <arglist>(const mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0bcbb850de6ec9bb6fdf9b09551fe3ac</anchor>
      <arglist>(const mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6b34718e0c0c474ec70b8f98765a13fa</anchor>
      <arglist>(const mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf311f63caed67b270834ff1b0de2798d</anchor>
      <arglist>(const mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbdc6843b99c79271712131a2b325d706</anchor>
      <arglist>(const mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8f781343421e1001c500e2b312540996</anchor>
      <arglist>(const const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1be8e18a2d926fe05f379ee873509e13</anchor>
      <arglist>(const const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g902b4290aa85355946c9ee5882058d2d</anchor>
      <arglist>(const const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gec9accc0811f3cedbc0759c4654cb11c</anchor>
      <arglist>(const const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga83d29e510df23a7e211b8e22e5b1a8d</anchor>
      <arglist>(const const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g793c00167655e1d4286f465242767af7</anchor>
      <arglist>(const const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gb9298ebcf811a129acf76b0bb992d2af</anchor>
      <arglist>(const const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g77342a7c9bcb31adcfadb6e4c720a76c</anchor>
      <arglist>(const const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc159359d12e988a4042fee69cdffb260</anchor>
      <arglist>(const volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g54f984d1ddfce7e7f5c7ac6e8800675e</anchor>
      <arglist>(const volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5b36de81fc3435ddb322bf14fec8c5ce</anchor>
      <arglist>(const volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g099f82b956bad114165361dbdb013a3f</anchor>
      <arglist>(const volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1bfa9b820c9073a43e67231387efb850</anchor>
      <arglist>(const volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4218faf01b8d93f6ea2064b52b7e4b6e</anchor>
      <arglist>(const volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g337271ef256315efd7b1c994e2a568f3</anchor>
      <arglist>(const volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1a64e83d052ee1fd1a25baaa45a38ccd</anchor>
      <arglist>(const volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g391a28defc597ed6434314b65c89d7b8</anchor>
      <arglist>(const const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5201341f562754629a7cba4b1ac154e6</anchor>
      <arglist>(const const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5879e194d2bbb95c19430259a34edd42</anchor>
      <arglist>(const const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g12807cc3f987b325bdb71044c74b49e5</anchor>
      <arglist>(const const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7cfb95fa825bf1acc9c3ebbb84f5973d</anchor>
      <arglist>(const const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g918cd0f77de9fd2c55c60eba2982e14f</anchor>
      <arglist>(const const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8d495e5d373c5b155607660e2f6726f5</anchor>
      <arglist>(const const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g214e8501de3a643a551a5105c90c455d</anchor>
      <arglist>(const const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gca710e4d681b9c3a3fec16e5c93cbbf2</anchor>
      <arglist>(const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8fa17b784993d6336d779e296201cf8f</anchor>
      <arglist>(const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g97d5644de964d05ff29ed015aefdb593</anchor>
      <arglist>(const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc3744aaa21982dbf2612c6fd73a986d8</anchor>
      <arglist>(const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g84ea407d88d6ff9f9ba8b9fcfc2ff8d9</anchor>
      <arglist>(const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2b705de2cb157b8f0c2691e3c2fa18a3</anchor>
      <arglist>(const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf17901c59027ec955d89e0429f7a5756</anchor>
      <arglist>(const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7287e4694beceddfa96047ddaf39a49c</anchor>
      <arglist>(const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2e7b340189aaab7bc618b15397572a26</anchor>
      <arglist>(const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcf8109a58cf43637ad16cf0820bb0134</anchor>
      <arglist>(const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g36b43d5df6d755dc58d97f1263539cd3</anchor>
      <arglist>(const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6a099d579a3622424c918a3cec77dd81</anchor>
      <arglist>(const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8c985235cd1486493399a4abc06426cc</anchor>
      <arglist>(const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga65462bfe69452439634ddd50faf973f</anchor>
      <arglist>(const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga0b40e211a2adae5535fa3d54577c202</anchor>
      <arglist>(const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0ae20accd33a19a803dacbd3468ad70a</anchor>
      <arglist>(const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcd0c8c77539d8b8005d02c8b337c2e01</anchor>
      <arglist>(const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2919261a6fddae2a22087d7750fa6a6a</anchor>
      <arglist>(const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8ec506f8e3c58f9110abba3e57191274</anchor>
      <arglist>(const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e4c2986f8ecbb8e1bfa3b577378bfe5</anchor>
      <arglist>(const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1fe05d9673001d612f8c04b47cfa9df5</anchor>
      <arglist>(const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga13067d1efaa9cd971e920d768491987</anchor>
      <arglist>(const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5ee85a2f76f6704283c49b427685778c</anchor>
      <arglist>(const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0789104c19b2047210af67ecf114a0fa</anchor>
      <arglist>(const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4f536365709d563dad97f6daae927ab1</anchor>
      <arglist>(const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf3e306d9428c5638a70bdbd727af704d</anchor>
      <arglist>(const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbe718b667b7a517c71b0ffe1b0396eb5</anchor>
      <arglist>(const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga5a97441232fcd3327a7074273b76dfe</anchor>
      <arglist>(const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g60c0b461a02ba132a5cb9b606f2e6a8e</anchor>
      <arglist>(const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2c4682e425459e38dff66336682a86af</anchor>
      <arglist>(const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gfbca067a1510f64f4a592723610ce673</anchor>
      <arglist>(const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc5243528ad5bdd95f5915b47c5c85ff6</anchor>
      <arglist>(const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>retype.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>retype_8h</filename>
    <namespace>SigC</namespace>
    <class kind="struct">SigC::retype_slot_functor</class>
    <class kind="struct">SigC::retype_slot_functor::deduce_result_type</class>
    <class kind="struct">SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</class>
    <class kind="struct">SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>ae7d981c8a23852723ab6f1df12b967c</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_slot_functor&lt; T_functor, T_return, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>a0c37debfecd9c8a3f639ccc868bfeb2</anchor>
      <arglist>(const Slot0&lt; T_ret &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>d4c7e60f2501628a42e4f2c40bcdf85a</anchor>
      <arglist>(const Slot1&lt; T_ret, T_type1 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>e91bf2cfdcf977b8c7b6fb8201b24988</anchor>
      <arglist>(const Slot2&lt; T_ret, T_type1, T_type2 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>b4bf1daead1827a280dfa23ed30a5687</anchor>
      <arglist>(const Slot3&lt; T_ret, T_type1, T_type2, T_type3 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>23f0b219b11c9d3eb413439f273cfbdc</anchor>
      <arglist>(const Slot4&lt; T_ret, T_type1, T_type2, T_type3, T_type4 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>ce137a3c7382a38891cc85d37be2c170</anchor>
      <arglist>(const Slot5&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>759ec21a6254910426e7a8e98039dd40</anchor>
      <arglist>(const Slot6&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>587f8d8e2d3807e6cba56598ed9ebcde</anchor>
      <arglist>(const Slot7&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_slot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adaptors/retype_return.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/</path>
    <filename>adaptors_2retype__return_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::retype_return_functor</class>
    <class kind="struct">sigc::retype_return_functor::deduce_result_type</class>
    <class kind="struct">sigc::retype_return_functor&lt; void, T_functor &gt;</class>
    <class kind="struct">sigc::retype_return_functor&lt; void, T_functor &gt;::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gd33e9950e9acacd8d6817494f43b7f6d</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; T_return, T_functor &gt;</type>
      <name>retype_return</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g263b14f3b0e5616cd3b870d78a2627fa</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; void, T_functor &gt;</type>
      <name>hide_return</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>gd7e18e1edbbefe13216eb344bd522f0a</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>retype_return.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>retype__return_8h</filename>
    <namespace>SigC</namespace>
  </compound>
  <compound kind="file">
    <name>select.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/adaptors/lambda/</path>
    <filename>select_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::lambda_select1</class>
    <class kind="struct">sigc::internal::lambda_select1::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select2</class>
    <class kind="struct">sigc::internal::lambda_select2::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select3</class>
    <class kind="struct">sigc::internal::lambda_select3::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select4</class>
    <class kind="struct">sigc::internal::lambda_select4::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select5</class>
    <class kind="struct">sigc::internal::lambda_select5::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select6</class>
    <class kind="struct">sigc::internal::lambda_select6::deduce_result_type</class>
    <class kind="struct">sigc::internal::lambda_select7</class>
    <class kind="struct">sigc::internal::lambda_select7::deduce_result_type</class>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select1 &gt;</type>
      <name>_1</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e97b63f5ec67f39d2e69a746766872ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select2 &gt;</type>
      <name>_2</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b94262522878fd819509b356dcd99ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select3 &gt;</type>
      <name>_3</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c33db40bd8b060e3c0da74703cba5703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select4 &gt;</type>
      <name>_4</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2f40d3bded108703621c58d3ae80dd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select5 &gt;</type>
      <name>_5</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db53d0a0af3c53f204c58a38168a7f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select6 &gt;</type>
      <name>_6</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2d717a76ec700fcec2b40671702d4298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select7 &gt;</type>
      <name>_7</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>93fcb18aeced7e1a8577ddfb4240ebb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sigc++.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>sigc++_8h</filename>
  </compound>
  <compound kind="file">
    <name>signal.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>signal_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <namespace>SigC</namespace>
    <class kind="struct">sigc::slot_iterator</class>
    <class kind="struct">sigc::slot_const_iterator</class>
    <class kind="struct">sigc::slot_list</class>
    <class kind="struct">sigc::internal::slot_iterator_buf</class>
    <class kind="struct">sigc::internal::slot_iterator_buf&lt; T_emitter, void &gt;</class>
    <class kind="struct">sigc::internal::signal_emit0</class>
    <class kind="struct">sigc::internal::signal_emit0&lt; T_return, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit0&lt; void, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit1</class>
    <class kind="struct">sigc::internal::signal_emit1&lt; T_return, T_arg1, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit1&lt; void, T_arg1, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit2</class>
    <class kind="struct">sigc::internal::signal_emit2&lt; T_return, T_arg1, T_arg2, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit2&lt; void, T_arg1, T_arg2, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit3</class>
    <class kind="struct">sigc::internal::signal_emit3&lt; T_return, T_arg1, T_arg2, T_arg3, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit3&lt; void, T_arg1, T_arg2, T_arg3, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit4</class>
    <class kind="struct">sigc::internal::signal_emit4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit4&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit5</class>
    <class kind="struct">sigc::internal::signal_emit5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit5&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit6</class>
    <class kind="struct">sigc::internal::signal_emit6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit6&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit7</class>
    <class kind="struct">sigc::internal::signal_emit7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit7&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</class>
    <class kind="class">sigc::signal0</class>
    <class kind="class">sigc::signal1</class>
    <class kind="class">sigc::signal2</class>
    <class kind="class">sigc::signal3</class>
    <class kind="class">sigc::signal4</class>
    <class kind="class">sigc::signal5</class>
    <class kind="class">sigc::signal6</class>
    <class kind="class">sigc::signal7</class>
    <class kind="class">sigc::signal</class>
    <class kind="class">sigc::signal::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;::accumulated</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;::accumulated</class>
    <class kind="class">SigC::Signal0</class>
    <class kind="class">SigC::Signal1</class>
    <class kind="class">SigC::Signal2</class>
    <class kind="class">SigC::Signal3</class>
    <class kind="class">SigC::Signal4</class>
    <class kind="class">SigC::Signal5</class>
    <class kind="class">SigC::Signal6</class>
    <class kind="class">SigC::Signal7</class>
  </compound>
  <compound kind="file">
    <name>signal_base.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>signal__base_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::signal_impl</class>
    <class kind="struct">sigc::internal::signal_exec</class>
    <class kind="struct">sigc::internal::temp_slot_list</class>
    <class kind="struct">sigc::signal_base</class>
  </compound>
  <compound kind="file">
    <name>functors/slot.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>functors_2slot_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::typed_slot_rep</class>
    <class kind="struct">sigc::internal::slot_call0</class>
    <class kind="struct">sigc::internal::slot_call1</class>
    <class kind="struct">sigc::internal::slot_call2</class>
    <class kind="struct">sigc::internal::slot_call3</class>
    <class kind="struct">sigc::internal::slot_call4</class>
    <class kind="struct">sigc::internal::slot_call5</class>
    <class kind="struct">sigc::internal::slot_call6</class>
    <class kind="struct">sigc::internal::slot_call7</class>
    <class kind="class">sigc::slot0</class>
    <class kind="class">sigc::slot1</class>
    <class kind="class">sigc::slot2</class>
    <class kind="class">sigc::slot3</class>
    <class kind="class">sigc::slot4</class>
    <class kind="class">sigc::slot5</class>
    <class kind="class">sigc::slot6</class>
    <class kind="class">sigc::slot7</class>
    <class kind="class">sigc::slot</class>
    <class kind="class">sigc::slot&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
  </compound>
  <compound kind="file">
    <name>slot.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>slot_8h</filename>
    <namespace>SigC</namespace>
    <class kind="class">SigC::Slot0</class>
    <class kind="class">SigC::Slot1</class>
    <class kind="class">SigC::Slot2</class>
    <class kind="class">SigC::Slot3</class>
    <class kind="class">SigC::Slot4</class>
    <class kind="class">SigC::Slot5</class>
    <class kind="class">SigC::Slot6</class>
    <class kind="class">SigC::Slot7</class>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g259877f1c067ad10514f07687f337f8b</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gfacca4d95320191460b14c9e21852894</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g0ac04ea07b8fa82f006a1c7ca8aca27d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g642ee7f310005080070b485ac453f141</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g239f7cb0854b6174de6303c5b0df153d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc4b3fe13ba71b42b8013a8384b5c4d97</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gf525841f56ed2339c2fb64c7c77ffa44</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2d178de73e58532c261c79434eb80efb</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>slot_base.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/functors/</path>
    <filename>slot__base_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::slot_rep</class>
    <class kind="struct">sigc::internal::slot_do_bind</class>
    <class kind="struct">sigc::internal::slot_do_unbind</class>
    <class kind="class">sigc::slot_base</class>
    <member kind="typedef">
      <type>void *(*</type>
      <name>hook</name>
      <anchorfile>namespacesigc_1_1internal.html</anchorfile>
      <anchor>90eb672083d15b8a9acea95db57987f5</anchor>
      <arglist>)(void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trackable.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>trackable_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::trackable_callback</class>
    <class kind="struct">sigc::internal::trackable_callback_list</class>
    <class kind="struct">sigc::trackable</class>
    <member kind="typedef">
      <type>void *(*</type>
      <name>func_destroy_notify</name>
      <anchorfile>namespacesigc_1_1internal.html</anchorfile>
      <anchor>38b13093b4c9ccd2311a37b00f1113b8</anchor>
      <arglist>)(void *data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_traits.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>type__traits_8h</filename>
    <namespace>sigc</namespace>
    <class kind="struct">sigc::type_trait</class>
    <class kind="struct">sigc::type_trait&lt; T_type[N]&gt;</class>
    <class kind="struct">sigc::type_trait&lt; T_type &amp; &gt;</class>
    <class kind="struct">sigc::type_trait&lt; const T_type &amp; &gt;</class>
    <class kind="struct">sigc::type_trait&lt; void &gt;</class>
    <class kind="struct">sigc::is_base_and_derived</class>
    <class kind="struct">sigc::is_base_and_derived::big</class>
    <class kind="struct">sigc::is_base_and_derived::internal_class</class>
    <class kind="struct">sigc::is_base_and_derived&lt; T_base, T_base &gt;</class>
  </compound>
  <compound kind="file">
    <name>visit_each.h</name>
    <path>/home/murrayc/svn/gnome220/libsigc++2/sigc++/</path>
    <filename>visit__each_8h</filename>
    <namespace>sigc</namespace>
    <namespace>sigc::internal</namespace>
    <class kind="struct">sigc::internal::with_type&lt; false, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::with_type&lt; true, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::limit_derived_target</class>
    <class kind="struct">sigc::internal::with_type_pointer&lt; false, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::with_type_pointer&lt; true, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::limit_derived_target&lt; T_target *, T_action &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>gdab29aed05524743da16319da4430541</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each_type</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g5c455eda401dee43de931c24ad45d445</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>adaptors</name>
    <title>Adaptors</title>
    <filename>group__adaptors.html</filename>
    <subgroup>bind</subgroup>
    <subgroup>compose</subgroup>
    <subgroup>exception_catch</subgroup>
    <subgroup>hide</subgroup>
    <subgroup>group_</subgroup>
    <subgroup>retype</subgroup>
    <class kind="struct">sigc::adaptor_functor</class>
    <class kind="struct">sigc::adapts</class>
    <class kind="struct">sigc::adaptor_base</class>
    <class kind="struct">sigc::deduce_result_type</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__adaptors.html</anchorfile>
      <anchor>gfb822cac23e9bf97c164793a36246d5c</anchor>
      <arglist>(const T_action &amp;_A_action, const adaptor_functor&lt; T_functor &gt; &amp;_A_target)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>bind</name>
    <title>bind(), bind_return()</title>
    <filename>group__bind.html</filename>
    <class kind="struct">sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</class>
    <class kind="struct">sigc::bind_return_functor</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ged4a6aaa9d804f82fd558d553b67c3a8</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt; T_loc, T_functor, T_bound &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g97d5feac063beaf49157990f98aad6fe</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gca2e99785599f7631337d5fbbecbc610</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb9bc9f3ffe4a706128948eb00751eadc</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ga60aa29a584517ad422473281ce2864b</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5237d6d834423536367bf130760e88b3</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5017f20f5c99a9a1007476a397e6b0af</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb7f865e06297273a2b5d80b7d7865bdb</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt; I_location, T_functor, T_bound1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g2148290d2cf9c1961ec157a085badd5a</anchor>
      <arglist>(const T_functor &amp;_A_func, T_bound1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5858818e62c9df7ded906d9461d012cd</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g68057ec737e31fa433a0a5f726f27cd1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g006c34f47e2a19358be290d438c0de19</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gafb060da662d2ab98bf377c16a5df8f4</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ge20edab579c98fecb975a5cc698d8ab2</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g7f4b6bd72965b7840fa5b518e0d069c1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g356da93520385d48f66125257d2b8f2b</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6, T_type7 _A_b7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g27e8bea76ba380b8223b059369b2c485</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_return_functor&lt; T_return, T_functor &gt;</type>
      <name>bind_return</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g8a001b0bb588d2ac1af712781b89dc8a</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_return _A_ret_value)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>compose</name>
    <title>compose()</title>
    <filename>group__compose.html</filename>
    <class kind="struct">sigc::compose1_functor</class>
    <class kind="struct">sigc::compose2_functor</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g3e7453863caa786e5e6a0401a8450958</anchor>
      <arglist>(const T_action &amp;_A_action, const compose1_functor&lt; T_setter, T_getter &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g234770a49ae510afbf6530047005294e</anchor>
      <arglist>(const T_action &amp;_A_action, const compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>compose1_functor&lt; T_setter, T_getter &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g57692495ec80dd855d4653adde4c8f49</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter &amp;_A_getter)</arglist>
    </member>
    <member kind="function">
      <type>compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g5ccef00a13aa5672806c46d4abe4ce55</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter1 &amp;_A_getter1, const T_getter2 &amp;_A_getter2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>exception_catch</name>
    <title>exception_catch()</title>
    <filename>group__exception__catch.html</filename>
  </compound>
  <compound kind="group">
    <name>hide</name>
    <title>hide(), hide_return()</title>
    <filename>group__hide.html</filename>
    <class kind="struct">sigc::hide_functor&lt;-1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 0, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 2, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 3, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 4, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 5, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 6, T_functor &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>ga07f0ffec52a12cd7dcf1601938b247c</anchor>
      <arglist>(const T_action &amp;_A_action, const hide_functor&lt; I_location, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>hide_functor&lt; I_location, T_functor &gt;</type>
      <name>hide</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>g6e9653e79dbd111f458a2ccd690dadc6</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; void, T_functor &gt;</type>
      <name>hide_return</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>gd7e18e1edbbefe13216eb344bd522f0a</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lambdas</name>
    <title>Lambdas</title>
    <filename>group__lambdas.html</filename>
    <subgroup>group_</subgroup>
    <class kind="struct">sigc::lambda_base</class>
    <class kind="struct">sigc::lambda</class>
  </compound>
  <compound kind="group">
    <name>group_</name>
    <title>group()</title>
    <filename>group__group__.html</filename>
  </compound>
  <compound kind="group">
    <name>retype</name>
    <title>retype(), retype_return()</title>
    <filename>group__retype.html</filename>
    <class kind="struct">sigc::retype_functor</class>
    <class kind="struct">sigc::retype_return_functor</class>
    <class kind="struct">sigc::retype_return_functor&lt; void, T_functor &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf94761944ad0dbd50e8b933adb07db33</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_functor&lt; T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9e7ecd809ebe0491bf96d63b34a3b7d6</anchor>
      <arglist>(const slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor0&lt; T_return &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ge7d8cd2a8fba2a4eccf2bed45a52bcee</anchor>
      <arglist>(const pointer_functor0&lt; T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor1&lt; T_arg1, T_return &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g43bcf770d8f32c0863ab49eca05e9e55</anchor>
      <arglist>(const pointer_functor1&lt; T_arg1, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5132d393a612ba8e1772e637eb161d6f</anchor>
      <arglist>(const pointer_functor2&lt; T_arg1, T_arg2, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g59ed197c477846291d4434a8d4362e07</anchor>
      <arglist>(const pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9cd37b9fc31f177779032c413f4ce466</anchor>
      <arglist>(const pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf196464375fb0c0734bfc1bcffce32fe</anchor>
      <arglist>(const pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4448964acc2dfd971ee910d25aa3ef99</anchor>
      <arglist>(const pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1c542592832a561bf4df1de874493524</anchor>
      <arglist>(const pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g48a60c1ad878688272cbb00ced921fff</anchor>
      <arglist>(const mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9f3cf52bbddcd3ddb733e15a52219945</anchor>
      <arglist>(const mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g997843d50341dde86ce7c710c74dcac7</anchor>
      <arglist>(const mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e941bc2e7d8e87edf97c9ae67146f51</anchor>
      <arglist>(const mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0bcbb850de6ec9bb6fdf9b09551fe3ac</anchor>
      <arglist>(const mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6b34718e0c0c474ec70b8f98765a13fa</anchor>
      <arglist>(const mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf311f63caed67b270834ff1b0de2798d</anchor>
      <arglist>(const mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbdc6843b99c79271712131a2b325d706</anchor>
      <arglist>(const mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8f781343421e1001c500e2b312540996</anchor>
      <arglist>(const const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1be8e18a2d926fe05f379ee873509e13</anchor>
      <arglist>(const const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g902b4290aa85355946c9ee5882058d2d</anchor>
      <arglist>(const const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gec9accc0811f3cedbc0759c4654cb11c</anchor>
      <arglist>(const const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga83d29e510df23a7e211b8e22e5b1a8d</anchor>
      <arglist>(const const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g793c00167655e1d4286f465242767af7</anchor>
      <arglist>(const const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gb9298ebcf811a129acf76b0bb992d2af</anchor>
      <arglist>(const const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g77342a7c9bcb31adcfadb6e4c720a76c</anchor>
      <arglist>(const const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc159359d12e988a4042fee69cdffb260</anchor>
      <arglist>(const volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g54f984d1ddfce7e7f5c7ac6e8800675e</anchor>
      <arglist>(const volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5b36de81fc3435ddb322bf14fec8c5ce</anchor>
      <arglist>(const volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g099f82b956bad114165361dbdb013a3f</anchor>
      <arglist>(const volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1bfa9b820c9073a43e67231387efb850</anchor>
      <arglist>(const volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4218faf01b8d93f6ea2064b52b7e4b6e</anchor>
      <arglist>(const volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g337271ef256315efd7b1c994e2a568f3</anchor>
      <arglist>(const volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1a64e83d052ee1fd1a25baaa45a38ccd</anchor>
      <arglist>(const volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g391a28defc597ed6434314b65c89d7b8</anchor>
      <arglist>(const const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5201341f562754629a7cba4b1ac154e6</anchor>
      <arglist>(const const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5879e194d2bbb95c19430259a34edd42</anchor>
      <arglist>(const const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g12807cc3f987b325bdb71044c74b49e5</anchor>
      <arglist>(const const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7cfb95fa825bf1acc9c3ebbb84f5973d</anchor>
      <arglist>(const const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g918cd0f77de9fd2c55c60eba2982e14f</anchor>
      <arglist>(const const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8d495e5d373c5b155607660e2f6726f5</anchor>
      <arglist>(const const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g214e8501de3a643a551a5105c90c455d</anchor>
      <arglist>(const const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gca710e4d681b9c3a3fec16e5c93cbbf2</anchor>
      <arglist>(const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8fa17b784993d6336d779e296201cf8f</anchor>
      <arglist>(const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g97d5644de964d05ff29ed015aefdb593</anchor>
      <arglist>(const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc3744aaa21982dbf2612c6fd73a986d8</anchor>
      <arglist>(const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g84ea407d88d6ff9f9ba8b9fcfc2ff8d9</anchor>
      <arglist>(const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2b705de2cb157b8f0c2691e3c2fa18a3</anchor>
      <arglist>(const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf17901c59027ec955d89e0429f7a5756</anchor>
      <arglist>(const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7287e4694beceddfa96047ddaf39a49c</anchor>
      <arglist>(const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2e7b340189aaab7bc618b15397572a26</anchor>
      <arglist>(const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcf8109a58cf43637ad16cf0820bb0134</anchor>
      <arglist>(const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g36b43d5df6d755dc58d97f1263539cd3</anchor>
      <arglist>(const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6a099d579a3622424c918a3cec77dd81</anchor>
      <arglist>(const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8c985235cd1486493399a4abc06426cc</anchor>
      <arglist>(const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga65462bfe69452439634ddd50faf973f</anchor>
      <arglist>(const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga0b40e211a2adae5535fa3d54577c202</anchor>
      <arglist>(const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0ae20accd33a19a803dacbd3468ad70a</anchor>
      <arglist>(const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcd0c8c77539d8b8005d02c8b337c2e01</anchor>
      <arglist>(const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2919261a6fddae2a22087d7750fa6a6a</anchor>
      <arglist>(const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8ec506f8e3c58f9110abba3e57191274</anchor>
      <arglist>(const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e4c2986f8ecbb8e1bfa3b577378bfe5</anchor>
      <arglist>(const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1fe05d9673001d612f8c04b47cfa9df5</anchor>
      <arglist>(const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga13067d1efaa9cd971e920d768491987</anchor>
      <arglist>(const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5ee85a2f76f6704283c49b427685778c</anchor>
      <arglist>(const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0789104c19b2047210af67ecf114a0fa</anchor>
      <arglist>(const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4f536365709d563dad97f6daae927ab1</anchor>
      <arglist>(const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf3e306d9428c5638a70bdbd727af704d</anchor>
      <arglist>(const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbe718b667b7a517c71b0ffe1b0396eb5</anchor>
      <arglist>(const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga5a97441232fcd3327a7074273b76dfe</anchor>
      <arglist>(const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g60c0b461a02ba132a5cb9b606f2e6a8e</anchor>
      <arglist>(const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2c4682e425459e38dff66336682a86af</anchor>
      <arglist>(const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gfbca067a1510f64f4a592723610ce673</anchor>
      <arglist>(const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc5243528ad5bdd95f5915b47c5c85ff6</anchor>
      <arglist>(const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gd33e9950e9acacd8d6817494f43b7f6d</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; T_return, T_functor &gt;</type>
      <name>retype_return</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g263b14f3b0e5616cd3b870d78a2627fa</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>compat</name>
    <title>Compatibility module</title>
    <filename>group__compat.html</filename>
    <class kind="class">SigC::Signal0</class>
    <class kind="class">SigC::Signal1</class>
    <class kind="class">SigC::Signal2</class>
    <class kind="class">SigC::Signal3</class>
    <class kind="class">SigC::Signal4</class>
    <class kind="class">SigC::Signal5</class>
    <class kind="class">SigC::Signal6</class>
    <class kind="class">SigC::Signal7</class>
    <class kind="class">SigC::Slot0</class>
    <class kind="class">SigC::Slot1</class>
    <class kind="class">SigC::Slot2</class>
    <class kind="class">SigC::Slot3</class>
    <class kind="class">SigC::Slot4</class>
    <class kind="class">SigC::Slot5</class>
    <class kind="class">SigC::Slot6</class>
    <class kind="class">SigC::Slot7</class>
    <member kind="typedef">
      <type>::sigc::connection</type>
      <name>Connection</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91f89ef3d156946196625c06de970957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91af9b19917042109ebd6a01009dfcd7</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gb1e0a43a66d818a52b29479c85531139</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g4c4822aeb56b6c748008226648791860</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd8d25c2c7dd544a6b2b280e7e62e6048</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gde17bd35ebbbdd4f7e81d64f723376f1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g81a5adc40307650a5cd89d375e0987ac</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge46071e505c2519a76993d3262904ef1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g622d6dbceeade9a3bb4faeff3e5d5a8a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g75a6ff95d43b210d56f61264a56dc373</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdc3f898be979b722b25a4ad24668e3ab</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2c46b761223b969cb7a63bc60d9b8249</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g09e1ce614750eb0dda785c2dcb0820a1</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g606334d30de15d8a9b2a4b9b3bd23f68</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g635b197d134d20e6593c59b02b17b361</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd49affd5459e463a7a2fc038d4e6614b</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gaaa4e86a7f5efa0d68360725a9035e3a</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_obj &amp; &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g7246d6fa67ac9b66c913a35b93e18003</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_obj &amp;, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c952510d32d46cdfd2abf1128fc6d97</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_obj &amp;, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82b240878388eeecbaa7c279d955e807</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g52eae75f30f433a7833e700ff25ac278</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g16e743368f8ee8868a2ebf185b75f056</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g6c1842450bb4b8b99357df9c4b00cb7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gce1eff0e298e8d7cc580b827834607c7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge6e633fa340e3017871d86cb34367340</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3011c8f9efec0dc294994982f28fe520</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gcc3e1f6e658c464968947e19a188a180</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g86024098d53519ffa31aed081c347f07</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdbee3c6f5bf882d3d0283a0226db86e3</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c6d334b182a0a41a094f59d815a5367</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9f2487af1f489d5c39e019e05b579d52</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga6cd5deb8723357f578c5f57b2079a4c</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9bca6dad79e9b0cccb8550831324c06c</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g107343642e204fb11d430487da95f832</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g8fab160f730b83efbd9a74a24106a95b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g5dbe067d6c701ea6cacff393f9f240ba</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82d05033e2b2bee1ce03b1381c12da6b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga1bb9d6796c4e6c072cd83a9118307b9</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g88e87cb153a459d61776de5dfcda3677</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc47a32cf4be8bd49a9d1beef1e398f69</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g259877f1c067ad10514f07687f337f8b</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gfacca4d95320191460b14c9e21852894</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g0ac04ea07b8fa82f006a1c7ca8aca27d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g642ee7f310005080070b485ac453f141</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g239f7cb0854b6174de6303c5b0df153d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc4b3fe13ba71b42b8013a8384b5c4d97</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gf525841f56ed2339c2fb64c7c77ffa44</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2d178de73e58532c261c79434eb80efb</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>functors</name>
    <title>Functors</title>
    <filename>group__functors.html</filename>
    <subgroup>mem_fun</subgroup>
    <subgroup>ptr_fun</subgroup>
    <subgroup>slot</subgroup>
    <class kind="struct">sigc::functor_base</class>
    <member kind="define">
      <type>#define</type>
      <name>SIGC_FUNCTORS_HAVE_RESULT_TYPE</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g93b6ee8815d90adccfdceed72bcda577</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIGC_FUNCTOR_TRAIT</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g7a6f5575dc0b0ea896889c782721f6be</anchor>
      <arglist>(T_functor, T_return)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>gdab29aed05524743da16319da4430541</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each_type</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g5c455eda401dee43de931c24ad45d445</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>mem_fun</name>
    <title>mem_fun()</title>
    <filename>group__mem__fun.html</filename>
    <class kind="class">sigc::mem_functor0</class>
    <class kind="class">sigc::mem_functor1</class>
    <class kind="class">sigc::mem_functor2</class>
    <class kind="class">sigc::mem_functor3</class>
    <class kind="class">sigc::mem_functor4</class>
    <class kind="class">sigc::mem_functor5</class>
    <class kind="class">sigc::mem_functor6</class>
    <class kind="class">sigc::mem_functor7</class>
    <class kind="class">sigc::const_mem_functor0</class>
    <class kind="class">sigc::const_mem_functor1</class>
    <class kind="class">sigc::const_mem_functor2</class>
    <class kind="class">sigc::const_mem_functor3</class>
    <class kind="class">sigc::const_mem_functor4</class>
    <class kind="class">sigc::const_mem_functor5</class>
    <class kind="class">sigc::const_mem_functor6</class>
    <class kind="class">sigc::const_mem_functor7</class>
    <class kind="class">sigc::volatile_mem_functor0</class>
    <class kind="class">sigc::volatile_mem_functor1</class>
    <class kind="class">sigc::volatile_mem_functor2</class>
    <class kind="class">sigc::volatile_mem_functor3</class>
    <class kind="class">sigc::volatile_mem_functor4</class>
    <class kind="class">sigc::volatile_mem_functor5</class>
    <class kind="class">sigc::volatile_mem_functor6</class>
    <class kind="class">sigc::volatile_mem_functor7</class>
    <class kind="class">sigc::const_volatile_mem_functor0</class>
    <class kind="class">sigc::const_volatile_mem_functor1</class>
    <class kind="class">sigc::const_volatile_mem_functor2</class>
    <class kind="class">sigc::const_volatile_mem_functor3</class>
    <class kind="class">sigc::const_volatile_mem_functor4</class>
    <class kind="class">sigc::const_volatile_mem_functor5</class>
    <class kind="class">sigc::const_volatile_mem_functor6</class>
    <class kind="class">sigc::const_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_mem_functor0</class>
    <class kind="class">sigc::bound_mem_functor1</class>
    <class kind="class">sigc::bound_mem_functor2</class>
    <class kind="class">sigc::bound_mem_functor3</class>
    <class kind="class">sigc::bound_mem_functor4</class>
    <class kind="class">sigc::bound_mem_functor5</class>
    <class kind="class">sigc::bound_mem_functor6</class>
    <class kind="class">sigc::bound_mem_functor7</class>
    <class kind="class">sigc::bound_const_mem_functor0</class>
    <class kind="class">sigc::bound_const_mem_functor1</class>
    <class kind="class">sigc::bound_const_mem_functor2</class>
    <class kind="class">sigc::bound_const_mem_functor3</class>
    <class kind="class">sigc::bound_const_mem_functor4</class>
    <class kind="class">sigc::bound_const_mem_functor5</class>
    <class kind="class">sigc::bound_const_mem_functor6</class>
    <class kind="class">sigc::bound_const_mem_functor7</class>
    <class kind="class">sigc::bound_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor7</class>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a0e4bdca79dde7347318bff4d6e1eda</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gff3264460325cf2a34cc0502fec7b8b7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g497c57551529e8721861cedc1c3d5121</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5cc57f71faadc4101e7a10e0b5d7317f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g66608a108aa332faf3c3bfd418655fcb</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gee9534127cddea3f7b3e5461f768a42b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g259c308cca0572400aaed34384eafbe3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g56f7d4d8f86928edb83e1f65702a2978</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga0d89783277d6e9dede11eda2ff6c75a</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g20b2c11c8fb2a9e0bb86ad4c66c9c2e7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8ef4b45b1dcecb9270562c030e38e339</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga3c16c17557fcebdd7573fa6b2ed0dcf</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6bbf2084c41ca86d2ab99e21adf28f30</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g21e843c71a56dba1d507c9a92fad48d1</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5af2a45e22e6f53837fa0b5f9de0ad57</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf8ba948d4075a160a3c887d5bc29fe38</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g167fc8e84727e8b465c5f569da18fe7c</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc99d35f92c4859d7ba58c0f8dbee8a59</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfd990e80dc9ec40599b0e66526334ed3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8df64a5ef08edf9a3bffd45888cf6566</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g115420b91c53ff373128c8d9c5389e26</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g59db8f4f6bf774aac7a42e4db22fe525</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4fe42d39978e3534528e704a2ef69d19</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ged1e318f76b0b4560f7f7f15348bf74f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7f0b3a137305d0da984cfcaa69028645</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa45bea25d6b97dd4215c61845eb276b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8bbfab43840801b698deebdbcced31b8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4e8a4b740ba229328323782cdff5defc</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge32dedba98d5616ffed3bf45564b5925</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g0a7438643be599bd0687c6de6af6ec2b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcb29a90ac86fe224d4074619e0117cb8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gaa2493ee4790a02fad2dfd44e3e4e1f6</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gd6f8ec28efe46a939923e0ae83aa2888</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc54cbcf11289d7b7fe15dff1fc2e84f4</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g353bb1c7c03796bafe5ed2e52f012980</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga603c1c92cc9140a13d89256724de663</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g9e5cce0968f3f2a79240922ebc1b6745</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb0cbec1f295cbf8283208dedf5ab9ac7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1c9c46a46db3d5d01d582b6867665c7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfb7d7c8968bebcfea74f08c3eb55b14f</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge75bc5b94c36e78775ff5b5f20767baf</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3d62fea84f3f77ac5a315cebe5286b47</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gbb30783d2b0ac099089d70274d4459fb</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf19bbb21b4b903e1a6b97fea87e90663</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1a00dd97f2ca5e21b2b4f73fea4053b</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga34194e868680c9146f8d143ddbdd8a8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4908458d042d70f91be5f72547518e4f</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g750c42aaea61ec588daf64d4111e8429</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc725cb282b0c611c67a270a7821e173f</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g211bd1f151b5936a549a8d8e6ab911bf</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g55aafe144e22f4df7fe785c1eec839ca</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3b7fd6101534e982aa29c0308ce69006</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdedf83e65a2aca0d3aa4ac0b6d68ccd8</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g61cec9d9ec3d399f0d14a3b2edb6fecc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf6a1bce5fc8d6a117124874f2fa6ab18</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g208d42856768ebe922a1418f7250ca31</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7d9ea809173f48bf5c76cf1989591602</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa7e13948472a451e25485f2c5001028</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g13a02e1edfe8b4450aba9f9629c69183</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a171185d53c5ef87adb18bdd1d34aca</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g17d792c86d3251c2045987c4dec04494</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g72ce5f7bfd24897f48d0ebd676bcbe5a</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdbb4cac2850f0f61f6d5f9e17e02c7ba</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf995826321b8808ce8839e4abbb0550d</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g51fa4e5052666f6738abbaa628ec6cc2</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge53b7ef4bd43363998aff8a589bc254a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g47ec248386b6998e5f8b9a80191e4d5d</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6e58e3cf7e4f1b5fbcb85736369d018c</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1b200788ce261aef52a8dadaa1e2c9aa</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g81b830d633d756ca945bac75c4b2f8e8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g975cacf1b6fdd69a93c2f5ba0973f780</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb37fdbceea44a66560bb16345e1593e6</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdd76171e23f2e904c7f01264228440fc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g23120ad94420b72a8761423c5bab2bec</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g34e7257908fb33b2582f686ac51e1d74</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc41f442c5e8a533e98cce0d7df02efe6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1b6c289aa5b68e382c259bb5c35aa95</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8fbf4b5621eda8f79ba2be75bd7badd4</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfc3676e579d8e7b037c0589b2ab12270</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcdcec06e66f0ba9a970e530c953d60b6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ptr_fun</name>
    <title>ptr_fun()</title>
    <filename>group__ptr__fun.html</filename>
    <class kind="class">sigc::pointer_functor0</class>
    <class kind="class">sigc::pointer_functor1</class>
    <class kind="class">sigc::pointer_functor2</class>
    <class kind="class">sigc::pointer_functor3</class>
    <class kind="class">sigc::pointer_functor4</class>
    <class kind="class">sigc::pointer_functor5</class>
    <class kind="class">sigc::pointer_functor6</class>
    <class kind="class">sigc::pointer_functor7</class>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun0</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gd9b9e60a02af51249293093877d12366</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun1</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g0b111edc3fc4c7d7a50a715378033b1c</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun2</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g38c4617287cf62ea5778bcd45e6b8413</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun3</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf25f261757e4ca8433e60c48072dd506</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun4</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gb33650945fc4148175796c0b45a26c15</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun5</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gffd561d08fb54a910f5f0cea173c4bbe</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun6</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g48eb020d398df8dd911ae554ee2e9887</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun7</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g4678730f53d27b7a4a4eac2cae823426</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gda8b678665c14dc85eb32d25b7299465</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g9b28ec630d156c9251de7dd12139671f</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc5c9c67966d9e6872ae952a1b1f96f08</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc897cc13ff189eadb4a7577adba53e2a</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g825d6c1994a42e3eff13f7809b73f183</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g2ad99382247bb38fcc4ff361fa4784a1</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf3efb8e32d5509d89d9e2f80e63eee1b</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g8be3b4da1860c651aa63f0340af17a4e</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>slot</name>
    <title>Slots</title>
    <filename>group__slot.html</filename>
    <class kind="class">sigc::slot0</class>
    <class kind="class">sigc::slot1</class>
    <class kind="class">sigc::slot2</class>
    <class kind="class">sigc::slot3</class>
    <class kind="class">sigc::slot4</class>
    <class kind="class">sigc::slot5</class>
    <class kind="class">sigc::slot6</class>
    <class kind="class">sigc::slot7</class>
    <class kind="class">sigc::slot</class>
    <class kind="class">sigc::slot_base</class>
  </compound>
  <compound kind="group">
    <name>signal</name>
    <title>Signals</title>
    <filename>group__signal.html</filename>
    <class kind="struct">sigc::connection</class>
    <class kind="struct">sigc::slot_iterator</class>
    <class kind="struct">sigc::slot_const_iterator</class>
    <class kind="struct">sigc::slot_list</class>
    <class kind="class">sigc::signal0</class>
    <class kind="class">sigc::signal1</class>
    <class kind="class">sigc::signal2</class>
    <class kind="class">sigc::signal3</class>
    <class kind="class">sigc::signal4</class>
    <class kind="class">sigc::signal5</class>
    <class kind="class">sigc::signal6</class>
    <class kind="class">sigc::signal7</class>
    <class kind="class">sigc::signal</class>
    <class kind="class">sigc::signal::accumulated</class>
    <class kind="struct">sigc::signal_base</class>
    <class kind="struct">sigc::trackable</class>
  </compound>
  <compound kind="class">
    <name>internal::lambda_core</name>
    <filename>classinternal_1_1lambda__core.html</filename>
  </compound>
  <compound kind="class">
    <name>nil</name>
    <filename>classnil.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SigC</name>
    <filename>namespaceSigC.html</filename>
    <class kind="struct">SigC::retype_slot_functor</class>
    <class kind="struct">SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</class>
    <class kind="class">SigC::Signal0</class>
    <class kind="class">SigC::Signal1</class>
    <class kind="class">SigC::Signal2</class>
    <class kind="class">SigC::Signal3</class>
    <class kind="class">SigC::Signal4</class>
    <class kind="class">SigC::Signal5</class>
    <class kind="class">SigC::Signal6</class>
    <class kind="class">SigC::Signal7</class>
    <class kind="class">SigC::Slot0</class>
    <class kind="class">SigC::Slot1</class>
    <class kind="class">SigC::Slot2</class>
    <class kind="class">SigC::Slot3</class>
    <class kind="class">SigC::Slot4</class>
    <class kind="class">SigC::Slot5</class>
    <class kind="class">SigC::Slot6</class>
    <class kind="class">SigC::Slot7</class>
    <member kind="typedef">
      <type>::sigc::connection</type>
      <name>Connection</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91f89ef3d156946196625c06de970957</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::sigc::trackable</type>
      <name>Object</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>da96f27c4223c2c802ea830415739dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>66994e20ebbb275ea2554c8d097cb019</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound2 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>67258c5dc81d130d8ec60e7211f5ae2b</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1, T_bound2 _A_b2)</arglist>
    </member>
    <member kind="function">
      <type>inline::sigc::bind_functor&lt;-1, T_functor, typename::sigc::unwrap_reference&lt; T_bound1 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound2 &gt;::type, typename::sigc::unwrap_reference&lt; T_bound3 &gt;::type &gt;</type>
      <name>bind</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>8a6caa87aa2bc64398e35f58856460a3</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_bound1 _A_b1, T_bound2 _A_b2, T_bound3 _A_b3)</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g91af9b19917042109ebd6a01009dfcd7</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gb1e0a43a66d818a52b29479c85531139</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g4c4822aeb56b6c748008226648791860</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd8d25c2c7dd544a6b2b280e7e62e6048</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gde17bd35ebbbdd4f7e81d64f723376f1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g81a5adc40307650a5cd89d375e0987ac</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge46071e505c2519a76993d3262904ef1</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g622d6dbceeade9a3bb4faeff3e5d5a8a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g75a6ff95d43b210d56f61264a56dc373</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdc3f898be979b722b25a4ad24668e3ab</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2c46b761223b969cb7a63bc60d9b8249</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g09e1ce614750eb0dda785c2dcb0820a1</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g606334d30de15d8a9b2a4b9b3bd23f68</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g635b197d134d20e6593c59b02b17b361</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gd49affd5459e463a7a2fc038d4e6614b</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_class</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gaaa4e86a7f5efa0d68360725a9035e3a</anchor>
      <arglist>(const T_obj &amp;_A_obj, T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot1&lt; T_return, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>37f9e0a394209a52f64c603867e35ac7</anchor>
      <arglist>(const SigC::Slot0&lt; T_return &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot2&lt; T_return, T_arg1, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>751ad3eca2e15331cdc95e0e7dda1ce6</anchor>
      <arglist>(const SigC::Slot1&lt; T_return, T_arg1 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot3&lt; T_return, T_arg1, T_arg2, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>99b1cae7d2609f0362d6e02b4e8e140a</anchor>
      <arglist>(const SigC::Slot2&lt; T_return, T_arg1, T_arg2 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>0d1a625cb9559fb6ec618b537c177e60</anchor>
      <arglist>(const SigC::Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>93c9a95a7cab87a2498e71ba2fd350d4</anchor>
      <arglist>(const SigC::Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>b92113d83a5166bd0e7ce5a557e4d3e5</anchor>
      <arglist>(const SigC::Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>SigC::Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_hidden1 &gt;</type>
      <name>hide</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>6422b98b62aca7432b1764dc77ee3753</anchor>
      <arglist>(const SigC::Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_obj &amp; &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g7246d6fa67ac9b66c913a35b93e18003</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_obj &amp;, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c952510d32d46cdfd2abf1128fc6d97</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_obj &amp;, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82b240878388eeecbaa7c279d955e807</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g52eae75f30f433a7833e700ff25ac278</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g16e743368f8ee8868a2ebf185b75f056</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g6c1842450bb4b8b99357df9c4b00cb7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_obj &amp;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gce1eff0e298e8d7cc580b827834607c7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ge6e633fa340e3017871d86cb34367340</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3011c8f9efec0dc294994982f28fe520</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gcc3e1f6e658c464968947e19a188a180</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g86024098d53519ffa31aed081c347f07</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gdbee3c6f5bf882d3d0283a0226db86e3</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g3c6d334b182a0a41a094f59d815a5367</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9f2487af1f489d5c39e019e05b579d52</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga6cd5deb8723357f578c5f57b2079a4c</anchor>
      <arglist>(T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g9bca6dad79e9b0cccb8550831324c06c</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g107343642e204fb11d430487da95f832</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g8fab160f730b83efbd9a74a24106a95b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g5dbe067d6c701ea6cacff393f9f240ba</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g82d05033e2b2bee1ce03b1381c12da6b</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>ga1bb9d6796c4e6c072cd83a9118307b9</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g88e87cb153a459d61776de5dfcda3677</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc47a32cf4be8bd49a9d1beef1e398f69</anchor>
      <arglist>(const T_obj1 &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>ae7d981c8a23852723ab6f1df12b967c</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_slot_functor&lt; T_functor, T_return, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>a0c37debfecd9c8a3f639ccc868bfeb2</anchor>
      <arglist>(const Slot0&lt; T_ret &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>d4c7e60f2501628a42e4f2c40bcdf85a</anchor>
      <arglist>(const Slot1&lt; T_ret, T_type1 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>e91bf2cfdcf977b8c7b6fb8201b24988</anchor>
      <arglist>(const Slot2&lt; T_ret, T_type1, T_type2 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>b4bf1daead1827a280dfa23ed30a5687</anchor>
      <arglist>(const Slot3&lt; T_ret, T_type1, T_type2, T_type3 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>23f0b219b11c9d3eb413439f273cfbdc</anchor>
      <arglist>(const Slot4&lt; T_ret, T_type1, T_type2, T_type3, T_type4 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>ce137a3c7382a38891cc85d37be2c170</anchor>
      <arglist>(const Slot5&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>759ec21a6254910426e7a8e98039dd40</anchor>
      <arglist>(const Slot6&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>namespaceSigC.html</anchorfile>
      <anchor>587f8d8e2d3807e6cba56598ed9ebcde</anchor>
      <arglist>(const Slot7&lt; T_ret, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_slot)</arglist>
    </member>
    <member kind="function">
      <type>Slot0&lt; T_return &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g259877f1c067ad10514f07687f337f8b</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>Slot1&lt; T_return, T_arg1 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gfacca4d95320191460b14c9e21852894</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>Slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g0ac04ea07b8fa82f006a1c7ca8aca27d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>Slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g642ee7f310005080070b485ac453f141</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>Slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g239f7cb0854b6174de6303c5b0df153d</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>Slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gc4b3fe13ba71b42b8013a8384b5c4d97</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>Slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>gf525841f56ed2339c2fb64c7c77ffa44</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>Slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot</name>
      <anchorfile>group__compat.html</anchorfile>
      <anchor>g2d178de73e58532c261c79434eb80efb</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SigC::retype_slot_functor</name>
    <filename>structSigC_1_1retype__slot__functor.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <templarg>T_type6</templarg>
    <templarg>T_type7</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>ee148a80e8bd8b0a09537faa55aec0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>df74e9b58fa84c3058d46fc3cc9a9f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>49346530181012aef75254a9faf007ef</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>25c5dd1b32c4a32a9a9df9e6f51cfb74</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>4194033370c8264cada1cffe6b3f96e0</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>b7e2c929957360464945e709bb8c21e9</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>addd23bc7abd34d952ac52288f4b9376</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>efd845a7585ee57eebe3ab5956c08d15</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>2d1b7e071ca71052f7a6ef6a8ea8af15</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>c677b5d204bda665bef3b718e71e3cc2</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>ed940fc3a7469a438d2a52a542887233</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>e9f12fca50c47f3d7875322cbf174d53</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>26bc0f6755ce2e763968e322a3f0f571</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>405c88eeea69b5b96f12a3b376bbb05a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>055c46ef0b2c3f31ce66e052a59e12d5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>319517795474b23cff86d59608aa71b5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_slot_functor</name>
      <anchorfile>structSigC_1_1retype__slot__functor.html</anchorfile>
      <anchor>75729b5d31da8bfabe22cc9b06ba861f</anchor>
      <arglist>(typename::sigc::type_trait&lt; T_functor &gt;::take _A_functor)</arglist>
    </member>
    <class kind="struct">SigC::retype_slot_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>SigC::retype_slot_functor::deduce_result_type</name>
    <filename>structSigC_1_1retype__slot__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>type</name>
      <anchorfile>structSigC_1_1retype__slot__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>55848306d8a83c908df58cc450e06441</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</name>
    <filename>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <templarg>T_type6</templarg>
    <templarg>T_type7</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>38476048b7072f925c12596239d3ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>a8e0c8e3c5a623b56f6f84ac14805c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>b4d9bf779d43cdefa878891a636dc644</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>f7cc3ba93ce00e130dab3c9f3cf7a9f2</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>83454075f62726255a935360b5b40e39</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>4216c0b048c46a692e71b1656e2c52b9</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>9d220af8e6d318eee5a24de5c461a2ce</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>4c3d82cc1182960a159c959815a00832</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>f05b104dce0109a0778ba8d2202addd9</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>32b07dd3278318e01d32238c3f7ca3f9</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>ef467c396b4762d87390006d53fbbea1</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>27af5e15476a324157dff3718b9f3b6f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>17af67b081b357b5c45388303136209f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>7ff60b16e507a3e1bc3a9852ca30f2af</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>711b2f80c8cb90293dd8582f405acacc</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>6b4fa2ea817a03eff5401ca68de5605b</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_slot_functor</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_79854cbbe71ab65c99245cc9113ce1bb.html</anchorfile>
      <anchor>f158fa421c56fd6655e7b93ecfc8c43f</anchor>
      <arglist>(typename::sigc::type_trait&lt; T_functor &gt;::take _A_functor)</arglist>
    </member>
    <class kind="struct">SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>SigC::retype_slot_functor&lt; T_functor, void, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</name>
    <filename>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_a39659d96ee55480527133ba3fc5199b.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structSigC_1_1retype__slot__functor_3_01T__functor_00_01void_00_01T__type1_00_01T__type2_00_01T_a39659d96ee55480527133ba3fc5199b.html</anchorfile>
      <anchor>e03df4df4ceb1ebf683417cacc5066b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal0</name>
    <filename>classSigC_1_1Signal0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal0</base>
    <member kind="typedef">
      <type>::sigc::signal0&lt; T_return, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>fa9188c2ece48d9ba56aafed62a30c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>42d1b79738749296108ef829aadc72ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>72d2c7a408a46a042a6f9f7f4a671e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal0</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>78cface04ef55823d27aae4ff18ed2f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal0</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>5729bb2886ece0fb94244b567a7badc6</anchor>
      <arglist>(const Signal0 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal0.html</anchorfile>
      <anchor>2692b015466688dfa6d942b7e1bb83a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal1</name>
    <filename>classSigC_1_1Signal1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal1</base>
    <member kind="typedef">
      <type>::sigc::signal1&lt; T_return, T_arg1, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>780a72540fbfb500e4b01e2ce87cd00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>d809cd8c518873e6126a0a930b483cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>4bacbfdc2d1209b7fca105a60e2460d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal1</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>e2c026d064e29e069e60c8b8183655b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal1</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>6e680992a72e460c97bc14a65071f6ec</anchor>
      <arglist>(const Signal1 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal1.html</anchorfile>
      <anchor>95e97bba60a6afc0ba6f7609fee31257</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal2</name>
    <filename>classSigC_1_1Signal2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal2</base>
    <member kind="typedef">
      <type>::sigc::signal2&lt; T_return, T_arg1, T_arg2, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>3ae10646a95db9f2d4b8ffb6335314a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>38a8ec98deb75db7fce1c00f6ed94579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>48646c89dc89d9ead61935a2f014d4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal2</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>1d32c7b5eecab2cb45b1473b617f643e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal2</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>3e209a7df280877b21a076088eb4bfb4</anchor>
      <arglist>(const Signal2 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal2.html</anchorfile>
      <anchor>89bfdadae928c29cad6da5fa0ead1ef0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal3</name>
    <filename>classSigC_1_1Signal3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal3</base>
    <member kind="typedef">
      <type>::sigc::signal3&lt; T_return, T_arg1, T_arg2, T_arg3, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>f5186ab3a1b72927ff4f12ffbc276b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>97ac64991e0670861e10088df41db000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>6f5460babd11ada250d5a7460038296c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal3</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>1b5f77cf38c840513cb6a171eae2f49a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal3</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>1f99357aff4661cb39588cd808214bad</anchor>
      <arglist>(const Signal3 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal3.html</anchorfile>
      <anchor>2579f5676773d1c096935bab71dd7d00</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal4</name>
    <filename>classSigC_1_1Signal4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal4</base>
    <member kind="typedef">
      <type>::sigc::signal4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>5714fca2ab52f29f2acdd9b66ab8c762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>e9e20bd273312bb5242803b7841f7687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>5f258b0f34174b849c947fdd7f871772</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal4</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>c64ec10134ad67c05fc50a53fdab5e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal4</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>23a5d3ff386594eadfde24ef92a00198</anchor>
      <arglist>(const Signal4 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal4.html</anchorfile>
      <anchor>ff664ad33a5a182db8c03c50772eb0df</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal5</name>
    <filename>classSigC_1_1Signal5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal5</base>
    <member kind="typedef">
      <type>::sigc::signal5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>db96d2d6a370ccbb04577e15c46194eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>40c4afcfa6a7e521c76fe77d290b96f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>38123a3a9ae9f40a8e156d79b6fa5c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal5</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>0d371aed07484dc2e369efa87b38fb83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal5</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>b18aec13439d9005862478531484ea55</anchor>
      <arglist>(const Signal5 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal5.html</anchorfile>
      <anchor>bff2f6121d301ec93ece2f1bd5e17664</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal6</name>
    <filename>classSigC_1_1Signal6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal6</base>
    <member kind="typedef">
      <type>::sigc::signal6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>d9031b22b0ba5f43626646f3be735903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>56d858836e3c7c5b21e5bac12987f047</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>0980f5cd4f601b40641d6988106d588f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal6</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>007db923b1d03a227b6b4157af6dc26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal6</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>2887873949d54da8fcbdd704732f4fb6</anchor>
      <arglist>(const Signal6 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal6.html</anchorfile>
      <anchor>88076f4bdeee947364547127d948da59</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Signal7</name>
    <filename>classSigC_1_1Signal7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal7</base>
    <member kind="typedef">
      <type>::sigc::signal7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>cdeac0e6403c91807db5530123355c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>8556068dca94b7c26acf11487cb8347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>parent_type::slot_type</type>
      <name>slot_type</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>2fe75345ee99392b147685e2989436f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal7</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>1dc214b198923009199b37d79b42bd77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal7</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>2738b2cc0c9335b9c2934776e4613a1c</anchor>
      <arglist>(const Signal7 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot_type</type>
      <name>slot</name>
      <anchorfile>classSigC_1_1Signal7.html</anchorfile>
      <anchor>68db2167dff9a1c02d7b44b5256087f8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot0</name>
    <filename>classSigC_1_1Slot0.html</filename>
    <templarg>T_return</templarg>
    <base>sigc::slot&lt; T_return &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot0.html</anchorfile>
      <anchor>81f390b6eef45275916988d12231568e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot0</name>
      <anchorfile>classSigC_1_1Slot0.html</anchorfile>
      <anchor>09e7263093ee6d2c1e4a3aaa1bb900d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot0</name>
      <anchorfile>classSigC_1_1Slot0.html</anchorfile>
      <anchor>7f22f295e8efdac08d5c84325a8ff162</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot0</name>
      <anchorfile>classSigC_1_1Slot0.html</anchorfile>
      <anchor>9c5284bda2fb4c57a61a6c0fe579eb9f</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot0 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot0.html</anchorfile>
      <anchor>62d0a31bc9e39e9fa33ca0d00137c45c</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot1</name>
    <filename>classSigC_1_1Slot1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::slot&lt; T_return, T_arg1 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot1.html</anchorfile>
      <anchor>fa8b816ff60200a5a40d1b2aa235f244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot1</name>
      <anchorfile>classSigC_1_1Slot1.html</anchorfile>
      <anchor>6f2f0e62ef3e8dcb50fdd9d9eaaa26f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot1</name>
      <anchorfile>classSigC_1_1Slot1.html</anchorfile>
      <anchor>6dc48b7c51e048b45984b29b01625b25</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot1</name>
      <anchorfile>classSigC_1_1Slot1.html</anchorfile>
      <anchor>6b2c26ba4ae35790b90015f9d15e47c1</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot1 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot1.html</anchorfile>
      <anchor>b7faf8508834b60cfb0bdc11887f1170</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot2</name>
    <filename>classSigC_1_1Slot2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::slot&lt; T_return, T_arg1, T_arg2 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot2.html</anchorfile>
      <anchor>6e1beb3c947737ac134b2e5b03955e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot2</name>
      <anchorfile>classSigC_1_1Slot2.html</anchorfile>
      <anchor>ead38a71e66ed075920abce973d84660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot2</name>
      <anchorfile>classSigC_1_1Slot2.html</anchorfile>
      <anchor>52294ea2220f6773cbefa47ed4ae06b3</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot2</name>
      <anchorfile>classSigC_1_1Slot2.html</anchorfile>
      <anchor>97fc6ecbcfcb0620f417185787303812</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot2.html</anchorfile>
      <anchor>086a6bfe753ea9779f8889be57fe69b4</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot3</name>
    <filename>classSigC_1_1Slot3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot3.html</anchorfile>
      <anchor>bd4f6f59effe9027f9875cc01f099695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot3</name>
      <anchorfile>classSigC_1_1Slot3.html</anchorfile>
      <anchor>03d9f8da61234c00b14cfc383f749d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot3</name>
      <anchorfile>classSigC_1_1Slot3.html</anchorfile>
      <anchor>88b24cb9712361eab67af02514571204</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot3</name>
      <anchorfile>classSigC_1_1Slot3.html</anchorfile>
      <anchor>ac16c43498f7cbfa8e7b4a958cf67017</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot3.html</anchorfile>
      <anchor>d39241bbe3f25321bd68c1ff9f38e8f7</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot4</name>
    <filename>classSigC_1_1Slot4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot4.html</anchorfile>
      <anchor>4cdb538096b35df5fa155ed7917f3af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot4</name>
      <anchorfile>classSigC_1_1Slot4.html</anchorfile>
      <anchor>170f2edffc8cf295b2cecc82fe8fe198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot4</name>
      <anchorfile>classSigC_1_1Slot4.html</anchorfile>
      <anchor>4f9f7c298f585e5991ea3b1900f52386</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot4</name>
      <anchorfile>classSigC_1_1Slot4.html</anchorfile>
      <anchor>a41797f60efb007d836da8e2a8b70e74</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot4 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot4.html</anchorfile>
      <anchor>5b38ffc5875eb8e169176a128b8e8f6c</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot5</name>
    <filename>classSigC_1_1Slot5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot5.html</anchorfile>
      <anchor>1f1fcc6dc5c4cef6f7b03f311132a73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot5</name>
      <anchorfile>classSigC_1_1Slot5.html</anchorfile>
      <anchor>7179b86241b3de0ee2b4d2036016fb06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot5</name>
      <anchorfile>classSigC_1_1Slot5.html</anchorfile>
      <anchor>71a17a2e8ce46e421310101804f27ddc</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot5</name>
      <anchorfile>classSigC_1_1Slot5.html</anchorfile>
      <anchor>5f72f7371f99542d369309f1cbb2aa21</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot5.html</anchorfile>
      <anchor>85f686d402733998feb1a43f8b8ffd7a</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot6</name>
    <filename>classSigC_1_1Slot6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot6.html</anchorfile>
      <anchor>736431a9bd8cd47a47367f6eb2cecef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot6</name>
      <anchorfile>classSigC_1_1Slot6.html</anchorfile>
      <anchor>ad68f391f5f0ce58798c194b998678cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot6</name>
      <anchorfile>classSigC_1_1Slot6.html</anchorfile>
      <anchor>218f156629b9dfef8a3638a0cd032b05</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot6</name>
      <anchorfile>classSigC_1_1Slot6.html</anchorfile>
      <anchor>b040b5a1bfc3cfe6cb8014212c964754</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot6 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot6.html</anchorfile>
      <anchor>28583f3350b5cbf61baf93736f15b74e</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SigC::Slot7</name>
    <filename>classSigC_1_1Slot7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::slot</base>
    <member kind="typedef">
      <type>::sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classSigC_1_1Slot7.html</anchorfile>
      <anchor>860ec1c24b8a0378bda3e081793c9d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot7</name>
      <anchorfile>classSigC_1_1Slot7.html</anchorfile>
      <anchor>8441fc0a2cb9f56ed49f492904be4148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot7</name>
      <anchorfile>classSigC_1_1Slot7.html</anchorfile>
      <anchor>d679f622d80bd05b9e293c6754ac4b63</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slot7</name>
      <anchorfile>classSigC_1_1Slot7.html</anchorfile>
      <anchor>07ca3ba2448dd4cef554c47d8a4c95f5</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Slot7 &amp;</type>
      <name>operator=</name>
      <anchorfile>classSigC_1_1Slot7.html</anchorfile>
      <anchor>13fa539a1af3e0af25a007127f39e5d2</anchor>
      <arglist>(const parent_type &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sigc</name>
    <filename>namespacesigc.html</filename>
    <class kind="struct">sigc::adaptor_functor</class>
    <class kind="struct">sigc::adaptor_trait&lt; T_functor, true &gt;</class>
    <class kind="struct">sigc::adaptor_trait&lt; T_functor, false &gt;</class>
    <class kind="struct">sigc::adapts</class>
    <class kind="struct">sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;</class>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</class>
    <class kind="struct">sigc::bind_return_functor</class>
    <class kind="class">sigc::bound_argument</class>
    <class kind="class">sigc::bound_argument&lt; reference_wrapper&lt; T_wrapped &gt; &gt;</class>
    <class kind="class">sigc::bound_argument&lt; const_reference_wrapper&lt; T_wrapped &gt; &gt;</class>
    <class kind="struct">sigc::compose1_functor</class>
    <class kind="struct">sigc::compose2_functor</class>
    <class kind="struct">sigc::adaptor_base</class>
    <class kind="struct">sigc::deduce_result_type</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, void, void, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, void, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, void, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, void, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, void, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, void, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, void, true &gt;</class>
    <class kind="struct">sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, true &gt;</class>
    <class kind="struct">sigc::exception_catch_functor</class>
    <class kind="struct">sigc::exception_catch_functor&lt; T_functor, T_catcher, void &gt;</class>
    <class kind="struct">sigc::hide_functor&lt;-1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 0, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 1, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 2, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 3, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 4, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 5, T_functor &gt;</class>
    <class kind="struct">sigc::hide_functor&lt; 6, T_functor &gt;</class>
    <class kind="struct">sigc::lambda_base</class>
    <class kind="struct">sigc::lambda</class>
    <class kind="struct">sigc::unwrap_lambda_type</class>
    <class kind="struct">sigc::unwrap_lambda_type&lt; lambda&lt; T_type &gt; &gt;</class>
    <class kind="struct">sigc::lambda_group1</class>
    <class kind="struct">sigc::lambda_group2</class>
    <class kind="struct">sigc::lambda_group3</class>
    <class kind="struct">sigc::dereference_trait</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type * &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type * &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type *&amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type *&amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; T_type *const &amp; &gt;</class>
    <class kind="struct">sigc::dereference_trait&lt; const T_type *const &amp; &gt;</class>
    <class kind="struct">sigc::arithmetic</class>
    <class kind="struct">sigc::bitwise</class>
    <class kind="struct">sigc::logical</class>
    <class kind="struct">sigc::relational</class>
    <class kind="struct">sigc::arithmetic_assign</class>
    <class kind="struct">sigc::bitwise_assign</class>
    <class kind="struct">sigc::other</class>
    <class kind="struct">sigc::unary_arithmetic</class>
    <class kind="struct">sigc::unary_bitwise</class>
    <class kind="struct">sigc::unary_logical</class>
    <class kind="struct">sigc::unary_other</class>
    <class kind="struct">sigc::cast_</class>
    <class kind="struct">sigc::plus</class>
    <class kind="struct">sigc::minus</class>
    <class kind="struct">sigc::multiplies</class>
    <class kind="struct">sigc::divides</class>
    <class kind="struct">sigc::modulus</class>
    <class kind="struct">sigc::leftshift</class>
    <class kind="struct">sigc::rightshift</class>
    <class kind="struct">sigc::and_</class>
    <class kind="struct">sigc::or_</class>
    <class kind="struct">sigc::xor_</class>
    <class kind="struct">sigc::less</class>
    <class kind="struct">sigc::greater</class>
    <class kind="struct">sigc::less_equal</class>
    <class kind="struct">sigc::greater_equal</class>
    <class kind="struct">sigc::equal_to</class>
    <class kind="struct">sigc::not_equal_to</class>
    <class kind="struct">sigc::subscript</class>
    <class kind="struct">sigc::assign</class>
    <class kind="struct">sigc::pre_increment</class>
    <class kind="struct">sigc::pre_decrement</class>
    <class kind="struct">sigc::negate</class>
    <class kind="struct">sigc::not_</class>
    <class kind="struct">sigc::address</class>
    <class kind="struct">sigc::dereference</class>
    <class kind="struct">sigc::reinterpret_</class>
    <class kind="struct">sigc::static_</class>
    <class kind="struct">sigc::dynamic_</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; logical&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; relational&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; arithmetic_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; bitwise_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_deduce_result_type&lt; other&lt; subscript &gt;, T_test1, T_test2 &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_convert_deduce_result_type</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_logical&lt; T_action &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; address &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; dereference &gt;, T_test &gt;</class>
    <class kind="struct">sigc::lambda_action</class>
    <class kind="struct">sigc::lambda_action_unary</class>
    <class kind="struct">sigc::lambda_action_convert</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; plus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; minus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; multiplies &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; divides &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic&lt; modulus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; leftshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; rightshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise&lt; xor_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; logical&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; logical&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; less &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; greater &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; less_equal &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; greater_equal &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; equal_to &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; relational&lt; not_equal_to &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; plus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; minus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; multiplies &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; divides &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; arithmetic_assign&lt; modulus &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; leftshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; rightshift &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; and_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; or_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; bitwise_assign&lt; xor_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; other&lt; subscript &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action&lt; other&lt; assign &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_increment &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_decrement &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_arithmetic&lt; negate &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_bitwise&lt; not_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_logical&lt; not_ &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_other&lt; address &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_unary&lt; unary_other&lt; dereference &gt; &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; reinterpret_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; static_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_action_convert&lt; cast_&lt; dynamic_ &gt;, T_type &gt;</class>
    <class kind="struct">sigc::lambda_operator</class>
    <class kind="struct">sigc::lambda_operator_unary</class>
    <class kind="struct">sigc::lambda_operator_convert</class>
    <class kind="struct">sigc::retype_functor</class>
    <class kind="struct">sigc::retype_return_functor</class>
    <class kind="struct">sigc::retype_return_functor&lt; void, T_functor &gt;</class>
    <class kind="struct">sigc::connection</class>
    <class kind="struct">sigc::functor_base</class>
    <class kind="struct">sigc::functor_trait</class>
    <class kind="struct">sigc::functor_trait&lt; T_functor, true &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</class>
    <class kind="class">sigc::mem_functor0</class>
    <class kind="class">sigc::mem_functor1</class>
    <class kind="class">sigc::mem_functor2</class>
    <class kind="class">sigc::mem_functor3</class>
    <class kind="class">sigc::mem_functor4</class>
    <class kind="class">sigc::mem_functor5</class>
    <class kind="class">sigc::mem_functor6</class>
    <class kind="class">sigc::mem_functor7</class>
    <class kind="class">sigc::const_mem_functor0</class>
    <class kind="class">sigc::const_mem_functor1</class>
    <class kind="class">sigc::const_mem_functor2</class>
    <class kind="class">sigc::const_mem_functor3</class>
    <class kind="class">sigc::const_mem_functor4</class>
    <class kind="class">sigc::const_mem_functor5</class>
    <class kind="class">sigc::const_mem_functor6</class>
    <class kind="class">sigc::const_mem_functor7</class>
    <class kind="class">sigc::volatile_mem_functor0</class>
    <class kind="class">sigc::volatile_mem_functor1</class>
    <class kind="class">sigc::volatile_mem_functor2</class>
    <class kind="class">sigc::volatile_mem_functor3</class>
    <class kind="class">sigc::volatile_mem_functor4</class>
    <class kind="class">sigc::volatile_mem_functor5</class>
    <class kind="class">sigc::volatile_mem_functor6</class>
    <class kind="class">sigc::volatile_mem_functor7</class>
    <class kind="class">sigc::const_volatile_mem_functor0</class>
    <class kind="class">sigc::const_volatile_mem_functor1</class>
    <class kind="class">sigc::const_volatile_mem_functor2</class>
    <class kind="class">sigc::const_volatile_mem_functor3</class>
    <class kind="class">sigc::const_volatile_mem_functor4</class>
    <class kind="class">sigc::const_volatile_mem_functor5</class>
    <class kind="class">sigc::const_volatile_mem_functor6</class>
    <class kind="class">sigc::const_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_mem_functor0</class>
    <class kind="class">sigc::bound_mem_functor1</class>
    <class kind="class">sigc::bound_mem_functor2</class>
    <class kind="class">sigc::bound_mem_functor3</class>
    <class kind="class">sigc::bound_mem_functor4</class>
    <class kind="class">sigc::bound_mem_functor5</class>
    <class kind="class">sigc::bound_mem_functor6</class>
    <class kind="class">sigc::bound_mem_functor7</class>
    <class kind="class">sigc::bound_const_mem_functor0</class>
    <class kind="class">sigc::bound_const_mem_functor1</class>
    <class kind="class">sigc::bound_const_mem_functor2</class>
    <class kind="class">sigc::bound_const_mem_functor3</class>
    <class kind="class">sigc::bound_const_mem_functor4</class>
    <class kind="class">sigc::bound_const_mem_functor5</class>
    <class kind="class">sigc::bound_const_mem_functor6</class>
    <class kind="class">sigc::bound_const_mem_functor7</class>
    <class kind="class">sigc::bound_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_volatile_mem_functor7</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor0</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor1</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor2</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor3</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor4</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor5</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor6</class>
    <class kind="class">sigc::bound_const_volatile_mem_functor7</class>
    <class kind="class">sigc::pointer_functor0</class>
    <class kind="class">sigc::pointer_functor1</class>
    <class kind="class">sigc::pointer_functor2</class>
    <class kind="class">sigc::pointer_functor3</class>
    <class kind="class">sigc::pointer_functor4</class>
    <class kind="class">sigc::pointer_functor5</class>
    <class kind="class">sigc::pointer_functor6</class>
    <class kind="class">sigc::pointer_functor7</class>
    <class kind="class">sigc::slot0</class>
    <class kind="class">sigc::slot1</class>
    <class kind="class">sigc::slot2</class>
    <class kind="class">sigc::slot3</class>
    <class kind="class">sigc::slot4</class>
    <class kind="class">sigc::slot5</class>
    <class kind="class">sigc::slot6</class>
    <class kind="class">sigc::slot7</class>
    <class kind="class">sigc::slot</class>
    <class kind="class">sigc::slot&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</class>
    <class kind="class">sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="class">sigc::slot_base</class>
    <class kind="class">sigc::limit_reference</class>
    <class kind="class">sigc::limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::const_limit_reference</class>
    <class kind="class">sigc::const_limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::volatile_limit_reference</class>
    <class kind="class">sigc::volatile_limit_reference&lt; T_type, true &gt;</class>
    <class kind="class">sigc::const_volatile_limit_reference</class>
    <class kind="class">sigc::const_volatile_limit_reference&lt; T_type, true &gt;</class>
    <class kind="struct">sigc::reference_wrapper</class>
    <class kind="struct">sigc::const_reference_wrapper</class>
    <class kind="struct">sigc::unwrap_reference</class>
    <class kind="struct">sigc::unwrap_reference&lt; reference_wrapper&lt; T_type &gt; &gt;</class>
    <class kind="struct">sigc::unwrap_reference&lt; const_reference_wrapper&lt; T_type &gt; &gt;</class>
    <class kind="struct">sigc::slot_iterator</class>
    <class kind="struct">sigc::slot_const_iterator</class>
    <class kind="struct">sigc::slot_list</class>
    <class kind="class">sigc::signal0</class>
    <class kind="class">sigc::signal1</class>
    <class kind="class">sigc::signal2</class>
    <class kind="class">sigc::signal3</class>
    <class kind="class">sigc::signal4</class>
    <class kind="class">sigc::signal5</class>
    <class kind="class">sigc::signal6</class>
    <class kind="class">sigc::signal7</class>
    <class kind="class">sigc::signal</class>
    <class kind="class">sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</class>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="struct">sigc::signal_base</class>
    <class kind="struct">sigc::trackable</class>
    <class kind="struct">sigc::type_trait</class>
    <class kind="struct">sigc::type_trait&lt; T_type[N]&gt;</class>
    <class kind="struct">sigc::type_trait&lt; T_type &amp; &gt;</class>
    <class kind="struct">sigc::type_trait&lt; const T_type &amp; &gt;</class>
    <class kind="struct">sigc::type_trait&lt; void &gt;</class>
    <class kind="struct">sigc::is_base_and_derived</class>
    <class kind="struct">sigc::is_base_and_derived&lt; T_base, T_base &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)() const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const, false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</class>
    <class kind="struct">sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const, false &gt;</class>
    <namespace>sigc::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__adaptors.html</anchorfile>
      <anchor>gfb822cac23e9bf97c164793a36246d5c</anchor>
      <arglist>(const T_action &amp;_A_action, const adaptor_functor&lt; T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ged4a6aaa9d804f82fd558d553b67c3a8</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt; T_loc, T_functor, T_bound &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g97d5feac063beaf49157990f98aad6fe</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gca2e99785599f7631337d5fbbecbc610</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb9bc9f3ffe4a706128948eb00751eadc</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ga60aa29a584517ad422473281ce2864b</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5237d6d834423536367bf130760e88b3</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5017f20f5c99a9a1007476a397e6b0af</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gb7f865e06297273a2b5d80b7d7865bdb</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt; I_location, T_functor, T_bound1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g2148290d2cf9c1961ec157a085badd5a</anchor>
      <arglist>(const T_functor &amp;_A_func, T_bound1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g5858818e62c9df7ded906d9461d012cd</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g68057ec737e31fa433a0a5f726f27cd1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g006c34f47e2a19358be290d438c0de19</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>gafb060da662d2ab98bf377c16a5df8f4</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>ge20edab579c98fecb975a5cc698d8ab2</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g7f4b6bd72965b7840fa5b518e0d069c1</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6)</arglist>
    </member>
    <member kind="function">
      <type>bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</type>
      <name>bind</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g356da93520385d48f66125257d2b8f2b</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_b1, T_type2 _A_b2, T_type3 _A_b3, T_type4 _A_b4, T_type5 _A_b5, T_type6 _A_b6, T_type7 _A_b7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g27e8bea76ba380b8223b059369b2c485</anchor>
      <arglist>(const T_action &amp;_A_action, const bind_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>bind_return_functor&lt; T_return, T_functor &gt;</type>
      <name>bind_return</name>
      <anchorfile>group__bind.html</anchorfile>
      <anchor>g8a001b0bb588d2ac1af712781b89dc8a</anchor>
      <arglist>(const T_functor &amp;_A_functor, T_return _A_ret_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>78af6ff8fb24c17f5e72fd36d0be7975</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_argument&lt; T_type &gt; &amp;_A_argument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g3e7453863caa786e5e6a0401a8450958</anchor>
      <arglist>(const T_action &amp;_A_action, const compose1_functor&lt; T_setter, T_getter &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g234770a49ae510afbf6530047005294e</anchor>
      <arglist>(const T_action &amp;_A_action, const compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>compose1_functor&lt; T_setter, T_getter &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g57692495ec80dd855d4653adde4c8f49</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter &amp;_A_getter)</arglist>
    </member>
    <member kind="function">
      <type>compose2_functor&lt; T_setter, T_getter1, T_getter2 &gt;</type>
      <name>compose</name>
      <anchorfile>group__compose.html</anchorfile>
      <anchor>g5ccef00a13aa5672806c46d4abe4ce55</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter1 &amp;_A_getter1, const T_getter2 &amp;_A_getter2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a223e54f7b85d4234b330a1c8502b6ba</anchor>
      <arglist>(const T_action &amp;_A_action, const exception_catch_functor&lt; T_functor, T_catcher, T_return &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>exception_catch_functor&lt; T_functor, T_catcher &gt;</type>
      <name>exception_catch</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9aee9af00f94197bed616f6a5059c491</anchor>
      <arglist>(const T_functor &amp;_A_func, const T_catcher &amp;_A_catcher)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>ga07f0ffec52a12cd7dcf1601938b247c</anchor>
      <arglist>(const T_action &amp;_A_action, const hide_functor&lt; I_location, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>hide_functor&lt; I_location, T_functor &gt;</type>
      <name>hide</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>g6e9653e79dbd111f458a2ccd690dadc6</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c14e861d541fd6172fd66bd96b79d3c1</anchor>
      <arglist>(const T_action &amp;_A_action, const internal::lambda_core&lt; T_functor, I_islambda &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6df6801c9173642c618ac337112bb2b7</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda&lt; T_type &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; T_type &amp; &gt;</type>
      <name>var</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a354a134fa27b2dc8295af1c871b5885</anchor>
      <arglist>(T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; const T_type &amp; &gt;</type>
      <name>var</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d0f037b8944e6c5828ccbffa28726525</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>72c9f563f8d97738fa8d3d494e0ff0f5</anchor>
      <arglist>(T_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6d9b97698fd134e2ec1e103fbe893b07</anchor>
      <arglist>(const T_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap_lambda_value</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>55f65aefeb2254213ed4149610c58e16</anchor>
      <arglist>(const lambda&lt; T_type &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f281160792e31db1dac80bc28a932ce9</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group1&lt; T_functor, T_type1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3c1afe7cb631539be654133b0c1b35fc</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group2&lt; T_functor, T_type1, T_type2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>93983affe370fea0a52fe7f8f47ff7ba</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_group3&lt; T_functor, T_type1, T_type2, T_type3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group1&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d36281e6ca158599b36980a801f41aac</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group2&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type, typename unwrap_reference&lt; T_type2 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>948eb594b3254c2efbe88d1dbb4d35dc</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1, T_type2 _A_2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_group3&lt; T_functor, typename unwrap_reference&lt; T_type1 &gt;::type, typename unwrap_reference&lt; T_type2 &gt;::type, typename unwrap_reference&lt; T_type3 &gt;::type &gt; &gt;</type>
      <name>group</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>373b1216c685961b9d073e300cbda78f</anchor>
      <arglist>(const T_functor &amp;_A_func, T_type1 _A_1, T_type2 _A_2, T_type3 _A_3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>eff5a0299fefc2899b6a920ec35539b1</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator&lt;T_lambda_action, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>63a15030d38a903406a7f0e3b4ef220a</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator_unary&lt; T_lambda_action, T_arg &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3413af839d2a7c15cbcd24e5d3098542</anchor>
      <arglist>(const T_action &amp;_A_action, const lambda_operator_convert&lt; T_lambda_action, T_type, T_arg &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>29d226d0e89c123a6a99df7cf7049e98</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cc0c03760fce65203d5f67f23a05aee7</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; plus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>74d41ed6e82b12e9d2079776d1381a1b</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>26c54de4f570705ef709f745a1ded9c7</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>ebf7d41a285af52c58329c66183aca15</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; minus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>000e30854e2ad97c82db1c8e55ae9c58</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>96302d55d9f9487b85bd723983bf7dc8</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b8250f41a97fbcaf00f38e3cdac71880</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; multiplies &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db9970b1407a0d915eefd423acfc2af6</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2cd49ce61ca95eef20291ceaaa14f7f3</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>04d7fd3f8ecfe2ace16a5f03c318a56d</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; divides &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>778da0346854b55c0605811e427f7ece</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>448f704e10cf7099d202544144257829</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0df1bd3cac2a2bfbb43d250aec11b171</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic&lt; modulus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8900336dc8fbdcc1719095a98728aa07</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2be0aea0eb8880432737d42fa166a226</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>43931fdef62a0517ba0924de2f82d0a9</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; leftshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>15266193ad2aad0a0b5c77b9d54f778e</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f82dddd5da2b904553cac0cbe28fbdef</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5d32e408b09d4b18017401a618deca22</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; rightshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>961c52af18d38be10448d6305875ec42</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>461df6e22a0f398518cba4a6d188afc9</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c98c7424a1a331909cfe0e2a0761c18f</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cf462bfb7b85b19e4e4308c9a27ffcc2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7d613863e01f8cf39a3f7a67be586b37</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>79c58fce0596a170e3eb32aa589aa573</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator|</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2298b1d7394469e603ef17122d29e2c5</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9bd6e35894b866758aa37ec441e46c1b</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f5b039f488caaf8422ce7e04f8d22fd2</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise&lt; xor_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator^</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>455402cbd5b9af2923150b24f1b586ed</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f68affa8bbefac3b556d333240a97f3e</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>bca5b3586ae165f374e0ecda6e742368</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9a43e8f2ed62653f3cdd1c7fc822eac1</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5c4eea4d6cfb47d019091f7b64177dcc</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>be7b14c8d37e24cc62259aba382f5b3e</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;logical&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator||</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b185848c59fea219a747cb1009f1c881</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>64587ad0e3a569be542d546b9b1d9829</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a0f064417347c15e6c2eee46645f4b58</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e84ae7410cde285a4062beec3f2581dd</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>82df52344c1995f4b7f66efa2c6dd1e1</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>aed6caf81d925870fbc306ecaf562a9a</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>56f75748c8b6018401b8f82a93f29a58</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>276ae53620c9234c7964816aa94ba476</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>ffb5949de125154ba78a9fab53e5c88f</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; less_equal &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4a9e25129fc0832aa465ce7ec679a1be</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e1c71b2dfbafd2701d1ee7be0a5c603b</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>109def8701355bae896321317c9fbda3</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; greater_equal &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8783dd0b543f6b51467ec1256a694174</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3d4a437822ac13a0b06f8d629f162441</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6a642d0f9179d581a95ac21ad10003b5</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; equal_to &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>934ffbd686558b72a1ee12e4d9207a93</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2e406f67fa7336e1e6af7f2b6de89563</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>35550c6b98eab98d75f088abb1c06f6d</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;relational&lt; not_equal_to &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0fc828769dcf706797f1b39f88b770f9</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e4450395ac4750ab095b170da8dfc0a0</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>334380d2c5ffd5febefb5aa0bfc6d162</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; plus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4f0fa4bcad9e6a2f2d084ae4d0253acc</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>053d463f15272d949eddd17c1eb6057c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>098d8644120cfbecfce6c2fdf3dcf4fe</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; minus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3f5f33195e31cf10b663d60bee6624be</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>f0221188780339a72bddffa5e64a24a6</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>4310d9b5aeb6048b08cce89273d11d9c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; multiplies &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator *=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db177314c99341fd5b57f65989a31e10</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8749ada1d603fb667f3170e056c3d3fe</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>190f94964b496b4389ff0695459c97f2</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; divides &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>91c8284788f629046b289b1b8bb92fd2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a22758b40768e4e1d5292711819e73f6</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>69bde4f0ffcf252e7b41e28c541943ba</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;arithmetic_assign&lt; modulus &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator%=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c5379cb4329503d13767b738a076b157</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>717ad3389bb00a107750f9134d6170ef</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7d37efde4fa6742ef6090076ffde6d26</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; leftshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a3c8ebf217044832c473285315d0c978</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>002b4794715b5156dd45588364e52263</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>898e016d767b6caa5dbf55b2df889524</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; rightshift &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>77622d65d029ad3e13ed40e5c6506195</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a25d6e499bf8c44cfd04d2900ca4a156</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>cac27c3e543578eb522f66c1612435bb</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; and_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>56cab772bbbecd16ed69b0b3897d7622</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>188bc271d74500df8b312869b7db9100</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>38281683e4f30ae38ebd9a77acadd68c</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; or_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator|=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>5a32da57863bbe61bca7ef039e1e6c3a</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, T_arg1, T_arg2 &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2108c7da0f2be4495e270b156f30cedd</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, T_arg1, typename unwrap_reference&lt; T_arg2 &gt;::type &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9fa6e2ff33616025e04285d6ad985b87</anchor>
      <arglist>(const lambda&lt; T_arg1 &gt; &amp;a1, const T_arg2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;bitwise_assign&lt; xor_ &gt;, typename unwrap_reference&lt; T_arg1 &gt;::type, T_arg2 &gt; &gt;</type>
      <name>operator^=</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a1f413cd83d012ce882fcb2654bd9ca2</anchor>
      <arglist>(const T_arg1 &amp;a1, const lambda&lt; T_arg2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; pre_increment &gt;, T_arg &gt; &gt;</type>
      <name>operator++</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e9659bd5e4dafbdbef94794ab280fd44</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; pre_decrement &gt;, T_arg &gt; &gt;</type>
      <name>operator--</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>979840b7fcd28955b01524d2d352a731</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_arithmetic&lt; negate &gt;, T_arg &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>a1e0215bf7c7cec50a46b4fbc5e09f88</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_bitwise&lt; not_ &gt;, T_arg &gt; &gt;</type>
      <name>operator~</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db7ab85e9d37fd0d23e68c39d4c9f7ae</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_logical&lt; not_ &gt;, T_arg &gt; &gt;</type>
      <name>operator!</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>1f087b34043a9ddd59fd58da582e4349</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_other&lt; address &gt;, T_arg &gt; &gt;</type>
      <name>operator &amp;</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>8d9d07ddf7ce8aec640d92b45db91309</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_unary&lt; unary_other&lt; dereference &gt;, T_arg &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>977f37aadcfd2fc5045800bdfd81cde1</anchor>
      <arglist>(const lambda&lt; T_arg &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; reinterpret_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>reinterpret_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0ba07befc70db9c92da9a0ba298b7c4e</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; static_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>static_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>89e8b6d6a025937d9376edf132e369e9</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator_convert&lt; cast_&lt; dynamic_ &gt;, T_type, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>dynamic_cast_</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>7eb410f49742a727c3292269b99771a2</anchor>
      <arglist>(const T_arg &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf94761944ad0dbd50e8b933adb07db33</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_functor&lt; T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9e7ecd809ebe0491bf96d63b34a3b7d6</anchor>
      <arglist>(const slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor0&lt; T_return &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ge7d8cd2a8fba2a4eccf2bed45a52bcee</anchor>
      <arglist>(const pointer_functor0&lt; T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor1&lt; T_arg1, T_return &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g43bcf770d8f32c0863ab49eca05e9e55</anchor>
      <arglist>(const pointer_functor1&lt; T_arg1, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5132d393a612ba8e1772e637eb161d6f</anchor>
      <arglist>(const pointer_functor2&lt; T_arg1, T_arg2, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g59ed197c477846291d4434a8d4362e07</anchor>
      <arglist>(const pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9cd37b9fc31f177779032c413f4ce466</anchor>
      <arglist>(const pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf196464375fb0c0734bfc1bcffce32fe</anchor>
      <arglist>(const pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4448964acc2dfd971ee910d25aa3ef99</anchor>
      <arglist>(const pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1c542592832a561bf4df1de874493524</anchor>
      <arglist>(const pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g48a60c1ad878688272cbb00ced921fff</anchor>
      <arglist>(const mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g9f3cf52bbddcd3ddb733e15a52219945</anchor>
      <arglist>(const mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g997843d50341dde86ce7c710c74dcac7</anchor>
      <arglist>(const mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e941bc2e7d8e87edf97c9ae67146f51</anchor>
      <arglist>(const mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0bcbb850de6ec9bb6fdf9b09551fe3ac</anchor>
      <arglist>(const mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6b34718e0c0c474ec70b8f98765a13fa</anchor>
      <arglist>(const mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf311f63caed67b270834ff1b0de2798d</anchor>
      <arglist>(const mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbdc6843b99c79271712131a2b325d706</anchor>
      <arglist>(const mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8f781343421e1001c500e2b312540996</anchor>
      <arglist>(const const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1be8e18a2d926fe05f379ee873509e13</anchor>
      <arglist>(const const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g902b4290aa85355946c9ee5882058d2d</anchor>
      <arglist>(const const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gec9accc0811f3cedbc0759c4654cb11c</anchor>
      <arglist>(const const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga83d29e510df23a7e211b8e22e5b1a8d</anchor>
      <arglist>(const const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g793c00167655e1d4286f465242767af7</anchor>
      <arglist>(const const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gb9298ebcf811a129acf76b0bb992d2af</anchor>
      <arglist>(const const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g77342a7c9bcb31adcfadb6e4c720a76c</anchor>
      <arglist>(const const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc159359d12e988a4042fee69cdffb260</anchor>
      <arglist>(const volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g54f984d1ddfce7e7f5c7ac6e8800675e</anchor>
      <arglist>(const volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5b36de81fc3435ddb322bf14fec8c5ce</anchor>
      <arglist>(const volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g099f82b956bad114165361dbdb013a3f</anchor>
      <arglist>(const volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1bfa9b820c9073a43e67231387efb850</anchor>
      <arglist>(const volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4218faf01b8d93f6ea2064b52b7e4b6e</anchor>
      <arglist>(const volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g337271ef256315efd7b1c994e2a568f3</anchor>
      <arglist>(const volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1a64e83d052ee1fd1a25baaa45a38ccd</anchor>
      <arglist>(const volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g391a28defc597ed6434314b65c89d7b8</anchor>
      <arglist>(const const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5201341f562754629a7cba4b1ac154e6</anchor>
      <arglist>(const const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5879e194d2bbb95c19430259a34edd42</anchor>
      <arglist>(const const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g12807cc3f987b325bdb71044c74b49e5</anchor>
      <arglist>(const const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7cfb95fa825bf1acc9c3ebbb84f5973d</anchor>
      <arglist>(const const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g918cd0f77de9fd2c55c60eba2982e14f</anchor>
      <arglist>(const const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8d495e5d373c5b155607660e2f6726f5</anchor>
      <arglist>(const const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g214e8501de3a643a551a5105c90c455d</anchor>
      <arglist>(const const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gca710e4d681b9c3a3fec16e5c93cbbf2</anchor>
      <arglist>(const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8fa17b784993d6336d779e296201cf8f</anchor>
      <arglist>(const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g97d5644de964d05ff29ed015aefdb593</anchor>
      <arglist>(const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc3744aaa21982dbf2612c6fd73a986d8</anchor>
      <arglist>(const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g84ea407d88d6ff9f9ba8b9fcfc2ff8d9</anchor>
      <arglist>(const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2b705de2cb157b8f0c2691e3c2fa18a3</anchor>
      <arglist>(const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf17901c59027ec955d89e0429f7a5756</anchor>
      <arglist>(const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g7287e4694beceddfa96047ddaf39a49c</anchor>
      <arglist>(const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2e7b340189aaab7bc618b15397572a26</anchor>
      <arglist>(const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcf8109a58cf43637ad16cf0820bb0134</anchor>
      <arglist>(const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g36b43d5df6d755dc58d97f1263539cd3</anchor>
      <arglist>(const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g6a099d579a3622424c918a3cec77dd81</anchor>
      <arglist>(const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8c985235cd1486493399a4abc06426cc</anchor>
      <arglist>(const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga65462bfe69452439634ddd50faf973f</anchor>
      <arglist>(const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga0b40e211a2adae5535fa3d54577c202</anchor>
      <arglist>(const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0ae20accd33a19a803dacbd3468ad70a</anchor>
      <arglist>(const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gcd0c8c77539d8b8005d02c8b337c2e01</anchor>
      <arglist>(const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2919261a6fddae2a22087d7750fa6a6a</anchor>
      <arglist>(const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g8ec506f8e3c58f9110abba3e57191274</anchor>
      <arglist>(const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0e4c2986f8ecbb8e1bfa3b577378bfe5</anchor>
      <arglist>(const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g1fe05d9673001d612f8c04b47cfa9df5</anchor>
      <arglist>(const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga13067d1efaa9cd971e920d768491987</anchor>
      <arglist>(const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g5ee85a2f76f6704283c49b427685778c</anchor>
      <arglist>(const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g0789104c19b2047210af67ecf114a0fa</anchor>
      <arglist>(const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g4f536365709d563dad97f6daae927ab1</anchor>
      <arglist>(const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;, T_arg1 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gf3e306d9428c5638a70bdbd727af704d</anchor>
      <arglist>(const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;, T_arg1, T_arg2 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gbe718b667b7a517c71b0ffe1b0396eb5</anchor>
      <arglist>(const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>ga5a97441232fcd3327a7074273b76dfe</anchor>
      <arglist>(const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g60c0b461a02ba132a5cb9b606f2e6a8e</anchor>
      <arglist>(const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g2c4682e425459e38dff66336682a86af</anchor>
      <arglist>(const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gfbca067a1510f64f4a592723610ce673</anchor>
      <arglist>(const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_functor&lt; bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>retype</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gc5243528ad5bdd95f5915b47c5c85ff6</anchor>
      <arglist>(const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>gd33e9950e9acacd8d6817494f43b7f6d</anchor>
      <arglist>(const T_action &amp;_A_action, const retype_return_functor&lt; T_return, T_functor &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; T_return, T_functor &gt;</type>
      <name>retype_return</name>
      <anchorfile>group__retype.html</anchorfile>
      <anchor>g263b14f3b0e5616cd3b870d78a2627fa</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>retype_return_functor&lt; void, T_functor &gt;</type>
      <name>hide_return</name>
      <anchorfile>group__hide.html</anchorfile>
      <anchor>gd7e18e1edbbefe13216eb344bd522f0a</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a0e4bdca79dde7347318bff4d6e1eda</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gff3264460325cf2a34cc0502fec7b8b7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g497c57551529e8721861cedc1c3d5121</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5cc57f71faadc4101e7a10e0b5d7317f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g66608a108aa332faf3c3bfd418655fcb</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gee9534127cddea3f7b3e5461f768a42b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g259c308cca0572400aaed34384eafbe3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g56f7d4d8f86928edb83e1f65702a2978</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga0d89783277d6e9dede11eda2ff6c75a</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g20b2c11c8fb2a9e0bb86ad4c66c9c2e7</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8ef4b45b1dcecb9270562c030e38e339</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga3c16c17557fcebdd7573fa6b2ed0dcf</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6bbf2084c41ca86d2ab99e21adf28f30</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g21e843c71a56dba1d507c9a92fad48d1</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g5af2a45e22e6f53837fa0b5f9de0ad57</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf8ba948d4075a160a3c887d5bc29fe38</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g167fc8e84727e8b465c5f569da18fe7c</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc99d35f92c4859d7ba58c0f8dbee8a59</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfd990e80dc9ec40599b0e66526334ed3</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8df64a5ef08edf9a3bffd45888cf6566</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g115420b91c53ff373128c8d9c5389e26</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g59db8f4f6bf774aac7a42e4db22fe525</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4fe42d39978e3534528e704a2ef69d19</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ged1e318f76b0b4560f7f7f15348bf74f</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7f0b3a137305d0da984cfcaa69028645</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor0&lt; T_return, T_obj &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa45bea25d6b97dd4215c61845eb276b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor1&lt; T_return, T_obj, T_arg1 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8bbfab43840801b698deebdbcced31b8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4e8a4b740ba229328323782cdff5defc</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge32dedba98d5616ffed3bf45564b5925</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g0a7438643be599bd0687c6de6af6ec2b</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcb29a90ac86fe224d4074619e0117cb8</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gaa2493ee4790a02fad2dfd44e3e4e1f6</anchor>
      <arglist>(const T_action &amp;_A_action, const bound_const_volatile_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gd6f8ec28efe46a939923e0ae83aa2888</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc54cbcf11289d7b7fe15dff1fc2e84f4</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g353bb1c7c03796bafe5ed2e52f012980</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga603c1c92cc9140a13d89256724de663</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g9e5cce0968f3f2a79240922ebc1b6745</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb0cbec1f295cbf8283208dedf5ab9ac7</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1c9c46a46db3d5d01d582b6867665c7c</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfb7d7c8968bebcfea74f08c3eb55b14f</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge75bc5b94c36e78775ff5b5f20767baf</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3d62fea84f3f77ac5a315cebe5286b47</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gbb30783d2b0ac099089d70274d4459fb</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf19bbb21b4b903e1a6b97fea87e90663</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1a00dd97f2ca5e21b2b4f73fea4053b</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ga34194e868680c9146f8d143ddbdd8a8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g4908458d042d70f91be5f72547518e4f</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g750c42aaea61ec588daf64d4111e8429</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun0</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc725cb282b0c611c67a270a7821e173f</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun1</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g211bd1f151b5936a549a8d8e6ab911bf</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun2</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g55aafe144e22f4df7fe785c1eec839ca</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun3</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g3b7fd6101534e982aa29c0308ce69006</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun4</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdedf83e65a2aca0d3aa4ac0b6d68ccd8</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun5</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g61cec9d9ec3d399f0d14a3b2edb6fecc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun6</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf6a1bce5fc8d6a117124874f2fa6ab18</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun7</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g208d42856768ebe922a1418f7250ca31</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g7d9ea809173f48bf5c76cf1989591602</anchor>
      <arglist>(T_return(T_obj::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfa7e13948472a451e25485f2c5001028</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g13a02e1edfe8b4450aba9f9629c69183</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8a171185d53c5ef87adb18bdd1d34aca</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g17d792c86d3251c2045987c4dec04494</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g72ce5f7bfd24897f48d0ebd676bcbe5a</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdbb4cac2850f0f61f6d5f9e17e02c7ba</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gf995826321b8808ce8839e4abbb0550d</anchor>
      <arglist>(T_return(T_obj::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g51fa4e5052666f6738abbaa628ec6cc2</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>ge53b7ef4bd43363998aff8a589bc254a</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g47ec248386b6998e5f8b9a80191e4d5d</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g6e58e3cf7e4f1b5fbcb85736369d018c</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g1b200788ce261aef52a8dadaa1e2c9aa</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g81b830d633d756ca945bac75c4b2f8e8</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g975cacf1b6fdd69a93c2f5ba0973f780</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>bound_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb37fdbceea44a66560bb16345e1593e6</anchor>
      <arglist>(T_obj &amp;_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gdd76171e23f2e904c7f01264228440fc</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)() const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor1&lt; T_return, T_obj, T_arg1 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g23120ad94420b72a8761423c5bab2bec</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor2&lt; T_return, T_obj, T_arg1, T_arg2 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g34e7257908fb33b2582f686ac51e1d74</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor3&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gc41f442c5e8a533e98cce0d7df02efe6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor4&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gb1b6c289aa5b68e382c259bb5c35aa95</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor5&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>g8fbf4b5621eda8f79ba2be75bd7badd4</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor6&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gfc3676e579d8e7b037c0589b2ab12270</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const)</arglist>
    </member>
    <member kind="function">
      <type>bound_const_mem_functor7&lt; T_return, T_obj, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>mem_fun</name>
      <anchorfile>group__mem__fun.html</anchorfile>
      <anchor>gcdcec06e66f0ba9a970e530c953d60b6</anchor>
      <arglist>(T_obj *_A_obj, T_return(T_obj2::*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const)</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun0</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gd9b9e60a02af51249293093877d12366</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun1</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g0b111edc3fc4c7d7a50a715378033b1c</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun2</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g38c4617287cf62ea5778bcd45e6b8413</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun3</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf25f261757e4ca8433e60c48072dd506</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun4</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gb33650945fc4148175796c0b45a26c15</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun5</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gffd561d08fb54a910f5f0cea173c4bbe</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun6</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g48eb020d398df8dd911ae554ee2e9887</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun7</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g4678730f53d27b7a4a4eac2cae823426</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gda8b678665c14dc85eb32d25b7299465</anchor>
      <arglist>(T_return(*_A_func)())</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g9b28ec630d156c9251de7dd12139671f</anchor>
      <arglist>(T_return(*_A_func)(T_arg1))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc5c9c67966d9e6872ae952a1b1f96f08</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gc897cc13ff189eadb4a7577adba53e2a</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g825d6c1994a42e3eff13f7809b73f183</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g2ad99382247bb38fcc4ff361fa4784a1</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>gf3efb8e32d5509d89d9e2f80e63eee1b</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6))</arglist>
    </member>
    <member kind="function">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>ptr_fun</name>
      <anchorfile>group__ptr__fun.html</anchorfile>
      <anchor>g8be3b4da1860c651aa63f0340af17a4e</anchor>
      <arglist>(T_return(*_A_func)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>45fbeeeed09915ba6eac52d8c0e6f601</anchor>
      <arglist>(const T_action &amp;_A_action, const limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>3d6923539508a182c7c0f2cd14f7da76</anchor>
      <arglist>(const T_action &amp;_A_action, const const_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>6d8d4ebf03d12349254c840b6abeab1b</anchor>
      <arglist>(const T_action &amp;_A_action, const volatile_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>0729e10eaf72affb56a48c20f7197009</anchor>
      <arglist>(const T_action &amp;_A_action, const const_volatile_limit_reference&lt; T_type, I_derives_trackable &gt; &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>reference_wrapper&lt; T_type &gt;</type>
      <name>ref</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>d6e63f1697c807728f518f21f69e1931</anchor>
      <arglist>(T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const_reference_wrapper&lt; T_type &gt;</type>
      <name>ref</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>70808607392abfe36e726a7d7a455b54</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>unwrap</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>9ab34595691ae106045ce14a4c39c475</anchor>
      <arglist>(const reference_wrapper&lt; T_type &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>unwrap</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>80818400f4a09973ac095c8d59d613be</anchor>
      <arglist>(const const_reference_wrapper&lt; T_type &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>gdab29aed05524743da16319da4430541</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit_each_type</name>
      <anchorfile>group__functors.html</anchorfile>
      <anchor>g5c455eda401dee43de931c24ad45d445</anchor>
      <arglist>(const T_action &amp;_A_action, const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select1 &gt;</type>
      <name>_1</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>e97b63f5ec67f39d2e69a746766872ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select2 &gt;</type>
      <name>_2</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>b94262522878fd819509b356dcd99ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select3 &gt;</type>
      <name>_3</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>c33db40bd8b060e3c0da74703cba5703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select4 &gt;</type>
      <name>_4</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2f40d3bded108703621c58d3ae80dd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select5 &gt;</type>
      <name>_5</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>db53d0a0af3c53f204c58a38168a7f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select6 &gt;</type>
      <name>_6</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>2d717a76ec700fcec2b40671702d4298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIGC_API const lambda&lt; internal::lambda_select7 &gt;</type>
      <name>_7</name>
      <anchorfile>namespacesigc.html</anchorfile>
      <anchor>93fcb18aeced7e1a8577ddfb4240ebb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::adaptor_functor</name>
    <filename>structsigc_1_1adaptor__functor.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adaptor_base</base>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>dc1e7ebba9db294494c62666e10b719b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>d8c4661823ac312617e144a6f70ca2b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>0ba158e2b88cc981d04785eb67d0da0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>9c559d220453ec63086fd7545bba127a</anchor>
      <arglist>(T_arg1 _A_arg1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>fdf07645562e9dda584c156330a9ffa1</anchor>
      <arglist>(T_arg1 _A_arg1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>033f2b7d0bd2bbef96069f805b2a2571</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>7df3ac05fccda5ea88fd2684c7537e26</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>f8fccded37c4603c00ee502c5c364130</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>c4d9404fb828e80705db55b3816ae58d</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>49ccf92b535795138184915e5d659012</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>3be5ecd844012cb665931e442ec671d9</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>ffdccefaa3b4ac7d661d1cf6e4fa2695</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>4b06256f41e1b1c78d8727a58bd7aab8</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>a80c10ddbe4700870a06b73b253314ec</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>4cc696ed7c3f4aec84fc7a346b027f6b</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>8e40fac6bfea534395570599435506c5</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6, T_arg7 _A_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>8858e8e083fc2fa8a5faa55240a017fe</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6, T_arg7 _A_arg7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>adaptor_functor</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>39ef4610f8e0f03425b6f4a44b59e5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>adaptor_functor</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>c5907212f7ee2eadf10b31757a0c5930</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>adaptor_functor</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>5e2d241e5424287f5611ca89e5f2c3ea</anchor>
      <arglist>(const T_type &amp;_A_type)</arglist>
    </member>
    <member kind="variable">
      <type>T_functor</type>
      <name>functor_</name>
      <anchorfile>structsigc_1_1adaptor__functor.html</anchorfile>
      <anchor>4faff6b7a82f4f6d92e3d3b0aa8fdca8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::adaptor_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::adaptor_functor::deduce_result_type</name>
    <filename>structsigc_1_1adaptor__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1adaptor__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>77e4f97e584f6409ee8b3f6edbeb965d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::adaptor_trait&lt; T_functor, true &gt;</name>
    <filename>structsigc_1_1adaptor__trait_3_01T__functor_00_01true_01_4.html</filename>
    <templarg>T_functor</templarg>
    <member kind="typedef">
      <type>T_functor::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01true_01_4.html</anchorfile>
      <anchor>6b83ed91f53a25e7002546a2835457b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_functor</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01true_01_4.html</anchorfile>
      <anchor>e065e339af2abe58cad43d630328240f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_functor</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01true_01_4.html</anchorfile>
      <anchor>449daad4cd77bd1fbfe59d8fae9d9039</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::adaptor_trait&lt; T_functor, false &gt;</name>
    <filename>structsigc_1_1adaptor__trait_3_01T__functor_00_01false_01_4.html</filename>
    <templarg>T_functor</templarg>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01false_01_4.html</anchorfile>
      <anchor>512a6d201bdd43574a2df993b3b85d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::functor_type</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01false_01_4.html</anchorfile>
      <anchor>cb1a7066d665d00e2525c49d089efc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_functor&lt; functor_type &gt;</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1adaptor__trait_3_01T__functor_00_01false_01_4.html</anchorfile>
      <anchor>d3bd68364a24b2b6580b523d5301b25c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::adapts</name>
    <filename>structsigc_1_1adapts.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adaptor_base</base>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1adapts.html</anchorfile>
      <anchor>914e75556dae1fdcf0162c4c99aca79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1adapts.html</anchorfile>
      <anchor>5c3f3b614455552f4cd5d88b1f330248</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>adapts</name>
      <anchorfile>structsigc_1_1adapts.html</anchorfile>
      <anchor>947b69ccbdcabd4ef4163dcab96096f8</anchor>
      <arglist>(const T_functor &amp;_A_functor)</arglist>
    </member>
    <member kind="variable">
      <type>adaptor_type</type>
      <name>functor_</name>
      <anchorfile>structsigc_1_1adapts.html</anchorfile>
      <anchor>2f4b37eb160708baf17de57f2abce7a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>c6004db92703257f83addd412037f1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1c6d091ffd70c23930cf6e2b9042d466</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0f1c2891d52c9f564e571209dbef6f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>6d1ff46be850bbe6badd65deb4ccaacd</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f888c2519b0f8c79808fc97a07985f1a</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d83257d54f6b0092ccdf56695b6dc1b8</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>7211d4217844faeaea70331b61e8f660</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a9d49c6b4cd1d951c984039c3580c5cc</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0ecaa680ba951a66d68e7faec67df628</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1e0f203e5cc19f03d850b09d022c6b0b</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>b17a55d53441e453a470899078cde35b</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a6b99b87aa3c81666ab112a7c94d6cfa</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d2cd5c4f03ca4c0024dd74a8fbe9a980</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a790a0ed9f5aad39b0a023d1424a1cd1</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e278350bb7d80e129909c07ea89eca73</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0be421283bbc5c67a1ab96e7f8f77028</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>fbbf5b4d89cf98a1224da5d72554afdc</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 0, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0132d9fef6d36f92ec7a3deff47f6137da.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_010_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0132d9fef6d36f92ec7a3deff47f6137da.html</anchorfile>
      <anchor>5683873f31e3e86cf067a44fc37115bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>4e419a8d7aa957a5c1afb35aefe57a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2f7597edfcd91bf642d4baacee3a7b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a2bcf32286ba2912744eb1169067ec59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>4de1fde42e74801cede6b7c3621c4468</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>574f9ed13638936cf0da7d507272f623</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>11b1326c504322673c89e9bd15ed3a30</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a0cdc286fd28e0fb32cc9707c5577e8a</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0139464b84e7ddfa2a8fcd819d33abcc</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>49a6b904317f861840a2302e198744ee</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>8fb7e44f19d92b9d44325c7608bb135b</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2d907ccdc74a62c64b283d0c4af1b476</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e75864ba1fc2807532e1094136fb7134</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d9a6f1c38ba286ec95a6b32e9fac7fb3</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d7eb510120b123fdb6fbd18be7c916e0</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>c4419cb936fda98faf32a8f04db9eac0</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>14798f86a7b38f36426e29704cb17100</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d8331004c66b2e60f0cd553a533a61d2</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 1, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01e73460ea38ce7fb71e9279b0694083fb.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_011_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01e73460ea38ce7fb71e9279b0694083fb.html</anchorfile>
      <anchor>ebc0b190dfc27e8bcc659649208bfdc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>4f7493a358133955a08a59f07030ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3c68a3b7223b63b70e608df4a400b675</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>bb3cd41d06f2eafd38126f08999a2567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>afa57ea5a021e8e32c4e2c209e4be172</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d495d6db4c604d95f9e8e58666e8c308</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a4c1fee1b4858ba827b23d2562f27bca</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>cf8f8bb24c913c995f3ab07038678925</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9e41185493ab93af071e351f7e15f27f</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>ee7d1a497443b7d965ccf273a54103de</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>41c6e04bcc8785eff10ce05a26f32ce0</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0fdac946c32ac632e3d92776b9a9761b</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d8c0350009d1c6a8660a243eb53df221</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>dc7298e1f4fe6223b99607abaf9a8e02</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f75430623536770de9ba3c2718b6e3e9</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>cf86c7dec6968eb06dec3b9be15582b6</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 2, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_016356ab027ebb39d013cc4af746745a9c.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_012_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_016356ab027ebb39d013cc4af746745a9c.html</anchorfile>
      <anchor>c91dc3e83fcbf00d98c896b1b0ac68ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a219d38b7c030ebff7257d9c0dd9bd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>552915228f6db01f3aa2b008c9894356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1c8244d240d9cdfa8b3f0c13db0b7bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>7764866af1758c13de25cb3ea080cb28</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>38046f022eab74ee5bfd09ae1d4ccfec</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e147621aa45aa78d269a634f2ccb64e9</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>69a59de3eb5ef32831ec4b2e156ed986</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>7f8707b8b63c3744cb344025a767d641</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>4bd80074db4b800419cb68082f66f7f8</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>dbba2d88ba46eb0fa74769b88b56eaa9</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9999fc0e4006cf60610514c28c0780d8</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>87794cddfcf0d191103b8e3e8770b1ad</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>183b6ef14f9bb2ca7593ae25fcc6b566</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 3, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_017560d2426cc9fe329cf18e5c6d545169.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_013_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_017560d2426cc9fe329cf18e5c6d545169.html</anchorfile>
      <anchor>8b63153565149caa3bd38aa1132dcc9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>6886f337564cbd40f291c14a0ccaa700</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>b00f7387ada9482c459c0ae42a9d40e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>96e33b27a899fb0a990987356c01b779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>ebb3aa24154dad66f50541cb3a8b6116</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1a7cdb9a058f07133cdbb68520aa715c</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d5eb733682fc9c34e624505ba7505965</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>43c02f41417218ea42c6deee07cbcd1c</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f81c3b55ad110c7aea00577eef2ec267</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3267d0b5f9aa6fddc6fa73413cb552ac</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>24aaf4897582754a0d13acdf5f43cf74</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e8051f05fa094eb7eebc7b75a3e869a4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 4, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0118066c8354d99c2d8c8b2ac000ab4029.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_014_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0118066c8354d99c2d8c8b2ac000ab4029.html</anchorfile>
      <anchor>46579720942492091addb339066d5325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9988f66660218b0af708ad3489793ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>fa273ba1cd6d0680e61231577b9c4be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f32afdf49ae33d065f9dfe59d24c785f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9d4a5acc3ac142ade481f1ba1b6dc0b0</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>055c09d6a7f2563dc3822bbbfaa7d951</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>6c307eb510326e37dedb0bcd5e87bf8d</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0c4356b5e16613f059d9226b90bf0fa2</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>0260c8d492914066175cb59c247a2727</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>4d6d8a46ef6c1e5764452526c99a6ad0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 5, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0185af47ffa728658de28c196864556c75.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_015_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_0185af47ffa728658de28c196864556c75.html</anchorfile>
      <anchor>280caf005c6af29e63096c67b8e2a726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_bound</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>08ed9e0a1988b67a1dc4472e1c22b741</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>22b7b60a30095f40f39f28edeff9492d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>24e3fab5a62fed1f380c6fe09ecd481b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>67a79582c042086096f006532cb8f79a</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>625fe8a085269e40d5cde2ab71efff60</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>611bb801c823659c0ddeb773acd0267c</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_bound &gt;::take _A_bound)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_bound &gt;</type>
      <name>bound_</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>26df6c92715ed9c8ab926e1610b43f6d</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt; 6, T_functor, T_bound, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01e9e1f2058c97a22b7185345bc15fb2c7.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; typename unwrap_reference&lt; T_bound &gt;::type &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3_016_00_01T__functor_00_01T__bound_00_01nil_00_01nil_00_01nil_00_01e9e1f2058c97a22b7185345bc15fb2c7.html</anchorfile>
      <anchor>acab332d21bfd2db1274e0c830412847</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>c249b81b5d6fff6e7c4b1d9b47a98077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>bd1e51093bf7d4428e443c2e6704bed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>5bd5dd13ef2cd495cfd23b8d0f7cffbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>6d95e68e3188982d484ddc86677959e5</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a3865519e04ab426d5e33fd538059bbd</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>736864f91fff5cfda4df07bea2d57fcb</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a6e912f61ad227f9dee789f28ec91226</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e668428337bdc7f31ec0d12d6104a3cf</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e4904e326b04474e70786fa68b8a0090</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>11c804427b62768a00904062687cc820</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>8f1330df7f01892bf558505971260aee</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>723997173958c2aa5a140350f1e2daff</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1e5168af6a423140f6fd50a727d6ad48</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>941bc9cbceced1c2003641bd72d68ea5</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1f39be381e4151af7674d1cfac034470</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5, T_arg6 _A_arg6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f8471d9a82a86ff6e66337e3d7b90ce7</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>5e92e05deb3d9e952a49a338bac42cb4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, nil, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nif45bb6f36a175d6d30b5f4143a5c1b22.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01nil_00_01nil_00_01nil_00_01nif45bb6f36a175d6d30b5f4143a5c1b22.html</anchorfile>
      <anchor>bd2f70833e55ed501e838015b1c70ad9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a1cc43626326930fa4cc6037cf27b446</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f0fac93b8bd81143ecaaac58e6c498b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>235ca78708676962f30dccedd87ffb6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3611b07a6ba746cfa557d9adbdba5780</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>894d2f406682408d577e539115efb634</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>ed38119b837b7eb43c30f1ae47163e7d</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>be2507324d5d2d4cb45ddd1ac1406744</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2f0b0b0800a2c8ee1c9436e6ffbf6bf9</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d05243fa087cb27a09046b9441a10cb8</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2d421a49ac1e934424da8cc0e3d53534</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>38278fadf86cd3e2865037645c28ce1d</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f6db1896656094369444bf5ebbca0f00</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>afdd05dc36115ed95043bbec0ade9737</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4, T_arg5 _A_arg5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>44e3dd4c9fddb7d85fcf9f497ca1f137</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f6a2b5797268291370f6168955da202a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>dcf5f0783790dc0728e3c5c6f08693ee</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, nil, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00adb9c19cedd7b002566cd8fdb6d0dde5.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01nil_00_01nil_00adb9c19cedd7b002566cd8fdb6d0dde5.html</anchorfile>
      <anchor>898262911e3815c7f2d8c41c1d14a256</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>305b0129e6ccf49a07ee60d75b2f3f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>805960e0db4497a6ec286b27dabb463d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>65ff57c7dc27fd243c5e0243b6dd786d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>49e95e73b9adf0079e2e6f4099a8fc8e</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>2af134fb220cfc027b5f26a64cee3108</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>431eda8c4379be77184d8b78e332aace</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>900330b95ea843cf697717819351e2ab</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>a4b10c70edd9eddad1d9018f31d7948f</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>534664aab69afcabe0c9450f10fd1edd</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>2dd1a52acb505f07a0b82b690da5c3c2</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>1b73645924dca83a287a583fdfe23c9e</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3, T_arg4 _A_arg4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>0758ea0cc72a9b28c64341714a4b0670</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2, typename type_trait&lt; T_type3 &gt;::take _A_bound3)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>e266ad4912d15387ff4dd15c869c75c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>e91dbc33b6eae2a546d777a619854a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type3 &gt;</type>
      <name>bound3_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n6d14effad731c8dfead9984e87967108.html</anchorfile>
      <anchor>d7b6f64bb961dbea17ae21c6cdcb0090</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, nil, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n541d7e10b20b3915c769011725f6928b.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01n541d7e10b20b3915c769011725f6928b.html</anchorfile>
      <anchor>62cc29912fc82b646d3b04dd9eccedad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>92b89a6d0d13c0e9ae5309908b581608</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>ecd13135852faa48d9414eed9202982c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>ebf48e91c18c66ce5aa5b1230fd0fdb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>0848580916c20699c80b86452021fc5c</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>88bb45817f64fd2a1e4b6e17ddbbf4cd</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>2207b53217dac22034a94d116e0902b0</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>c59e541ab1537f5f96d78945e26d138d</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>30e9e77f219a0c326bedaab6907b4414</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>78b00a5d9a0eceb54ef79557ce04e154</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2, T_arg3 _A_arg3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>6dfa95d7e06c08f9cd8ed03f14431575</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2, typename type_trait&lt; T_type3 &gt;::take _A_bound3, typename type_trait&lt; T_type4 &gt;::take _A_bound4)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>0d2d5d66ee71ffbb8e7218a7e4f2c0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>bf10518fcf731d95e0e6e27c9fc1741c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type3 &gt;</type>
      <name>bound3_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>f6b463eded8ff99c422a34f98519bb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type4 &gt;</type>
      <name>bound4_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T8abd615cc403946700f41917bb90042c.html</anchorfile>
      <anchor>5187e45b7af1006767c5ebb288c3555e</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, nil, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf493573c5bd6f89e7781e615e5a4d30c.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf493573c5bd6f89e7781e615e5a4d30c.html</anchorfile>
      <anchor>7f93f3882360f28b13d59689bff4d49e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>44729fbea5675e17e580eff1eb0a393a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>6836c666ddde5331afc0da584ddf92a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>cd5470485ad4ccf8a956a2b678f0a7bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>0f8b0ab2bbc081d162f86297829958f1</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>8b733b7e7f81cd369aaf187aa97d4ada</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>55dba10b307418c689bbf2209a581604</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>9dc54385677d05c3e6c94638c04d3def</anchor>
      <arglist>(T_arg1 _A_arg1, T_arg2 _A_arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>139f13a91c6defcbe9d5a792a077f0a0</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2, typename type_trait&lt; T_type3 &gt;::take _A_bound3, typename type_trait&lt; T_type4 &gt;::take _A_bound4, typename type_trait&lt; T_type5 &gt;::take _A_bound5)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>6b5fed0e07352377b26e3478ce8a14d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>36592a7778e76e4f2367c601a76e673b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type3 &gt;</type>
      <name>bound3_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>4641abd3cae48f7f0c7077438db32f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type4 &gt;</type>
      <name>bound4_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>7a35dc6c868269f2952531c4db84cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type5 &gt;</type>
      <name>bound5_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf230465d8da8d21a2da815d7eb05b413.html</anchorfile>
      <anchor>2c3fefad99767ba5b808a48b2cd9d8ce</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, nil, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf918b78bdf8f6d0df67ae29ec2390e4d.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf918b78bdf8f6d0df67ae29ec2390e4d.html</anchorfile>
      <anchor>0a3ac08609a765c87a6541c835b90eb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <templarg>T_type6</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>00c38c0ae66f54f5a40d7b4949477e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>1888cca0a439d2c7f669e22b6692c871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>55a0f25bd2d5c88b503cfc0f1b58f996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>e1239679cdd4f1192dbd5e5342d87999</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>367bf64683455dba921ba6fc26ded143</anchor>
      <arglist>(T_arg1 _A_arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>31b84f13abd13a0050040acef0d09468</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2, typename type_trait&lt; T_type3 &gt;::take _A_bound3, typename type_trait&lt; T_type4 &gt;::take _A_bound4, typename type_trait&lt; T_type5 &gt;::take _A_bound5, typename type_trait&lt; T_type6 &gt;::take _A_bound6)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>c6c7e858ee6cb6e27139a51a9a226cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>a02ff31f6ce95605e87140b540ad0af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type3 &gt;</type>
      <name>bound3_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>10fcf127ff05fc9d8a510944f9813847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type4 &gt;</type>
      <name>bound4_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>eda77a97a8c8724a74009ac8dbbc1945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type5 &gt;</type>
      <name>bound5_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>e88acda8d7cee9a80ba0b62d892e1a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type6 &gt;</type>
      <name>bound6_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T5d526f12c92849dac4a70f282eec9dc2.html</anchorfile>
      <anchor>2a45387b53dfd93676b99add1f7f64b5</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, nil &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Te548659e7564a89af7d41781273b6d47.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Te548659e7564a89af7d41781273b6d47.html</anchorfile>
      <anchor>1d5f7eed1ac43d6e0abf3e770456518b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <templarg>T_type6</templarg>
    <templarg>T_type7</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>502efcde055ef7e646bf058af912835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>37b01688264add8854c453e4c0d0e9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>03d721cd1b1112e74d2802fac9146fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_functor</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>99e77f86ef7c1ea42efbef6d495d49d1</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_bound1, typename type_trait&lt; T_type2 &gt;::take _A_bound2, typename type_trait&lt; T_type3 &gt;::take _A_bound3, typename type_trait&lt; T_type4 &gt;::take _A_bound4, typename type_trait&lt; T_type5 &gt;::take _A_bound5, typename type_trait&lt; T_type6 &gt;::take _A_bound6, typename type_trait&lt; T_type7 &gt;::take _A_bound7)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type1 &gt;</type>
      <name>bound1_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>9ef2b1e18b91e4a2e04049e1ffef5e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type2 &gt;</type>
      <name>bound2_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>8771398c71a8cb9c4f5678377edbdc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type3 &gt;</type>
      <name>bound3_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>d9c525c70d9e01eeef04f36de002e0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type4 &gt;</type>
      <name>bound4_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>2d315e3dcfa974e639073e7cecbfa092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type5 &gt;</type>
      <name>bound5_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>c09a29703ae5a5547e73c4af5a5dfe03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type6 &gt;</type>
      <name>bound6_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>34ec55dd385d600aed9efb429aef9082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_type7 &gt;</type>
      <name>bound7_</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01T1564029be5092b4f54029884f8072971.html</anchorfile>
      <anchor>9b771868cfcd8d48958757732ba20ddc</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_functor&lt;-1, T_functor, T_type1, T_type2, T_type3, T_type4, T_type5, T_type6, T_type7 &gt;::deduce_result_type</name>
    <filename>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf14a7bac79bfed32bf9fa43842eac945.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>deduce_result_type_internal&lt; internal::count_void&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::value, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__functor_3-1_00_01T__functor_00_01T__type1_00_01T__type2_00_01T__type3_00_01Tf14a7bac79bfed32bf9fa43842eac945.html</anchorfile>
      <anchor>64d71216780a0e1d6c69b58468b08c72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_return_functor</name>
    <filename>structsigc_1_1bind__return__functor.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>4fe6cb8d80573ae7abe934ba54879592</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>35959a6f4d5f6ddc83f603ee67d25981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>466ae021edd58b81d908ef8af280d3ae</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>a22999fb3d3d91d62301745958dc09d6</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>75930ac53c11974979f050508af6e190</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>4527320f3d2ea1c99e73692b8aded08c</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>3b079bb9a4732265b35d9c3f844d01c5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>7527d3f5d0904c27d41bdae2bcd3c648</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>db2a31182c3c0924a9aa9bf35c1c7361</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>27739807de486ddfc46c759f52349e85</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>f7d9f16f8ecd13f9f36d599190bd1f27</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>42c4b85a601d455ff183f3c0b2051b7d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>0dfac2307b1b5949a2fb645b423e98d2</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>1d1203727ac529fdd0593892837cfcbf</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>63d5dbb322d176068fce7224b88b7550</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>f9334690a066b62a28f185fa1162ac25</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bind_return_functor</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>f55e50941ead03070bcc10742545393e</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_functor, typename type_trait&lt; T_return &gt;::take _A_ret_value)</arglist>
    </member>
    <member kind="variable">
      <type>bound_argument&lt; T_return &gt;</type>
      <name>ret_value_</name>
      <anchorfile>structsigc_1_1bind__return__functor.html</anchorfile>
      <anchor>a7b8287c19d98cec75a7e64a9464772e</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::bind_return_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::bind_return_functor::deduce_result_type</name>
    <filename>structsigc_1_1bind__return__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>unwrap_reference&lt; T_return &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1bind__return__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>a7551a244048f47038ab99bedec54f21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_argument</name>
    <filename>classsigc_1_1bound__argument.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>bound_argument</name>
      <anchorfile>classsigc_1_1bound__argument.html</anchorfile>
      <anchor>495bb69a41b38eda5d6ace5a36807a37</anchor>
      <arglist>(const T_type &amp;_A_argument)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1bound__argument.html</anchorfile>
      <anchor>e4816ddf9275c55962542dc7bba20397</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1bound__argument.html</anchorfile>
      <anchor>f1cf20526bade89328a1ed398055bbba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_argument&lt; reference_wrapper&lt; T_wrapped &gt; &gt;</name>
    <filename>classsigc_1_1bound__argument_3_01reference__wrapper_3_01T__wrapped_01_4_01_4.html</filename>
    <templarg>T_wrapped</templarg>
    <member kind="function">
      <type></type>
      <name>bound_argument</name>
      <anchorfile>classsigc_1_1bound__argument_3_01reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>46f705d774a2436055785b7a55830349</anchor>
      <arglist>(const reference_wrapper&lt; T_wrapped &gt; &amp;_A_argument)</arglist>
    </member>
    <member kind="function">
      <type>const limit_reference&lt; T_wrapped &gt; &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1bound__argument_3_01reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>20a829c033c5b6dda01b7d27d5505988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_wrapped &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1bound__argument_3_01reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>dbeb73917559e0764bf367dfc6c4141d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_argument&lt; const_reference_wrapper&lt; T_wrapped &gt; &gt;</name>
    <filename>classsigc_1_1bound__argument_3_01const__reference__wrapper_3_01T__wrapped_01_4_01_4.html</filename>
    <templarg>T_wrapped</templarg>
    <member kind="function">
      <type></type>
      <name>bound_argument</name>
      <anchorfile>classsigc_1_1bound__argument_3_01const__reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>fdfab4386d34bd03e82b05a2eb1f2afe</anchor>
      <arglist>(const const_reference_wrapper&lt; T_wrapped &gt; &amp;_A_argument)</arglist>
    </member>
    <member kind="function">
      <type>const const_limit_reference&lt; T_wrapped &gt; &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1bound__argument_3_01const__reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>f582d504a83ac50bf326c05f80adc79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T_wrapped &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1bound__argument_3_01const__reference__wrapper_3_01T__wrapped_01_4_01_4.html</anchorfile>
      <anchor>a08b2efa73ad0a928f0be217da940671</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::compose1_functor</name>
    <filename>structsigc_1_1compose1__functor.html</filename>
    <templarg>T_setter</templarg>
    <templarg>T_getter</templarg>
    <base>sigc::adapts&lt; T_setter &gt;</base>
    <member kind="typedef">
      <type>adapts&lt; T_setter &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>90d506f177dca8afeaef61b6b5956541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_setter</type>
      <name>setter_type</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>86a8bc8f4926f7bb91ef362fff03a25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_getter</type>
      <name>getter_type</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>d54c2d62658fb7a47da41df0ccfc618c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>b096c0a388f877d97b3812f2fcc813f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>e7c074e7656595157b0f421028e34609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>9f62474bff9556ad121ddad12fa88947</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>0f713575aca72366b279b6848beb358d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>9adc39a7621973c1733ff135889804a8</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>fd50c09ce16f5a85b38e3ac94605d32a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>1987657453a0674509bed12ea5c9ab58</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>1a4e315be3b2ae15aebf72fb5a89a3ff</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>de3d56cd03f5d7ed64e84909fe3b2d62</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compose1_functor</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>1bb831ebfb46a214a6ffda98e77ad044</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter &amp;_A_getter)</arglist>
    </member>
    <member kind="variable">
      <type>getter_type</type>
      <name>get_</name>
      <anchorfile>structsigc_1_1compose1__functor.html</anchorfile>
      <anchor>bc9151caeb78b1cd79ce1eb6984dc066</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::compose1_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::compose1_functor::deduce_result_type</name>
    <filename>structsigc_1_1compose1__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename sigc::deduce_result_type&lt; T_getter, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1compose1__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>c29137207dc6fe81b6b51a909c5a6cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::compose2_functor</name>
    <filename>structsigc_1_1compose2__functor.html</filename>
    <templarg>T_setter</templarg>
    <templarg>T_getter1</templarg>
    <templarg>T_getter2</templarg>
    <base>sigc::adapts&lt; T_setter &gt;</base>
    <member kind="typedef">
      <type>adapts&lt; T_setter &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>c1c9b3dc43cc75ec65fe0708fb4450d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_setter</type>
      <name>setter_type</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>c3d7308c702df7378af1635281d5f7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_getter1</type>
      <name>getter1_type</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>b7ab82eee45e8df9116a5a2b7c12c39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_getter2</type>
      <name>getter2_type</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>75e252684d06f75f036043df56d8df69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>78ccb07f23696a452df9f61308885542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>3cfcfa7d8d95962b3448ed886f3495a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>392db1f15f313d3a40b4ba895541b6ed</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>65417b2fe7f400b8e8df48374952ae71</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>e345bceb9ddfcaced3e71a21b18f8a9d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>3036c8a5ee9f6e5b17e296227379c876</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>1ab1eff249d9113da1c2eeb2cbfcbb19</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>888591ad01232bf3291645cef648297f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>dcd3c043292196deb86d3eb0b25005a0</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compose2_functor</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>72719db97ab3ffdc0176ea3b443ffb60</anchor>
      <arglist>(const T_setter &amp;_A_setter, const T_getter1 &amp;_A_getter1, const T_getter2 &amp;_A_getter2)</arglist>
    </member>
    <member kind="variable">
      <type>getter1_type</type>
      <name>get1_</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>f5404ffb509175690aa896932571e8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>getter2_type</type>
      <name>get2_</name>
      <anchorfile>structsigc_1_1compose2__functor.html</anchorfile>
      <anchor>f8404295ebbcb968a798c9fdf3f3d527</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::compose2_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::compose2_functor::deduce_result_type</name>
    <filename>structsigc_1_1compose2__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename sigc::deduce_result_type&lt; T_getter1, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type, typename sigc::deduce_result_type&lt; T_getter2, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type &gt;::type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1compose2__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>dc75559f67bafed3def078cca063ad2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::adaptor_base</name>
    <filename>structsigc_1_1adaptor__base.html</filename>
    <base>sigc::functor_base</base>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type</name>
    <filename>structsigc_1_1deduce__result__type.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>I_derives_adaptor_base</templarg>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type.html</anchorfile>
      <anchor>97d97214974202d86af020af07b2e0c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, void, void, void, void, void, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01void_00_01void_00_01void_00_01void_00_01vdb2f9f83b3eba2baeb19678a790211a3.html</filename>
    <templarg>T_functor</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01void_00_01void_00_01void_00_01void_00_01vdb2f9f83b3eba2baeb19678a790211a3.html</anchorfile>
      <anchor>3dc997b9eda82650a0d4599455133ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, void, void, void, void, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01void_00_01void_00_01void_00_f4c559613b292c7b689426d5c155df15.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01void_00_01void_00_01void_00_f4c559613b292c7b689426d5c155df15.html</anchorfile>
      <anchor>5b103b33717c3716a9b782a3596b0d3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, void, void, void, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01void_00_01void_724dd7c759e838f48e6fa6545d8e015d.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01void_00_01void_724dd7c759e838f48e6fa6545d8e015d.html</anchorfile>
      <anchor>9c8fe4411ce28685c1679598203e0e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, void, void, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01vo258d7260cbbb4e192063ff2984a0677a.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01vo258d7260cbbb4e192063ff2984a0677a.html</anchorfile>
      <anchor>fbbe3a8c7f6005a8baf5a9dde04e52cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, void, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_9b37fe7be1f2633448bc6b77ab8f97ff.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_9b37fe7be1f2633448bc6b77ab8f97ff.html</anchorfile>
      <anchor>a436c06c2daa3fdcf436be76ed94e14b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, void, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_d8ef7847af7e7170bed8f3a632586811.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_d8ef7847af7e7170bed8f3a632586811.html</anchorfile>
      <anchor>c69be0ce2ba230b79c1f6ab3ab943247</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, void, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_4788a98c68901ad51b4daf97aed5e129.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_4788a98c68901ad51b4daf97aed5e129.html</anchorfile>
      <anchor>3fd9740e4a56f6ebb4347a56f76eb523</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::deduce_result_type&lt; T_functor, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, true &gt;</name>
    <filename>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_5c3a161eb5dba3c597d379b0bd504e5f.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_functor::template deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1deduce__result__type_3_01T__functor_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T_5c3a161eb5dba3c597d379b0bd504e5f.html</anchorfile>
      <anchor>74ec9b294df17a3463a0530fd374593d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::exception_catch_functor</name>
    <filename>structsigc_1_1exception__catch__functor.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_catcher</templarg>
    <templarg>T_return</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>5dc4ecab205c7ad5c3954c2572d4cc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>498f5575ae283594cfe03288fab54fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>9f6b5068be1af2623e2aef727f2b73db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>6261688ebdfe2b08bd533aa56d71eea8</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>00566dbe9547d6d309d07bbb238c314b</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>9dbe140eebfe9e0d15cb59b6bd1fe8f1</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>56f1ecaf49487779044947919e5f6665</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>0bff1de3d5bab454cce051af0469faf5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>a1ddc8d7602f7140da79e776e164b0f3</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>d4901bd3cb30b3d6e15680667c8f90fe</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception_catch_functor</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>cefeea54e1d83cb64844a956598918fd</anchor>
      <arglist>(const T_functor &amp;_A_func, const T_catcher &amp;_A_catcher)</arglist>
    </member>
    <member kind="variable">
      <type>T_catcher</type>
      <name>catcher_</name>
      <anchorfile>structsigc_1_1exception__catch__functor.html</anchorfile>
      <anchor>f94123d76a61a13258893ed575a019b0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::exception_catch_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::exception_catch_functor::deduce_result_type</name>
    <filename>structsigc_1_1exception__catch__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1exception__catch__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>a2e88415cf1dfa0ed6e610eb506f54a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::exception_catch_functor&lt; T_functor, T_catcher, void &gt;</name>
    <filename>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_catcher</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>06506e0d4da26682740b7f4f9aec80d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>a9803c7bd355ae0674dbfabf346676c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>24e842daf8e8d756e2b77ceb47c55c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>9ad88a4a5a7e340cbf1271476ea9ca80</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>fe7da7c123dd1c46df8a0788baa33624</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>e8fde3aa510f2128e0cec83823a63f35</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>550fd220f5512daf90ed23399dee6ba0</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>6f4b0ffee177ca49de020966d6fc7d48</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>dc13cc0d15890caf44810e43f0466a63</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>57a60fafb6b60014d92294ee176cc6ed</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception_catch_functor</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>84b167dc0dd520253776c55eb711c461</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception_catch_functor</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>08a5ce7a94a0646e92c5eb8fb6b7d5f3</anchor>
      <arglist>(const T_functor &amp;_A_func, const T_catcher &amp;_A_catcher)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~exception_catch_functor</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>1537e7d0175046d65522bd960149bb62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T_catcher</type>
      <name>catcher_</name>
      <anchorfile>structsigc_1_1exception__catch__functor_3_01T__functor_00_01T__catcher_00_01void_01_4.html</anchorfile>
      <anchor>cc50467493545db2b55e638f7ac28c42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt;-1, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>1f2c49ddcd02a3b7f240f0d0e6f0eec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>72ea0ce5ad7cf4f9e0e7b160d830c5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>5f49fe2557bfc4e7e897de89907cc1d7</anchor>
      <arglist>(T_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>613933e29afa7eedbf0870d0916351b2</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>536f1538383372413158411cb92bf18f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>eba94bf6b29d8713b3c1d766e48cda37</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>f771453a37de11e2dd28a9202d0c1a45</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>0b20362469a60e175a159d1f10d5c4c5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>5d77ea73d8b37a8a247bf985b20695cf</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>161bc71698c8d1b4c369a3c3661c3592</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>f507b422ec94b06b0554a6209ae58b8a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>d49650277f364f5b1b46d123d9e76c7a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>5793e205d81a3d0ff7f74d2b44d1203e</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>aad1b4f9fd12b57c11883241ac77a2c6</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>c39a6bdcbc55da75fdfc1d790a6bee50</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>2805f4142f7c55c0028a5aa63972715a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4.html</anchorfile>
      <anchor>4c8d774e447991a6a920b9f3fca63205</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt;-1, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt;-1, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3-1_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>710c6d9902e5ce5e0193882f1b704991</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 0, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>33b1c4635aad21aac771627a9a9fe60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>f5b5ee49bb277471b5bc8e3769d0dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>cd52b550d8247d3af549abfc1bf078f0</anchor>
      <arglist>(T_arg1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>7cd079cb0386559e717d11434b323b79</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>8496e105c9d09905f54baea0de5fc486</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>ec48baaedcda30ccbc743d050400e044</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>8413a06531c14176fbf968d24cec31a5</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>10f11b9df6841a6d209a82f26ea8da71</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>8d63c9a2f8bc99ba7de087d5963af4c3</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>09d1d91cbb2e49a1aec7de9d7994a84c</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>5c4fe00d3cf8c3bcf5d408cadd71c47d</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>ab400ce34acbf2985bbe22c677619466</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>261579ba69b340056e534b9a59b589d6</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>537f38e3c143d72dc678e806ceb0e9d6</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>66e373ecf56b0343914b9843dca452cf</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>faf1f24161362308298a110158115221</anchor>
      <arglist>(T_arg1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4.html</anchorfile>
      <anchor>7d5504f337ab7a4b6f709219c9e98222</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 0, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 0, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_010_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>7551b38b46d7d31688e8bfc649cdc010</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 1, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>abeb7617b48442f91a5140058861d520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>e8024e936ecd59767fd3ffb561e780f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>3663e776ccb23e0ab583083f7a479ac7</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>d15c544b9c9532fd73b44893fd01531a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>d11652b8953dd41f1d3d9c20ba6e2671</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>a9ae517d44a3076d80a85c082e88fa03</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>50b91b9b41dcbe0b927d4c6921e36d75</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>7471d0a3a005f689c9c9dfd38e6c2bf7</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>ebcac3a8f63db1d8893230dc65f98f0d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>4e6c5f3b6120c69d1dcc5e2a316b44fc</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>c613ac0d0e72710483243fd5e87e92eb</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>44478b462d31692f20801d64d9df501e</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>35c7cbea577f748b107da0090098c327</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>caaa6bce4ae79552359e40f472a24848</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4.html</anchorfile>
      <anchor>53652df5705cfb349f87380d19808b9f</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 1, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 1, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_011_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>4d30b7f0396f7762f93cec94a17916e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 2, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>8297705e5738033f09a509f268a039dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>612e90e6314e9cc7e1868949881695c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>535fffe02bff20800ac57b76a681a2f3</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>6d5f38676aa15d483487f1f50edfa529</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>a6c99abc2454c4e6234689f827264bcc</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>80351f62af07708e867f3b2b554e5072</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>19eee763fcefeef53be35ba693044939</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>24e528343b133902b1bacd60d65cd019</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>3934a2d270ec90eb617892cf46207cb7</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>4fbdc8c50db9e63949a9cf1cab7cef54</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>4d8cb159b8a650cd68fb738422f8d3eb</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>5fe846a90bf077482a661e8ec55e5906</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4.html</anchorfile>
      <anchor>edc9b530c9bda39d71f29576813cb8ba</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 2, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 2, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_012_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>88615eb77ac05e7af4de0a40e3890763</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 3, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>970b687ba983449a94e553198ec8f1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>3166703a8a4b6e7733647c5afbe8e100</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>70ea7e551c523054efd6f3dd734f4d50</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>d19bbb84e4997a093330ba3b20bb4f9d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>a041bb47bf77adf9d3516f68fc3b61ae</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>60bfdea6301e81133f1b0653c3d7f59a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>70b9554f9d95cebd27530362544de70f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>539211d07b1fd67f258cbe0c49aabf36</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>0a430c7b128570c73fec07f3f1d35fe7</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>248d253230c26fe1869ad8b2839f1780</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4.html</anchorfile>
      <anchor>ed633e1fa5dd9bf9d9efe8fff75f1b07</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 3, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 3, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_013_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>bebb2ac4a84e56a6c35b11d13ca35262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 4, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>24c2e2f296b3a01231aa14f1cef23219</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>449ddaf8c594be9deeb1ec904675c0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>a08a29443178481ecc91dc7f67a8c41c</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>daa546a6ff22b4f47d3c2ac5fadd7177</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>64f6392c4eb8cb03adc3750437efd169</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>d3ac2324d5f4750b1fb80ac670bfea70</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>32054ddfedc1e9ada883e3b95af53e22</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>2a9c56fea389a68529947d042d816410</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4.html</anchorfile>
      <anchor>2c20f1b03f294d517be9ec85b1e2cb8c</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 4, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 4, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_014_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>02fe300e28dca5c24410df6f7537669d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 5, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>b5fa41d2de24cc0e4e24fae7d88c63ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>19e890794f0d29ef3f3f473c1f44a95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>38ec57e6041938a7f311333d4b3bc1e5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>60d1c26a9e12bbaec49f425a38b3944e</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>fcb6eaee2a2ee67cf21fbfb16ed5b51a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>6dd927b8561f51bbeb05b216b39f763e</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4.html</anchorfile>
      <anchor>55264516f83ff42acdbb26b5054586f3</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 5, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 5, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_015_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>d80839ea0b989b53d393a08afcaaa181</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 6, T_functor &gt;</name>
    <filename>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</anchorfile>
      <anchor>2f1676a8653d76751cee340263ec66e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</anchorfile>
      <anchor>7c27b78db8bdc77911835b702024b13a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</anchorfile>
      <anchor>48602324576e950f52b25031d8c2df05</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</anchorfile>
      <anchor>2f9c2a0228923e86e05adfb04063fc2a</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hide_functor</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4.html</anchorfile>
      <anchor>3628f6f3baec79a363a9320987c112f9</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <class kind="struct">sigc::hide_functor&lt; 6, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::hide_functor&lt; 6, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1hide__functor_3_016_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>58917fb13c4a3e02779b7dd4f4d44886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_base</name>
    <filename>structsigc_1_1lambda__base.html</filename>
    <base>sigc::adaptor_base</base>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda</name>
    <filename>structsigc_1_1lambda.html</filename>
    <templarg>T_type</templarg>
    <base>internal::lambda_core</base>
    <member kind="typedef">
      <type>lambda&lt; T_type &gt;</type>
      <name>self</name>
      <anchorfile>structsigc_1_1lambda.html</anchorfile>
      <anchor>d25413132b4ce715f39e412fb0fc8945</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda</name>
      <anchorfile>structsigc_1_1lambda.html</anchorfile>
      <anchor>98c9c8c66727f22d6f53358d48ddd949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda</name>
      <anchorfile>structsigc_1_1lambda.html</anchorfile>
      <anchor>91e27c4fdac4597967558b32559bee90</anchor>
      <arglist>(typename type_trait&lt; T_type &gt;::take v)</arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;other&lt; subscript &gt;, self, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>operator[]</name>
      <anchorfile>structsigc_1_1lambda.html</anchorfile>
      <anchor>eea2b65d8211848d4d30cd37b31555e4</anchor>
      <arglist>(const T_arg &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>lambda&lt; lambda_operator&lt;other&lt; assign &gt;, self, typename unwrap_lambda_type&lt; T_arg &gt;::type &gt; &gt;</type>
      <name>operator=</name>
      <anchorfile>structsigc_1_1lambda.html</anchorfile>
      <anchor>b714142b3ad9366510c606addb8da524</anchor>
      <arglist>(const T_arg &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::unwrap_lambda_type</name>
    <filename>structsigc_1_1unwrap__lambda__type.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>unwrap_reference&lt; T_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1unwrap__lambda__type.html</anchorfile>
      <anchor>adfb5741dde3970115b666c4e033ce2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::unwrap_lambda_type&lt; lambda&lt; T_type &gt; &gt;</name>
    <filename>structsigc_1_1unwrap__lambda__type_3_01lambda_3_01T__type_01_4_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1unwrap__lambda__type_3_01lambda_3_01T__type_01_4_01_4.html</anchorfile>
      <anchor>533dabb2c57ca7d6f4cbfc4c7b915d84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group1</name>
    <filename>structsigc_1_1lambda__group1.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>c602edad96df05d967b6a5c4936f0ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type1 &gt;::lambda_type</type>
      <name>value1_type</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>4ba1e4dee915b4bd089d34337b25583b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::adaptor_type</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>33608fda37bc84ec8a336f9d52d4924e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>d5cebf3930cde73b12faefdee1d38645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>ca22152a8e0e4ebba866fb9aa84b6d49</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>65bff9253020c65b0a2114831ecaecef</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>515942d71107220d37ba68b24101640d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>c4e019fcf8c944a92ff3611cea8763fb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>ce8fd914905e38ac08c896f922418396</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>a15d3588c38c130b2bd30c4efa83ca00</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>a63978b1ef17d1182c060f2983e2e818</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>64ea859b4c84e9c1029c3bce5c15f10a</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>ac94985fc2f09fd93f32136aa6380396</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>ba649b772b6536fe8b918cd9cc894346</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>c3bd253c9d5fef860d3f53ca27797eef</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>bfa84facfc69d01892a967a99bf300a4</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>0474f92a98bb3b6326f1c782215b52e4</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>465164e6dee9c1ce6b493ff53f7f9bce</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_group1</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>306d752cc63d4ad177b30da0072b1ff6</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_1)</arglist>
    </member>
    <member kind="variable">
      <type>value1_type</type>
      <name>value1_</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>0243095285dd004dbfa78e4148b75b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>functor_type</type>
      <name>func_</name>
      <anchorfile>structsigc_1_1lambda__group1.html</anchorfile>
      <anchor>c11cb4cd0685ce3745bf438bb59006e4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_group1::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group1::deduce_result_type</name>
    <filename>structsigc_1_1lambda__group1_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>functor_type::template deduce_result_type&lt; typename value1_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__group1_1_1deduce__result__type.html</anchorfile>
      <anchor>ba7b7069b97dd6ade113883712b57ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group2</name>
    <filename>structsigc_1_1lambda__group2.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>cedf5bd987b41b0a975aece3f91562c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type1 &gt;::lambda_type</type>
      <name>value1_type</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>ba1e85dabda9b2c0fffbf41d2cc83064</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type2 &gt;::lambda_type</type>
      <name>value2_type</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>48051f2cfec13546be194319afc6678f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::adaptor_type</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>97ac691a597ef2063a4d0c53b99c28c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>431d669f5b4b22784dab2291c398ec88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>445e032bb5084f60cdf0b16fea8e6e5c</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>2b7115edd7d5d7da68bc9f6201c15809</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>279db4b3aac5e6bfce22c3433bf7383a</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>4cf9b35b92ea9e8a3f4e74b4aa398daa</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>980bf9e66a2eb03dc15ed35f9c123fb3</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>c75199f781217265f866bbd4c90fc30c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>cbf41cba1c164544c3990a4144f34a5f</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>efdc0c7bc0e80a1c4c5b3398c2ea257c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>7c08124fb1068eb47cd90410ae5e409c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>769e80ebbbefee224325a9a5546e5b69</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>3fdeddbb7f237f65e38e070cb2f930d7</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>0842a28937cbaca66ee0fd78e6169469</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>0bf417cbf267f76c6eedb06387a8614c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>0a608fed8a469c660f8cfca9ab7d4397</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_group2</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>2d29af15fc0cbad49c426753e9d218e4</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_1, typename type_trait&lt; T_type2 &gt;::take _A_2)</arglist>
    </member>
    <member kind="variable">
      <type>value1_type</type>
      <name>value1_</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>4bd04d092cfb0c677653dd6e2a329c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value2_type</type>
      <name>value2_</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>23175ece70377eaa63bb1ec8f9f0b404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>functor_type</type>
      <name>func_</name>
      <anchorfile>structsigc_1_1lambda__group2.html</anchorfile>
      <anchor>81d504b21b2eb7821975e34e91bf702d</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_group2::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group2::deduce_result_type</name>
    <filename>structsigc_1_1lambda__group2_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>functor_type::template deduce_result_type&lt; typename value1_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type, typename value2_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__group2_1_1deduce__result__type.html</anchorfile>
      <anchor>db854254ab713425929577226513844b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group3</name>
    <filename>structsigc_1_1lambda__group3.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>functor_trait&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>fb1ec9fdf67e5c37df9f94381e662322</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type1 &gt;::lambda_type</type>
      <name>value1_type</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>9b336d0eadd9475f2e45b6aedfe2e97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type2 &gt;::lambda_type</type>
      <name>value2_type</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>f4e66634f79c2c8c1f5e64d586816234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type3 &gt;::lambda_type</type>
      <name>value3_type</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>7ea1e7fea0a9522ccacf1e2ab36fd919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::adaptor_type</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>33feec6b2637fb5bea3f7a7f7c6e2142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>34822073523b1e85bb4710a533fe67ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>e325283f9f75995841a11e51075efb4f</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>763f18d931bd8d0a78493dd898299e8f</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>a77f18c344695b739144db434b9c3e92</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>8b5e94126bb167af0825e8d51e3c7a28</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>8d4db8c27d070c8dd1493cfc3f600c38</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>17505170f95d4528a3d71902669700ec</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>11df1b28a7333cc51673bde351ecd5d5</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>3a5c887914619e3df1c73ef386b225fd</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>82cd27fb5d7bbe5c374f9fc80b1226c9</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>2055d1258c7cdde18e1ceda4acb73556</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>06bd415b871c916d31d359526784193d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>05ec15e03d6ac7ff261d45e27b08d169</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>8b6bafd237cd00896960b7516839068d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>2e55ffa824fdb222369f2d1ea34ef904</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_group3</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>10f0e874c01605f803f80e106eb49691</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_func, typename type_trait&lt; T_type1 &gt;::take _A_1, typename type_trait&lt; T_type2 &gt;::take _A_2, typename type_trait&lt; T_type3 &gt;::take _A_3)</arglist>
    </member>
    <member kind="variable">
      <type>value1_type</type>
      <name>value1_</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>a7f6344108a494d5d150398e8c883d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value2_type</type>
      <name>value2_</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>0329614243229b16bff4a0faaadfcabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value3_type</type>
      <name>value3_</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>7589f349c2cc3c0420a2501470ce566a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>functor_type</type>
      <name>func_</name>
      <anchorfile>structsigc_1_1lambda__group3.html</anchorfile>
      <anchor>e5bd70216dc26c2328c0cf08353bc06f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_group3::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_group3::deduce_result_type</name>
    <filename>structsigc_1_1lambda__group3_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>functor_type::template deduce_result_type&lt; typename value1_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type, typename value2_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type, typename value3_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__group3_1_1deduce__result__type.html</anchorfile>
      <anchor>1427b60e6aee6112523dc029da023756</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait</name>
    <filename>structsigc_1_1dereference__trait.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait.html</anchorfile>
      <anchor>62407ec2386f70620966b02f233a6645</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; T_type * &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01T__type_01_5_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01T__type_01_5_01_4.html</anchorfile>
      <anchor>88d21a7324eefab6690a7964cd5f2a3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; const T_type * &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01const_01T__type_01_5_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>const T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01const_01T__type_01_5_01_4.html</anchorfile>
      <anchor>49f4b5f3afb572233197639d7a2d51f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; T_type *&amp; &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01T__type_01_5_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01T__type_01_5_6_01_4.html</anchorfile>
      <anchor>9e0f7295ba1f2c62e3a20a3bab70a9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; const T_type *&amp; &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01const_01T__type_01_5_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>const T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01const_01T__type_01_5_6_01_4.html</anchorfile>
      <anchor>7001be89c7e16c291a19cf973ecf0a3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; T_type *const &amp; &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01T__type_01_5const_01_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01T__type_01_5const_01_6_01_4.html</anchorfile>
      <anchor>0cfd105cc41d2aa66a2f93038e5dffa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference_trait&lt; const T_type *const &amp; &gt;</name>
    <filename>structsigc_1_1dereference__trait_3_01const_01T__type_01_5const_01_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>const T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1dereference__trait_3_01const_01T__type_01_5const_01_6_01_4.html</anchorfile>
      <anchor>363f7cfb9dc3a7e702682c2788cc61ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::arithmetic</name>
    <filename>structsigc_1_1arithmetic.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::bitwise</name>
    <filename>structsigc_1_1bitwise.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::logical</name>
    <filename>structsigc_1_1logical.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::relational</name>
    <filename>structsigc_1_1relational.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::arithmetic_assign</name>
    <filename>structsigc_1_1arithmetic__assign.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::bitwise_assign</name>
    <filename>structsigc_1_1bitwise__assign.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::other</name>
    <filename>structsigc_1_1other.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::unary_arithmetic</name>
    <filename>structsigc_1_1unary__arithmetic.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::unary_bitwise</name>
    <filename>structsigc_1_1unary__bitwise.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::unary_logical</name>
    <filename>structsigc_1_1unary__logical.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::unary_other</name>
    <filename>structsigc_1_1unary__other.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::cast_</name>
    <filename>structsigc_1_1cast__.html</filename>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::plus</name>
    <filename>structsigc_1_1plus.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::minus</name>
    <filename>structsigc_1_1minus.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::multiplies</name>
    <filename>structsigc_1_1multiplies.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::divides</name>
    <filename>structsigc_1_1divides.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::modulus</name>
    <filename>structsigc_1_1modulus.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::leftshift</name>
    <filename>structsigc_1_1leftshift.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::rightshift</name>
    <filename>structsigc_1_1rightshift.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::and_</name>
    <filename>structsigc_1_1and__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::or_</name>
    <filename>structsigc_1_1or__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::xor_</name>
    <filename>structsigc_1_1xor__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::less</name>
    <filename>structsigc_1_1less.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::greater</name>
    <filename>structsigc_1_1greater.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::less_equal</name>
    <filename>structsigc_1_1less__equal.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::greater_equal</name>
    <filename>structsigc_1_1greater__equal.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::equal_to</name>
    <filename>structsigc_1_1equal__to.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::not_equal_to</name>
    <filename>structsigc_1_1not__equal__to.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::subscript</name>
    <filename>structsigc_1_1subscript.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::assign</name>
    <filename>structsigc_1_1assign.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::pre_increment</name>
    <filename>structsigc_1_1pre__increment.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::pre_decrement</name>
    <filename>structsigc_1_1pre__decrement.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::negate</name>
    <filename>structsigc_1_1negate.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::not_</name>
    <filename>structsigc_1_1not__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::address</name>
    <filename>structsigc_1_1address.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::dereference</name>
    <filename>structsigc_1_1dereference.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::reinterpret_</name>
    <filename>structsigc_1_1reinterpret__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::static_</name>
    <filename>structsigc_1_1static__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::dynamic_</name>
    <filename>structsigc_1_1dynamic__.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>type_trait&lt; T_test1 &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type.html</anchorfile>
      <anchor>8aa2ed27f8f6ed43a79ecffd261b666f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type&lt; logical&lt; T_action &gt;, T_test1, T_test2 &gt;</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type_3_01logical_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type_3_01logical_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</anchorfile>
      <anchor>75948ccc36aa7c0845cdb56d4d37acb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type&lt; relational&lt; T_action &gt;, T_test1, T_test2 &gt;</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type_3_01relational_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type_3_01relational_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</anchorfile>
      <anchor>213e6f4a692aeabe231c97b89071d190</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type&lt; arithmetic_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type_3_01arithmetic__assign_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>T_test1</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type_3_01arithmetic__assign_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</anchorfile>
      <anchor>17fa324c4ba2005e099ff513a143a8ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type&lt; bitwise_assign&lt; T_action &gt;, T_test1, T_test2 &gt;</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type_3_01bitwise__assign_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>T_test1</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type_3_01bitwise__assign_3_01T__action_01_4_00_01T__test1_00_01T__test2_01_4.html</anchorfile>
      <anchor>61c49d22c7824b24b7b2ca6fa9a845d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_deduce_result_type&lt; other&lt; subscript &gt;, T_test1, T_test2 &gt;</name>
    <filename>structsigc_1_1lambda__action__deduce__result__type_3_01other_3_01subscript_01_4_00_01T__test1_00_01T__test2_01_4.html</filename>
    <templarg>T_test1</templarg>
    <templarg>T_test2</templarg>
    <member kind="typedef">
      <type>type_trait&lt; typename dereference_trait&lt; T_test1 &gt;::type &gt;::pass</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__deduce__result__type_3_01other_3_01subscript_01_4_00_01T__test1_00_01T__test2_01_4.html</anchorfile>
      <anchor>59fbeba866d1cbe162589a131b68e80e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary_deduce_result_type</name>
    <filename>structsigc_1_1lambda__action__unary__deduce__result__type.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test</templarg>
    <member kind="typedef">
      <type>type_trait&lt; T_test &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__unary__deduce__result__type.html</anchorfile>
      <anchor>bffeae92f795009fdac7ac579d4fb076</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_convert_deduce_result_type</name>
    <filename>structsigc_1_1lambda__action__convert__deduce__result__type.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_type</templarg>
    <templarg>T_test</templarg>
    <member kind="typedef">
      <type>type_trait&lt; T_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__convert__deduce__result__type.html</anchorfile>
      <anchor>2a8c105327313c08a0ff5663d0015cec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary_deduce_result_type&lt; unary_logical&lt; T_action &gt;, T_test &gt;</name>
    <filename>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__logical_3_01T__action_01_4_00_01T__test_01_4.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_test</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__logical_3_01T__action_01_4_00_01T__test_01_4.html</anchorfile>
      <anchor>7e22603e1b4bbaa5bb0c7a51e9f429fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; address &gt;, T_test &gt;</name>
    <filename>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__other_3_01address_01_4_00_01T__test_01_4.html</filename>
    <templarg>T_test</templarg>
    <member kind="typedef">
      <type>type_trait&lt; T_test &gt;::pointer</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__other_3_01address_01_4_00_01T__test_01_4.html</anchorfile>
      <anchor>773f7dabb8f22d0d8041051f8e3d812c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary_deduce_result_type&lt; unary_other&lt; dereference &gt;, T_test &gt;</name>
    <filename>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__other_3_01dereference_01_4_00_01T__test_01_4.html</filename>
    <templarg>T_test</templarg>
    <member kind="typedef">
      <type>type_trait&lt; typename dereference_trait&lt; T_test &gt;::type &gt;::pass</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__action__unary__deduce__result__type_3_01unary__other_3_01dereference_01_4_00_01T__test_01_4.html</anchorfile>
      <anchor>9f4b6e0203e27cb34a8557ce19b64e42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action</name>
    <filename>structsigc_1_1lambda__action.html</filename>
    <templarg>T_action</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary</name>
    <filename>structsigc_1_1lambda__action__unary.html</filename>
    <templarg>T_action</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_convert</name>
    <filename>structsigc_1_1lambda__action__convert.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_type</templarg>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic&lt; plus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic_3_01plus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic&lt; plus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic_3_01plus_01_4_01_4.html</anchorfile>
      <anchor>0b71d1f7c330871354c9796f57246fb1</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic&lt; minus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic_3_01minus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic&lt; minus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic_3_01minus_01_4_01_4.html</anchorfile>
      <anchor>b72aefd892d21ed9604580c62aba1650</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic&lt; multiplies &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic_3_01multiplies_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic&lt; multiplies &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic_3_01multiplies_01_4_01_4.html</anchorfile>
      <anchor>4673e38e48d7211adc5d975e9c2655ff</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic&lt; divides &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic_3_01divides_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic&lt; divides &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic_3_01divides_01_4_01_4.html</anchorfile>
      <anchor>e9ec154fe4cc98defe29618b17368977</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic&lt; modulus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic_3_01modulus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic&lt; modulus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic_3_01modulus_01_4_01_4.html</anchorfile>
      <anchor>e28deb15f71b3ff7fb3794015e629076</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise&lt; leftshift &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise_3_01leftshift_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise&lt; leftshift &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise_3_01leftshift_01_4_01_4.html</anchorfile>
      <anchor>e0bd6e4b8820cbd05f6d771e32a13ed6</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise&lt; rightshift &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise_3_01rightshift_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise&lt; rightshift &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise_3_01rightshift_01_4_01_4.html</anchorfile>
      <anchor>ba6cdb36719da4ebe8fc6e6970f0cea8</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise&lt; and_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise_3_01and___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise&lt; and_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise_3_01and___01_4_01_4.html</anchorfile>
      <anchor>0cc6a60471bd021c51ff01efc5f4e19e</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise&lt; or_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise_3_01or___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise&lt; or_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise_3_01or___01_4_01_4.html</anchorfile>
      <anchor>f57a5f613e120f26882c34a297f77c55</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise&lt; xor_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise_3_01xor___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise&lt; xor_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise_3_01xor___01_4_01_4.html</anchorfile>
      <anchor>2fded4e138227a6c60ee53a612255f6d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; logical&lt; and_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01logical_3_01and___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; logical&lt; and_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01logical_3_01and___01_4_01_4.html</anchorfile>
      <anchor>f3d04a3bafd4005e23a473067bb7eacb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; logical&lt; or_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01logical_3_01or___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; logical&lt; or_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01logical_3_01or___01_4_01_4.html</anchorfile>
      <anchor>a1bd8071df57bf254dfec3028ffe5691</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; less &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01less_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; less &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01less_01_4_01_4.html</anchorfile>
      <anchor>7a4c908df7f637b1eb745986a167958b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; greater &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01greater_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; greater &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01greater_01_4_01_4.html</anchorfile>
      <anchor>2a6b7963729f1450d982fbdfdc2ffbbb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; less_equal &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01less__equal_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; less_equal &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01less__equal_01_4_01_4.html</anchorfile>
      <anchor>fdd5d513381db313792e9d234ba96325</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; greater_equal &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01greater__equal_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; greater_equal &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01greater__equal_01_4_01_4.html</anchorfile>
      <anchor>5e6515c302db2bf8ce178f7fc9f3525c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; equal_to &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01equal__to_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; equal_to &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01equal__to_01_4_01_4.html</anchorfile>
      <anchor>774dd01ed8e67f68f33b40f69ce52c2f</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; relational&lt; not_equal_to &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01relational_3_01not__equal__to_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; relational&lt; not_equal_to &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01relational_3_01not__equal__to_01_4_01_4.html</anchorfile>
      <anchor>20c3f8bee83bd6085e6bb6eb15c2dd6b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic_assign&lt; plus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01plus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic_assign&lt; plus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01plus_01_4_01_4.html</anchorfile>
      <anchor>e280c1ea84e8d961746174580532bb03</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic_assign&lt; minus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01minus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic_assign&lt; minus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01minus_01_4_01_4.html</anchorfile>
      <anchor>eae14e8134d4aa4ba1beb209279eb891</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic_assign&lt; multiplies &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01multiplies_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic_assign&lt; multiplies &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01multiplies_01_4_01_4.html</anchorfile>
      <anchor>33b03baf93e0d4ad5277713381644d63</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic_assign&lt; divides &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01divides_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic_assign&lt; divides &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01divides_01_4_01_4.html</anchorfile>
      <anchor>a26fe0dca057f81531247cd4dd3f0275</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; arithmetic_assign&lt; modulus &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01modulus_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; arithmetic_assign&lt; modulus &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01arithmetic__assign_3_01modulus_01_4_01_4.html</anchorfile>
      <anchor>9594cac835594a1c3c26e76214b9e7d9</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise_assign&lt; leftshift &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise__assign_3_01leftshift_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise_assign&lt; leftshift &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise__assign_3_01leftshift_01_4_01_4.html</anchorfile>
      <anchor>44d486202f7cfe896ed8814e8f2a264b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise_assign&lt; rightshift &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise__assign_3_01rightshift_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise_assign&lt; rightshift &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise__assign_3_01rightshift_01_4_01_4.html</anchorfile>
      <anchor>036dd36f47f4e2744a71f0cafbc4b922</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise_assign&lt; and_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise__assign_3_01and___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise_assign&lt; and_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise__assign_3_01and___01_4_01_4.html</anchorfile>
      <anchor>cd35a820de16ec90c701f0e83f71ce20</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise_assign&lt; or_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise__assign_3_01or___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise_assign&lt; or_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise__assign_3_01or___01_4_01_4.html</anchorfile>
      <anchor>ff39788e24fccd833f72f98924e26adb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; bitwise_assign&lt; xor_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01bitwise__assign_3_01xor___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; bitwise_assign&lt; xor_ &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01bitwise__assign_3_01xor___01_4_01_4.html</anchorfile>
      <anchor>fe1c6641b20c36558b39fcba2bcea342</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; other&lt; subscript &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01other_3_01subscript_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; other&lt; subscript &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01other_3_01subscript_01_4_01_4.html</anchorfile>
      <anchor>6e38c69c9ab0a9da93f3cbf640c1fdeb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action&lt; other&lt; assign &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action_3_01other_3_01assign_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_deduce_result_type&lt; other&lt; assign &gt;, T_arg1, T_arg2 &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action_3_01other_3_01assign_01_4_01_4.html</anchorfile>
      <anchor>9313b30cdd634c92523b462e672f5844</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_increment &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01pre__increment_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_arithmetic&lt; pre_increment &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01pre__increment_01_4_01_4.html</anchorfile>
      <anchor>5f89dc716105768fd53c9fd4911c7d47</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_arithmetic&lt; pre_decrement &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01pre__decrement_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_arithmetic&lt; pre_decrement &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01pre__decrement_01_4_01_4.html</anchorfile>
      <anchor>fd8a54ee2a6d8b24df39db79dd70839b</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_arithmetic&lt; negate &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01negate_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_arithmetic&lt; negate &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__arithmetic_3_01negate_01_4_01_4.html</anchorfile>
      <anchor>d5c4939951a01c7728b2487daed25995</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_bitwise&lt; not_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__bitwise_3_01not___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_bitwise&lt; not_ &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__bitwise_3_01not___01_4_01_4.html</anchorfile>
      <anchor>8aa0dfcb543606aaf31e3db1446792c6</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_logical&lt; not_ &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__logical_3_01not___01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_logical&lt; not_ &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__logical_3_01not___01_4_01_4.html</anchorfile>
      <anchor>62bfddd5c91b9dd93007cbf55d47a395</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_other&lt; address &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__other_3_01address_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_other&lt; address &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__other_3_01address_01_4_01_4.html</anchorfile>
      <anchor>00b4b51e71ba216318d011dff1b9363b</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_unary&lt; unary_other&lt; dereference &gt; &gt;</name>
    <filename>structsigc_1_1lambda__action__unary_3_01unary__other_3_01dereference_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static lambda_action_unary_deduce_result_type&lt; unary_other&lt; dereference &gt;, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__unary_3_01unary__other_3_01dereference_01_4_01_4.html</anchorfile>
      <anchor>0f603c258ab8bb72291058ebb2080d7c</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_convert&lt; cast_&lt; reinterpret_ &gt;, T_type &gt;</name>
    <filename>structsigc_1_1lambda__action__convert_3_01cast___3_01reinterpret___01_4_00_01T__type_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function" static="yes">
      <type>static lambda_action_convert_deduce_result_type&lt; cast_&lt; reinterpret_ &gt;, T_type, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__convert_3_01cast___3_01reinterpret___01_4_00_01T__type_01_4.html</anchorfile>
      <anchor>b393eeb3d312d7b09c8f01dff18d3e6e</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_convert&lt; cast_&lt; static_ &gt;, T_type &gt;</name>
    <filename>structsigc_1_1lambda__action__convert_3_01cast___3_01static___01_4_00_01T__type_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function" static="yes">
      <type>static lambda_action_convert_deduce_result_type&lt; cast_&lt; static_ &gt;, T_type, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__convert_3_01cast___3_01static___01_4_00_01T__type_01_4.html</anchorfile>
      <anchor>ff86b39e354b5dc1deb5587a4e7f33c7</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_action_convert&lt; cast_&lt; dynamic_ &gt;, T_type &gt;</name>
    <filename>structsigc_1_1lambda__action__convert_3_01cast___3_01dynamic___01_4_00_01T__type_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function" static="yes">
      <type>static lambda_action_convert_deduce_result_type&lt; cast_&lt; dynamic_ &gt;, T_type, T_arg &gt;::type</type>
      <name>do_action</name>
      <anchorfile>structsigc_1_1lambda__action__convert_3_01cast___3_01dynamic___01_4_00_01T__type_01_4.html</anchorfile>
      <anchor>ab5bbf769c22482d532ffecbaebedbcb</anchor>
      <arglist>(T_arg _Aa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator</name>
    <filename>structsigc_1_1lambda__operator.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>lambda&lt; T_type1 &gt;::lambda_type</type>
      <name>arg1_type</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>d46d2060c2f1e8b12ca109f4dc4a615b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type2 &gt;::lambda_type</type>
      <name>arg2_type</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>7db88927ecfd4f322d9c38a9f0b5d311</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_deduce_result_type&lt; T_action, typename arg1_type::result_type, typename arg2_type::result_type &gt;::type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>5a0ada253c336c40b5b9317cb80d7072</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>6d5c0ace7ac98b6cb01a7fd9a3ded4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>0898e22c08432aba053e356f69209f59</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>e26ee9c9dcb46305c9e17b6b08fce2a0</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>c6b6b70eb6767249135dbe50bf2a589a</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>abd590c0eec6462a397afdf53e604b01</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>02bafd9ae43d1a3fdc21a2299f341189</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>a53f9e14d6ec62011ae2634669f15cd1</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>c118dc1884a42ab52612e3e8cc1ade60</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>6c61376ce338af1af7f07444df663781</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>bae12edb5b88b39366af68038d9ded71</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>32828c9c030f0c705d3f8e94257abd6d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>ce46a8f3677ba0ec3b674c422201c78f</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>2258592489be716d7d715098414ba35c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>1f9506f9523da41fd590155aa2842512</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>5caf81763b33ad124582b53c329ca91b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_operator</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>e36f421d53648d423ec6ce9ef7d5e427</anchor>
      <arglist>(typename type_trait&lt; T_type1 &gt;::take a1, typename type_trait&lt; T_type2 &gt;::take a2)</arglist>
    </member>
    <member kind="variable">
      <type>arg1_type</type>
      <name>arg1_</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>2b61cb3d4b1a09c06a8f172b951dce3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>arg2_type</type>
      <name>arg2_</name>
      <anchorfile>structsigc_1_1lambda__operator.html</anchorfile>
      <anchor>bbafad2e673c088294f4430a95218e46</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_operator::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator::deduce_result_type</name>
    <filename>structsigc_1_1lambda__operator_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>arg1_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>left_type</name>
      <anchorfile>structsigc_1_1lambda__operator_1_1deduce__result__type.html</anchorfile>
      <anchor>38dd99903cc14580c61168313402a8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg2_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>right_type</name>
      <anchorfile>structsigc_1_1lambda__operator_1_1deduce__result__type.html</anchorfile>
      <anchor>51ba144db876e1f5d635d22b2112936b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_deduce_result_type&lt; T_action, left_type, right_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__operator_1_1deduce__result__type.html</anchorfile>
      <anchor>48cb4782f01c72b9d9bf52184613cd7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator_unary</name>
    <filename>structsigc_1_1lambda__operator__unary.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_type</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>lambda&lt; T_type &gt;::lambda_type</type>
      <name>arg_type</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>b9c611abb91201d191a2b6de2a1996a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_unary_deduce_result_type&lt; T_action, typename arg_type::result_type &gt;::type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>82932e3a97aed1813c39f25e84520fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>2aace9e0469f99eb24e4cbaebeb63c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>153960f61643dcbdfa1a8133b111632a</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>d7d9c3ae2f0eac9b6fe4dde2e2d8f670</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>c603f73637319839e31d5c9f5e56811c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>937a4587a7f86fe821fa0873e4c373ef</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>5d5767c55073879574f4e96a549806ac</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>8a7434ed1dc2dab3d27b2ae023224678</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>f698ee3574d8208d763d4c9ccdc43241</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>5c0949f4c9750d4594dc5d778ecd1408</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>20d6e96a0bcce52ee86d6c1899bf5cf0</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>c2d41ab62f1542462e5eb08eb3ded4ef</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>802e0ea58bdc162c129dcd9d17415efd</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>0944a1b949fe60aece5c94d9e9117993</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>588266af5d2c38a048564cf0aca561a2</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>73b458d7a1ac69b1afb53cf65ed5e9d4</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_operator_unary</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>cedeaa7ae49abb1d461f9a7c4a3247bb</anchor>
      <arglist>(typename type_trait&lt; T_type &gt;::take a)</arglist>
    </member>
    <member kind="variable">
      <type>arg_type</type>
      <name>arg_</name>
      <anchorfile>structsigc_1_1lambda__operator__unary.html</anchorfile>
      <anchor>32ca360fb5fe2fc447f6f08a3a5f19f3</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_operator_unary::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator_unary::deduce_result_type</name>
    <filename>structsigc_1_1lambda__operator__unary_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>arg_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>operand_type</name>
      <anchorfile>structsigc_1_1lambda__operator__unary_1_1deduce__result__type.html</anchorfile>
      <anchor>14a19402c269b0ef2db926aea56d6bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_unary_deduce_result_type&lt; T_action, operand_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__operator__unary_1_1deduce__result__type.html</anchorfile>
      <anchor>39fcbe7918ef07dff7fbb9f2e73d7bff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator_convert</name>
    <filename>structsigc_1_1lambda__operator__convert.html</filename>
    <templarg>T_action</templarg>
    <templarg>T_type</templarg>
    <templarg>T_arg</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>lambda&lt; T_arg &gt;::lambda_type</type>
      <name>arg_type</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>4ea754eecff378067a01f054c031fecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_convert_deduce_result_type&lt; T_action, T_type, typename arg_type::result_type &gt;::type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>942702dba3a14b11f7702a34770ebfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>87511f047b5745f7f5c7a90519f81c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>39b553eb5ac36947e0a07462918d9707</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>30f5115afe702e79874b00f6d85a54c4</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>bd393339776536501fed0b2bc7d2265b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>1b5c5ef2828afaac5b4ad7b85f9cb24b</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>dd7f1d1f0aff1fa05f4927b7fb74d9cd</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>7d1da4656e38aa7af59b4860bc75a8c8</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>5b262c5f6cb34124090f0cfdfef1bcb3</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>1b8a9dc099f2fe6fc9b74eed26f7e3dd</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>8f32eb1d068b53b52d2e7fc525514170</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>97eaac6e5fd9f4a0a9b0492630a32a3c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>21e0cd72e52117b7efb0ed268d7dcfbf</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>9905c438eac687f4e24ed5e1b32df4d5</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>a7457ef7ac24b9ed37faafc283e8bd18</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>deec5f0287eb7a6c8e848a24299ba91a</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_operator_convert</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>5f7ca3b0076d175856e82e287cf6ec70</anchor>
      <arglist>(typename type_trait&lt; T_arg &gt;::take a)</arglist>
    </member>
    <member kind="variable">
      <type>arg_type</type>
      <name>arg_</name>
      <anchorfile>structsigc_1_1lambda__operator__convert.html</anchorfile>
      <anchor>bd06cd2eaa229f01bc4facf16277da1a</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::lambda_operator_convert::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::lambda_operator_convert::deduce_result_type</name>
    <filename>structsigc_1_1lambda__operator__convert_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>arg_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>operand_type</name>
      <anchorfile>structsigc_1_1lambda__operator__convert_1_1deduce__result__type.html</anchorfile>
      <anchor>141bce203de22fb2b159b88b576417de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda_action_convert_deduce_result_type&lt; T_action, T_type, operand_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1lambda__operator__convert_1_1deduce__result__type.html</anchorfile>
      <anchor>24c4c85eac31f79a3c176e7bba41d417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_functor</name>
    <filename>structsigc_1_1retype__functor.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_type1</templarg>
    <templarg>T_type2</templarg>
    <templarg>T_type3</templarg>
    <templarg>T_type4</templarg>
    <templarg>T_type5</templarg>
    <templarg>T_type6</templarg>
    <templarg>T_type7</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>ce4a0fc864a6417a7cb36adf011177e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adapts&lt; T_functor &gt;::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>1a594553d0312ca12e1009d179af0dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>841d7fd2ae795ca4decccca8342e231c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>0015c24c480eb1bd46ecaf03b1ea7302</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>2a692320a315c694ed7269081c7efac3</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>2a41a6dc38fbf4f8662d87353986f89d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>a972cca253129ff49d83cc5dc2ff0304</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>7c36ca335dfd6257725e9bc7600d30fd</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>e3e0f159706a24f970c32848a49c2899</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>dda9de2fc65e416ec195bd691e4aa5a3</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>7d3a6784b331a269e79319fe8e7d5da5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>0130adfe95439f8b6201193508d1125c</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>f2918934decd262d41b960772df1523b</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>76b08d7bb56d3b023d579d38422e31f2</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>3f320406b0cd9a598a01a76afd7aa16d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>ba203f623f0ff30a945a514589451f13</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>5a7bd07cd11448a8e44177937ee53433</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_functor</name>
      <anchorfile>structsigc_1_1retype__functor.html</anchorfile>
      <anchor>4dda9669c6c476d8825b5477159f4edb</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_functor)</arglist>
    </member>
    <class kind="struct">sigc::retype_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_functor::deduce_result_type</name>
    <filename>structsigc_1_1retype__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>adaptor_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1retype__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>aafd9bfa02f789ee5146414b084aa8d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_return_functor</name>
    <filename>structsigc_1_1retype__return__functor.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>a8421dc266ad653de395e7d01e631fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>4cf9725b7ac4fdfeded4ab3f56d61a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>e86428625e0cd6fb0109b2156b45b061</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>44175ba37e398b1f2ca90d46bf6341d5</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>a0f588a0fdf058981f40e853712c15ed</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>048a50ae4db43a37bfef602f6baaefad</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>47f37ee1b7c2de2b38a04cd4fcb5b128</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>2ea7f6b5c312801eebcaf77189efd5b4</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>40d89c0555518d06a4961a324472350c</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>48d3d97bdf3dfe7d365a0af9e3ee3eeb</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>4df80db59496f726f261d7251c6edbc9</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>120066f72cb7cdeff818529014878f40</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>c77f166a7f934ffd04f711a6fb517fe5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>4ae1be743cc6d9b3637b7fa12645cc9f</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>18d2189d0941786d6676c2ecda34d708</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>5d8275d1f1524fb2ea9a59777072501b</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_return_functor</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>a9546db86a6d1cfa7224a3a0cbad4827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_return_functor</name>
      <anchorfile>structsigc_1_1retype__return__functor.html</anchorfile>
      <anchor>1fca6f2ee601bdf6771e14bba21faa46</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_functor)</arglist>
    </member>
    <class kind="struct">sigc::retype_return_functor::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_return_functor::deduce_result_type</name>
    <filename>structsigc_1_1retype__return__functor_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>type</name>
      <anchorfile>structsigc_1_1retype__return__functor_1_1deduce__result__type.html</anchorfile>
      <anchor>8e943e2e5f0b8ceaac35b6ff4f6b0dc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_return_functor&lt; void, T_functor &gt;</name>
    <filename>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::adapts</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>64bccc59fc20fdf0fd80281597d350b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>f181f5a8134c5a834e2ad0ed7590fbfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>ea28e3e879e59dc295c1714bbdcde366</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>db9eb309a80a63992d71d83a8bf23580</anchor>
      <arglist>(T_arg1 _A_a1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>70331a9f164eb59e647b7cae75fe32d6</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>c060d6c3d7638869097a0bb7ae7c6a58</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>1e7df1d36a021786abbd622f77fbad2d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>8e47e2b7ba2872ec325621bacdb4ebd7</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>765162a76fbdaa18ebe843181d0a930d</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>e7e6d13bbfccd9bc8e6b854816e50ae6</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>ed5d341dd4956834b8150819fc22ff0b</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>a256d1fc63c05c642d0b18817c4964ed</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>079927f2193cb7898aba04635dfa17c6</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>a114563aaaa7656655f3fdb64a130dbf</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>c05ba5a340836233a8245c30b3897ae5</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>7345371ed61c95a821afb3a673b71da1</anchor>
      <arglist>(T_arg1 _A_a1, T_arg2 _A_a2, T_arg3 _A_a3, T_arg4 _A_a4, T_arg5 _A_a5, T_arg6 _A_a6, T_arg7 _A_a7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_return_functor</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>720e802de29a72d1e15626b1719844bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>retype_return_functor</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4.html</anchorfile>
      <anchor>8a9768f5c40e609f9bd06d30e3111735</anchor>
      <arglist>(typename type_trait&lt; T_functor &gt;::take _A_functor)</arglist>
    </member>
    <class kind="struct">sigc::retype_return_functor&lt; void, T_functor &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::retype_return_functor&lt; void, T_functor &gt;::deduce_result_type</name>
    <filename>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structsigc_1_1retype__return__functor_3_01void_00_01T__functor_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>bbe77e6617499ddd9fe5ab864d0de102</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::connection</name>
    <filename>structsigc_1_1connection.html</filename>
    <member kind="function">
      <type></type>
      <name>connection</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>9b74451c9a6a53bcc704a879f088cc7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>connection</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>d13d5e3331cc9b1494e0edb8fa37fdba</anchor>
      <arglist>(const connection &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>connection</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>2c59699f1f6aefa74a387d62a9a85e68</anchor>
      <arglist>(const slot_iterator&lt; T_slot &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>connection</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>124709de26781e5ffcf8bbb5dcd621ed</anchor>
      <arglist>(slot_base &amp;sl)</arglist>
    </member>
    <member kind="function">
      <type>connection &amp;</type>
      <name>operator=</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>016094b53bafdc9ce593febb68cb00a5</anchor>
      <arglist>(const connection &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>connection &amp;</type>
      <name>operator=</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>4ac3b12c4c55463166189db98701999d</anchor>
      <arglist>(const slot_iterator&lt; T_slot &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~connection</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>99678ccb2be5c20719f37e469416578a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>95ddcc6d1009adda4f2cc19cf246d2c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>86fcc7064a64aa15528d454b7f078225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blocked</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>2c8ce2977a9e681d06c594ad90b41098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>block</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>6b09ee3010464b22abb3269935afcc49</anchor>
      <arglist>(bool should_block=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unblock</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>ef87f355a73d50e8e54228a6fcbd1c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>0452bd182a61650d14a9664d6297ed1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>67441b54b559cb1f84df9293dc0f5787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>notify</name>
      <anchorfile>structsigc_1_1connection.html</anchorfile>
      <anchor>d45fe90d68fe295e76e130b070e97070</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_base</name>
    <filename>structsigc_1_1functor__base.html</filename>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait</name>
    <filename>structsigc_1_1functor__trait.html</filename>
    <templarg>T_functor</templarg>
    <templarg>I_derives_functor_base</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait.html</anchorfile>
      <anchor>90c4188e1d98bdf394d77a3b1b1c065f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_functor</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait.html</anchorfile>
      <anchor>aa889e97aa5a7a6af00f500df7d143e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_functor, true &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__functor_00_01true_01_4.html</filename>
    <templarg>T_functor</templarg>
    <member kind="typedef">
      <type>T_functor::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__functor_00_01true_01_4.html</anchorfile>
      <anchor>9fbb6b70467add7699582315f75ac3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_functor</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__functor_00_01true_01_4.html</anchorfile>
      <anchor>3b7b7cff8b5dff23c0b16532e843d298</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)()_00_01false_01_4.html</filename>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)()_00_01false_01_4.html</anchorfile>
      <anchor>102c1c7fa5a6ca42343ce36c630e95a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor0&lt; T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)()_00_01false_01_4.html</anchorfile>
      <anchor>5bbf7f5011bf0c166d0b1071126a25cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1)_00_01false_01_4.html</anchorfile>
      <anchor>39e05296ec07f3cfdd174271abde4a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor1&lt; T_arg1, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1)_00_01false_01_4.html</anchorfile>
      <anchor>21dbbb685036b74ea4c8083fdd87af25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</anchorfile>
      <anchor>3099d0ad79057332406d5d74cfa7d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor2&lt; T_arg1, T_arg2, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</anchorfile>
      <anchor>3f993216d2f4ce73cb29c95efc36c43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</anchorfile>
      <anchor>f0a8b50e5108221aec133c33d7cb6df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor3&lt; T_arg1, T_arg2, T_arg3, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</anchorfile>
      <anchor>f8e346e2bf6c1177558b772d76361f93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</anchorfile>
      <anchor>cab7cd313c16236bb7fa4f434c56b32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</anchorfile>
      <anchor>06e6fb273ae98566885f9e4fcf31454c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5)_00_01false_01_4.html</anchorfile>
      <anchor>6920fcca30148455b81fa0d3146b80a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5)_00_01false_01_4.html</anchorfile>
      <anchor>2188188900f8e54a60bccd60cb7825fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00f8faa1edfe8c00c4734ad6529136c5af.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00f8faa1edfe8c00c4734ad6529136c5af.html</anchorfile>
      <anchor>2ffcfe2391e488dc74a71714527d4b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00f8faa1edfe8c00c4734ad6529136c5af.html</anchorfile>
      <anchor>2cc61198af621c6b6bfb836b99b22e27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_004f9c9d87122253a1819d1e9beb5459d7.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_004f9c9d87122253a1819d1e9beb5459d7.html</anchorfile>
      <anchor>40a38b139630ef6e131942e48597fa30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_004f9c9d87122253a1819d1e9beb5459d7.html</anchorfile>
      <anchor>ed74ca1661e36c2b8e4d2b48fddefc49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor0</name>
    <filename>classsigc_1_1mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>fc2e4c3f2b5fd80ce810902ac8f30fa7</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>a679f73c7b786540686c110628a71dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor0</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>d598cd301fc54f3aa4da2b9e3c16bc81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor0</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>5655f48c6f36716dc15daf584f20d51c</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>3d083ed9bc066718a9d6970be5a07b6e</anchor>
      <arglist>(T_obj *_A_obj) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>5b9327e3a0f2f7df91394614f704ddc6</anchor>
      <arglist>(T_obj &amp;_A_obj) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor0.html</anchorfile>
      <anchor>1f7b51d412900f55e155ecdd848fa283</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor1</name>
    <filename>classsigc_1_1mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>3e557dead320f2bff90655a004fe177f</anchor>
      <arglist>)(T_arg1)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>7c7ab28530e2f678eae87772253df709</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor1</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>b97c2206275025d8d1e7665c12322eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor1</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>63230b348e410f7d2f245df1f2af019a</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>72c4e7ffd730381bbb842f3b72816d02</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>3555bf838d0d60d24271d0354d925b40</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor1.html</anchorfile>
      <anchor>f5981be86ea36d59e86234ef5cd2b5a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor2</name>
    <filename>classsigc_1_1mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>00e28e0e50b634475e1479381d006201</anchor>
      <arglist>)(T_arg1, T_arg2)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>9080e942d35d226ea6f9dda097342f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor2</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>691e21d47b7a54b67605812f7e089299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor2</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>eee1c7f263f8d7e7b6fa9be0156878fe</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>1ef9d5e58e8333fc9a812d2f9a9a99fb</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>d3d48579339ab1563404e45cc667b2c8</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor2.html</anchorfile>
      <anchor>a4b00e1d6bb65c1c1791d314b5dcb4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor3</name>
    <filename>classsigc_1_1mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>192ff7358a210e2eefbadbfbaf14f057</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>f620103fa36aa86fb539843f7f730e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor3</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>bc94be96c346537bca09c73a342f5ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor3</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>f22e274e905262144832ca9683d8823f</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>83ad80686392272239adf599a9772ada</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>d6b7b1bf6cb43fdf76a14d3b37d71512</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor3.html</anchorfile>
      <anchor>c7ed881bf6b6ef8c7ed418ad3bfc0ccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor4</name>
    <filename>classsigc_1_1mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>5771b1d8d740548dff9270d6d5a317e3</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>79bf0a3c25dbe6eb07829ee55ce5d664</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor4</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>9774f0ab47d023f5bccdb9960c4fcdee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor4</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>4f7841b2ccd26fac6c21bf04fc524e08</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>41e65c47fc45c8017fe87117614e6e22</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>dc51ab9e3b9b0defaa0a9c8a402feb32</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor4.html</anchorfile>
      <anchor>28282d9285ca1a2075fd8041905a6302</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor5</name>
    <filename>classsigc_1_1mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>24ce0a25d04bbe4671093678e345f6cb</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>3e0587ce338328d42f44c4e5f79be6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor5</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>9048a4a2216e20f9f34380020f5b67ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor5</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>01bdff47bf4aed8c52fdfd5520fdf3cf</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>d6ca177de8fcdb0655da5f9abfa3c845</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>0710e739b8e13ab1fadf021dbdb9d22a</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor5.html</anchorfile>
      <anchor>73a58b713dccc6a48b0083063b0df719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor6</name>
    <filename>classsigc_1_1mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>8a48c8407249cc027d3ae82c8a776e62</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>f80425ff57ca2115cba771c275f49e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor6</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>aa43195f4b4e39c76c10478539d35172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor6</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>abc6bb723e0831e27a0a9131525d96bc</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>c1e352f15b9f7e77c160ed6b10870c98</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>6a2b7cfd0e5de9146afd9dc41a38a736</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor6.html</anchorfile>
      <anchor>f07a44f7435cf15228903b0868fac956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::mem_functor7</name>
    <filename>classsigc_1_1mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>3052c03304d3000c861d21101fbaaa51</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7)</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>967b5f6572e988ea0833818b993745f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor7</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>fbb9b8ecaa25e0dd85c0f3d539f198b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mem_functor7</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>79de1ccebb568e82b7f7a67ab85e4dc6</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>55ab258901e1425af849f0562dde8a63</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>4d8c3256803ff3bbb5b81a6738793740</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1mem__functor7.html</anchorfile>
      <anchor>779c41d697c3b80d08a06cbcc9a5ea25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor0</name>
    <filename>classsigc_1_1const__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>eefd8087157f292002b331756b187baa</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>553cd4d85524b5deea445b67773527bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor0</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>49bba4c8045b8b6933b8f5a854ac98d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor0</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>27895e58972642453f7b853f25a66f42</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>261a8a2fc4fca25717ee0d50a0a718c2</anchor>
      <arglist>(const T_obj *_A_obj) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>b282ef8746fa5de89ddbb91907d0e131</anchor>
      <arglist>(const T_obj &amp;_A_obj) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor0.html</anchorfile>
      <anchor>215359b20450c2afe93496826ac45c1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor1</name>
    <filename>classsigc_1_1const__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>137c5a5f4bfbaf4e7034d87ff6854542</anchor>
      <arglist>)(T_arg1) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>8ba6a6565b8a29812e266aa4e5261a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor1</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>2c171737e0c7dc6ae00f73f1580a976d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor1</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>ba30421222bd496f9dec9b733fe70447</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>4acc3a59eee797f199988ff5f80d53ae</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>6dc04061c2a3cf3412d0b1e5f38f5bd5</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor1.html</anchorfile>
      <anchor>f791174008d5b58aa0f4fb42a531cc4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor2</name>
    <filename>classsigc_1_1const__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>4c2bb98ed93c164db29504c4d7570361</anchor>
      <arglist>)(T_arg1, T_arg2) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>5eaa5f2ab10ad755c89ff5b09c1e281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor2</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>6265bdc51f35d8d5274bfeb8cdafc1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor2</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>b281b110d1fbba86e2d58f9607d0f0c3</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>9da6633c6aa91f86ce986967566747b6</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>6441206062146d43a0e72be48519ae02</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor2.html</anchorfile>
      <anchor>4445ff55323e94d525c1b2574ee32ddc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor3</name>
    <filename>classsigc_1_1const__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>40890579cba25235f8d0fa5847531e8e</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>e67fd219e64f81359640873d30123c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor3</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>9921cf28137404e029e3f5d7c291021d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor3</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>e70cb6e5e322ef3f3a9673b1e541d2c1</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>d8def027881b5a6047b9839177dbe85c</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>50e037ab8e8c28d7ef0776b7f0b3801e</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor3.html</anchorfile>
      <anchor>d86eb326f14c401748d0a118265e558d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor4</name>
    <filename>classsigc_1_1const__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>e278eb245e79c78ddc7c63a58a76751c</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>78069750e64446199d91c0682b0915cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor4</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>cdde68d1638c13cd29157d1cb1bd42d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor4</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>7e09703c6320542cb5f0075d371908a8</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>60f0358e32bbf1b96c086d53d87ec2c7</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>736addff58f97101f7a15a57a6ce267a</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor4.html</anchorfile>
      <anchor>c0feeedacde97bd166141c285fa2c74c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor5</name>
    <filename>classsigc_1_1const__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>0f837bd153b0f9d8ead59784b34958ed</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>9d952d52dade789bc38953c4c83fb425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor5</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>818da40f7c82d6a1fde3009d32bf3920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor5</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>47769ef46d8ff779df8c152acdc0d74c</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>248914dce1045bca14ba45f7b8ab7a9f</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>a05d496807afeb8f80e62e9c897a39e8</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor5.html</anchorfile>
      <anchor>eb6e66e0304e5c039d97264a3dd7d6e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor6</name>
    <filename>classsigc_1_1const__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>aba986ff89c63a17e91272344a8ff45e</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>df81aebfa633d0bf14a0d3f5e9688561</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor6</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>7a5e8a3a981a615a545aab358efa9472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor6</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>0803b89f79b60c16d87c0372be261211</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>73952a23160711fcea38e66e74652523</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>909e792716f9132a6fed7092c73fa72e</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor6.html</anchorfile>
      <anchor>665c77c3da00d474d6d999c394801a98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_mem_functor7</name>
    <filename>classsigc_1_1const__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>0b1b42d84dc3569b68122edd3c9b9032</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>724b8b210493e0d3cf06b5a393b91546</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor7</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>dd4d7f74905c6bc20afc6f7681f367c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_mem_functor7</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>0538bba01694fc13456fcee0e96d8f34</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>c2d477bff6a8c4347058560efef01f4d</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>68d5953cafed702d7d3b4543fd381189</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__mem__functor7.html</anchorfile>
      <anchor>255588607e165db8bd25c3bb8d7e1fbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor0</name>
    <filename>classsigc_1_1volatile__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>2600028801809d687cd7e4aa1a01b80d</anchor>
      <arglist>)() volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>41fbd67d6bbde0818b880f08f6295396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>e29bbe3e668b370d2788631465daa63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>a4e5e279480d50940eb4b73b9c61b938</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>c2ed0440b58d9ed7fa7113036a021e92</anchor>
      <arglist>(T_obj *_A_obj) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>7c2d0b553da010a5a0578a91269a290e</anchor>
      <arglist>(T_obj &amp;_A_obj) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor0.html</anchorfile>
      <anchor>874e91ca403b95bb085ed596257de3ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor1</name>
    <filename>classsigc_1_1volatile__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>f090d37156c82d4f1c45490e1f95c7fd</anchor>
      <arglist>)(T_arg1) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>3bcbf6ae6e950d35e4ac7b33fa066877</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>30ec3be683a2c466b23da53c8025608b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>86d592aee0ca1d853b64b52224054029</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>93ca215c5cbfc6e9bef44e38f3635fe9</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>b229ce1bb3609e465e809eb5dfc47428</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor1.html</anchorfile>
      <anchor>d07b2821f95c27c013af4fdce527c1cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor2</name>
    <filename>classsigc_1_1volatile__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>3f8ba2d3836deb474fc88d39a660cbf5</anchor>
      <arglist>)(T_arg1, T_arg2) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>67719071ed0eacd994fa6fe300cfb24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>273bbe27bc7b190d8457408cd328c1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>cba5e052ebb8884ff02cab194a2f794e</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>10aa8d2d17a83d18d0470986ffe7591e</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>e8c368143fecb49457733234a34f5aae</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor2.html</anchorfile>
      <anchor>afe942fe06b2687338ea82b058412d07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor3</name>
    <filename>classsigc_1_1volatile__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>e075aa9f4ce6ac1b2928fecfa51e8f4e</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>229fe43026e97bbcf80215ea8e9fa828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>d2319eebf06194ff516c27f581cbd7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>2364e6ab68a8128ba9e9973c66c0ce1d</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>68c2811c3b5b69a92e7c3eda6ddf9ba2</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>f88d0cde1beb833e0e391052cf75098f</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor3.html</anchorfile>
      <anchor>cf6a8aebcf4de461e03e9b994a807362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor4</name>
    <filename>classsigc_1_1volatile__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>254dd6424bd621026dcf221f0fca8e4a</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>58dd95fa47c02a9ba6340682c7dbbcb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>5ba462855081b617085e59e7566927a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>b86348ff91ed7ce4cadff97c157e4024</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>ce330ea014ed3e2b91eebcc8bf6a4beb</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>ecefbb7c869d5f66c1b6d679ed49c082</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor4.html</anchorfile>
      <anchor>176ab2202482276e79e6d71ff839c31d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor5</name>
    <filename>classsigc_1_1volatile__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>d65381d976e6cfae8fd13734f593b863</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>b647ea2e44db475cc2d4bae8be842127</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>be1011a71cd8e78d248e072fb7d60231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>98e43ac4bafb96958bbbf658154794d0</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>ba561797354b09741648c975c402eef8</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>36dc06ac5b66e8bec977153741718456</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor5.html</anchorfile>
      <anchor>01d38ddf6e713a47199fba85fd5a8092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor6</name>
    <filename>classsigc_1_1volatile__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>03d9c50b4edc72588ba95fda0cbb41d9</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>1ce192c145ec5af4c826ccb2619cf002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>782bbd4bff8bd939a008ceb9e0511bae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>55c428dacaaff7f5dcd48ec02b53ed60</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>0e8695404c80f8a83ef3762a5b7af784</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>f65315e6db00c73289a0d522b74c80c9</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor6.html</anchorfile>
      <anchor>a64e5accf2702a06bffb6ed68fd95022</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_mem_functor7</name>
    <filename>classsigc_1_1volatile__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>1188bcd09d1f217db4b3dc8302fe5a05</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>4762374376dcb7b11c77372edab78823</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>07834a50703bf92aad9bc167fa256d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>809146646d2dd726a385344f455402e4</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>87b4cf73bd422a42294c0ffc199d6f50</anchor>
      <arglist>(T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>655613b259953a8e0de21e557b402ce1</anchor>
      <arglist>(T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1volatile__mem__functor7.html</anchorfile>
      <anchor>c74b72d519805a654529347e4c638e6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor0</name>
    <filename>classsigc_1_1const__volatile__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>5700c960bfc136fc856e3cc3173b2a27</anchor>
      <arglist>)() const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>b8e419ef5ad21d6230a306cd7d910df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>8eec4c4ff04b8d5ef7c184e853ea0486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>b20dd00a6c8908a8ebd7846985d71856</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>99a36e65fb849aa0a5ea277c9fc3c218</anchor>
      <arglist>(const T_obj *_A_obj) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>a496344eafe6ace812186d0b5806762b</anchor>
      <arglist>(const T_obj &amp;_A_obj) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor0.html</anchorfile>
      <anchor>e0f88c6683fb175845f5f804c2c04ec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor1</name>
    <filename>classsigc_1_1const__volatile__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>566191052777f69d1e6de30a2bce0637</anchor>
      <arglist>)(T_arg1) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>deaf82cc2aff607efe2a51945d6b8565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>25a541c4bef874a6b2d177a3be7ab988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>a8cb4ad934ac610ffe3425cbe799ba8d</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>87ba42e130f905664e2e432e309f9012</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>21e2b07a9c4fcfc55ef07631577d7a00</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor1.html</anchorfile>
      <anchor>f9da27522999030f09c718dbe164f1f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor2</name>
    <filename>classsigc_1_1const__volatile__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>97e716964673221fbf0e1c6f07ae66fa</anchor>
      <arglist>)(T_arg1, T_arg2) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>0d143bb32627f7a0c17270321df8145f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>d99060cf675fb65cbc00f2b8e9ec3068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>da3da9a8dd692377c90abbfa9bcfe73a</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>7557c17658489f19d12945a5296e8f35</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>450a6db1d97a5faddd5c3245055c5ed0</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor2.html</anchorfile>
      <anchor>ac7f64e6cff784ecd6700d0448d8e796</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor3</name>
    <filename>classsigc_1_1const__volatile__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>a22e9ae2c889fdcc965973ca52322ff1</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>d2056f73eed4664ff41f5e673a2276f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>f284f300a6b3696f6379dcc9ed97a744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>a586f24064b6a5c8b69c963fff614d04</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>0fe691de309e7409de98f047ed38a9e7</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>9f2eeebf6464149555d975edce9c0a1c</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor3.html</anchorfile>
      <anchor>6ffedac451ab4f525bd7c9df0b83cf2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor4</name>
    <filename>classsigc_1_1const__volatile__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>f76d8133a87bd11c57d3877aa01c183e</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>8e38a0816627c7ad4fd48278d287f863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>ad7b7f5037a0c8d13668f9c350e010ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>0ffe59d6392c736e6d14c43a4bfa26e5</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>6b3ab51515480fe4c106461c609aa778</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>5d0f6305cc2c8b983fe822c436cbf521</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor4.html</anchorfile>
      <anchor>0714aabc799c5d41af988650fec71410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor5</name>
    <filename>classsigc_1_1const__volatile__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>207499bd2e0e9614030cd02755048006</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>42d6cd140b98358c1d12c90b975ad2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>fe48307086c70740f39f58488a3cbdb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>13787a099e237b44280ddbe9b8d97a04</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>62883651028686628f903c2f56f2edf7</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>48d07d4759b3f9702e2014a29eaaae1e</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor5.html</anchorfile>
      <anchor>785d079f14f42cafd052639a1ebdaeb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor6</name>
    <filename>classsigc_1_1const__volatile__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>e91ece42d701cb59dcc72b27d385873a</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>9f866db08b59a0960875f7608a0c93f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>a921f2d1cea8ddd987cdaa8df6479fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>09704c72e9b0353b04776522edefd57e</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>e438dd9368f1b10004b6d51b599c2376</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>16339a56992d51e657da9e7ffd300b21</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor6.html</anchorfile>
      <anchor>ed412f2606f91f9c11567c37ae6175bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_mem_functor7</name>
    <filename>classsigc_1_1const__volatile__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return(T_obj::*</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>6d90d772e91079ecbb9647d6edf61874</anchor>
      <arglist>)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const volatile</arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>25cb7e6ed71406c5b91ab2696ad8e623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>c71290a7277b022f8a8d7abc4158a7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>95dcac66fbdb4c3b92682a1ddaa0309c</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>d2e699425411b243ac92bbd81f88f607</anchor>
      <arglist>(const T_obj *_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>b125a6db0dc15be0c539695cbdf828ec</anchor>
      <arglist>(const T_obj &amp;_A_obj, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1const__volatile__mem__functor7.html</anchorfile>
      <anchor>3f19b8bff74776f040492d3410c54fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor0</name>
    <filename>classsigc_1_1bound__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::mem_functor0</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor0.html</anchorfile>
      <anchor>36b5479bfc091c063d44b11ad024393a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__mem__functor0.html</anchorfile>
      <anchor>7de90a27f55055cae43df1425cc78415</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__mem__functor0.html</anchorfile>
      <anchor>137ab7d3b66b421f664e154e3d01e66c</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor0.html</anchorfile>
      <anchor>6b5411811e8e74ead796ac5aad1ce42e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor0.html</anchorfile>
      <anchor>e64f4c6596667228376947a38c4a8bb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor1</name>
    <filename>classsigc_1_1bound__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::mem_functor1</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor1.html</anchorfile>
      <anchor>8e460c2a0eb87dcaf263c984b4dc5888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__mem__functor1.html</anchorfile>
      <anchor>d13235c20a9171bd24a4f8ae36577448</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__mem__functor1.html</anchorfile>
      <anchor>777afe4673c9adc0798a38fc96bca7f6</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor1.html</anchorfile>
      <anchor>5c589e3b5ce49a8845554ce9e95032a3</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor1.html</anchorfile>
      <anchor>95ae2c4525d8218569b68bbb3effbadf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor2</name>
    <filename>classsigc_1_1bound__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::mem_functor2</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor2.html</anchorfile>
      <anchor>1b0b5d2145f50d19214ff41bd45ab978</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__mem__functor2.html</anchorfile>
      <anchor>48bc9b34469749461813061d17680ca2</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__mem__functor2.html</anchorfile>
      <anchor>830746b33cae370b756334e4a8cab703</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor2.html</anchorfile>
      <anchor>16fbd8a1ed338ee620c3b965fdfd7eb0</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor2.html</anchorfile>
      <anchor>423780eab9a560771ec3266ea0693117</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor3</name>
    <filename>classsigc_1_1bound__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::mem_functor3</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor3.html</anchorfile>
      <anchor>66d1aa7ad3edafd8851ee0b334f83efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__mem__functor3.html</anchorfile>
      <anchor>adbbb586e3ba0c44a25c1f3834c4c438</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__mem__functor3.html</anchorfile>
      <anchor>1d1dddd6a334864611f5dc3a8ece26f9</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor3.html</anchorfile>
      <anchor>f8d299f488a73a32578b0342988a3322</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor3.html</anchorfile>
      <anchor>e05cea0cbd3345abc624e545422bb47a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor4</name>
    <filename>classsigc_1_1bound__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::mem_functor4</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor4.html</anchorfile>
      <anchor>eddcfc0ce5fe38259608bfc88af37568</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__mem__functor4.html</anchorfile>
      <anchor>15b592122574775dd2c4804617e1e3dd</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__mem__functor4.html</anchorfile>
      <anchor>e15ccaa9f58865b2cd9929644aa85612</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor4.html</anchorfile>
      <anchor>26917718a5755c745e96699e2ba482b7</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor4.html</anchorfile>
      <anchor>a9a90c28652fb499438e757cdc6f3be7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor5</name>
    <filename>classsigc_1_1bound__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::mem_functor5</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor5.html</anchorfile>
      <anchor>91181f20bd393befce307655486949ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__mem__functor5.html</anchorfile>
      <anchor>af05ba83268cf4a55f96db281898b406</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__mem__functor5.html</anchorfile>
      <anchor>179304173879dac0023d49e313125c8c</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor5.html</anchorfile>
      <anchor>bd409fe824cfe3d9881cc26ce48b64a1</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor5.html</anchorfile>
      <anchor>477578c56471258d6eaefb45713dbae8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor6</name>
    <filename>classsigc_1_1bound__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::mem_functor6</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor6.html</anchorfile>
      <anchor>c92e6b87056623eeec0d09a35f41296d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__mem__functor6.html</anchorfile>
      <anchor>b2724a290ceef4f2c279156b606e8c88</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__mem__functor6.html</anchorfile>
      <anchor>bff60fd63e92b1c28c2aacf1cee93508</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor6.html</anchorfile>
      <anchor>f3927372cae3eb56ea1c2fc6656e0f5a</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor6.html</anchorfile>
      <anchor>8aced07018e8f32dcc4339ce26a0e924</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_mem_functor7</name>
    <filename>classsigc_1_1bound__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::mem_functor7</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__mem__functor7.html</anchorfile>
      <anchor>0fcd4636185a806d055d6b885503863b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__mem__functor7.html</anchorfile>
      <anchor>989011ff72d908959d2f0ad346357706</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__mem__functor7.html</anchorfile>
      <anchor>29f43e3ad8d4714c8f3477be02d62c3d</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__mem__functor7.html</anchorfile>
      <anchor>4a2eb13cbf93c04580d6d88e6116db8e</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable">
      <type>limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__mem__functor7.html</anchorfile>
      <anchor>03e799b2af9cdc19c76e81d0bcb843ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor0</name>
    <filename>classsigc_1_1bound__const__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::const_mem_functor0</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor0.html</anchorfile>
      <anchor>12ae83ad7820bd716ed8a07484a339d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor0.html</anchorfile>
      <anchor>67756fc7a32eb42309a1d55aea2eeb19</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor0.html</anchorfile>
      <anchor>44aeae8d1432f66fce9cd385094b78fa</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor0.html</anchorfile>
      <anchor>ea061fca09cdc46ee32bc23fcee56f2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor0.html</anchorfile>
      <anchor>fe36947825350dc17d7fed286f57c32a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor1</name>
    <filename>classsigc_1_1bound__const__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::const_mem_functor1</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor1.html</anchorfile>
      <anchor>65f0cde178bdd7a26fe687a8748dac4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor1.html</anchorfile>
      <anchor>ca80f40c27a3346521ffee81ba79da77</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor1.html</anchorfile>
      <anchor>f62c239e5612df1b7c4c91a52a2e0c62</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor1.html</anchorfile>
      <anchor>a6afdce8f719849ffc6017f8ac5625bb</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor1.html</anchorfile>
      <anchor>c4141561bf43206a396d082dd0089fb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor2</name>
    <filename>classsigc_1_1bound__const__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::const_mem_functor2</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor2.html</anchorfile>
      <anchor>be2916ee9b6867554b48370000eb6886</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor2.html</anchorfile>
      <anchor>6732b8f5b308ff8ff1adea9e3734f4bf</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor2.html</anchorfile>
      <anchor>b5213783f248b53b357ea6385b7bbe7a</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor2.html</anchorfile>
      <anchor>dabf31280e161f126e256d4e2ee5b00b</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor2.html</anchorfile>
      <anchor>3994b65f2ec0b45f5b502f07bf7baca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor3</name>
    <filename>classsigc_1_1bound__const__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::const_mem_functor3</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor3.html</anchorfile>
      <anchor>b4e793d8c65bf8754aea133a2473dc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor3.html</anchorfile>
      <anchor>e63bd158d8ce2571038d4f6382a7bc51</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor3.html</anchorfile>
      <anchor>7fa6101b1b387baac23a7861e2819ad9</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor3.html</anchorfile>
      <anchor>512ff6f251c14b84980ee87acdd6fc08</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor3.html</anchorfile>
      <anchor>c4b0ceb88bda73c90d84b1320e274621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor4</name>
    <filename>classsigc_1_1bound__const__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::const_mem_functor4</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor4.html</anchorfile>
      <anchor>3ffc5790ded15878ce2704072791c4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor4.html</anchorfile>
      <anchor>1d441ea8caf2d2ff8cfca414f259b657</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor4.html</anchorfile>
      <anchor>06e43c95d6ace639ac169ff2d0083ebc</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor4.html</anchorfile>
      <anchor>3822ecd72bd0b496a06e96f98d11dea5</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor4.html</anchorfile>
      <anchor>78490633e22357be6e0a0fcf124121b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor5</name>
    <filename>classsigc_1_1bound__const__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::const_mem_functor5</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor5.html</anchorfile>
      <anchor>882a71b51f303ded9d1ce172b522692a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor5.html</anchorfile>
      <anchor>9e80ad7a6b586eb1d0cc0a4afc9ea1d4</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor5.html</anchorfile>
      <anchor>3c8a1d1411eea1136fa273886688290d</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor5.html</anchorfile>
      <anchor>7ad802d4ef0c43353ab20cd85de8b933</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor5.html</anchorfile>
      <anchor>71f8b7b3a9971d58209c3008d5e32d79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor6</name>
    <filename>classsigc_1_1bound__const__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::const_mem_functor6</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor6.html</anchorfile>
      <anchor>9cd70f288cac9b8d7ee9695166f3d306</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor6.html</anchorfile>
      <anchor>4c6a29813f84239bfc224e36d3ada58c</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor6.html</anchorfile>
      <anchor>fa0adf0adf9cde73008982d2494f3d7e</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor6.html</anchorfile>
      <anchor>e261c6047332e15a354461611299706b</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor6.html</anchorfile>
      <anchor>152f10d5c46eb9d7d582a6e4cb747baf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_mem_functor7</name>
    <filename>classsigc_1_1bound__const__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::const_mem_functor7</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor7.html</anchorfile>
      <anchor>e95db1c3ce4d07122e39dde2c9c5af02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor7.html</anchorfile>
      <anchor>3353dd997ced3fc00f44ee2b8ccb0063</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor7.html</anchorfile>
      <anchor>22e365208dda5614599860d5794cb64f</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor7.html</anchorfile>
      <anchor>19781fcc3bda024dfece2cf00d505d73</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable">
      <type>const_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__mem__functor7.html</anchorfile>
      <anchor>2b59ccc18d96b4b2ec0f6828a5c2a6e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor0</name>
    <filename>classsigc_1_1bound__volatile__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::volatile_mem_functor0</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor0.html</anchorfile>
      <anchor>9a07aa91b2bd5ef0c4fc1a89bad5d3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor0.html</anchorfile>
      <anchor>5812d3638dc20b9fe37688d31dde8ed8</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor0.html</anchorfile>
      <anchor>4f81dd585b0aae830cd585ebb5867e20</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor0.html</anchorfile>
      <anchor>b9cf9d744814f7db61236011f849273e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor0.html</anchorfile>
      <anchor>bc4357df8d4458326135e23965ba5871</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor1</name>
    <filename>classsigc_1_1bound__volatile__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::volatile_mem_functor1</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor1.html</anchorfile>
      <anchor>38ee12aba5c1d6a7c608165a1137219a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor1.html</anchorfile>
      <anchor>f0b1a108c0080fe202b1d77cae86a7d0</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor1.html</anchorfile>
      <anchor>e51c0fe21853f42cd9890f5f995f4d87</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor1.html</anchorfile>
      <anchor>6bc5e5e893f6be97484a0ccba322013c</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor1.html</anchorfile>
      <anchor>09b9ac461833030fae01249b50e5984c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor2</name>
    <filename>classsigc_1_1bound__volatile__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::volatile_mem_functor2</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor2.html</anchorfile>
      <anchor>16d5240b9bbb31ae266725d20b0f37d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor2.html</anchorfile>
      <anchor>f2222c46ab0b47bd59af92ad509ef6fb</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor2.html</anchorfile>
      <anchor>c3a72dc9eb316e9f096cb0a93792e368</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor2.html</anchorfile>
      <anchor>233338625fb4cca8dbc94c629625d86d</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor2.html</anchorfile>
      <anchor>80858a8bbb89469136b8e476d0bae0e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor3</name>
    <filename>classsigc_1_1bound__volatile__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::volatile_mem_functor3</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor3.html</anchorfile>
      <anchor>bc967931a7ab1411e02c022035073be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor3.html</anchorfile>
      <anchor>21c0be5f093ddcd084cc5ad172ceaf92</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor3.html</anchorfile>
      <anchor>1f2aacad170885008a58975c8562a863</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor3.html</anchorfile>
      <anchor>6ce4c3e0e78cb5271f5c4dfaecb324e1</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor3.html</anchorfile>
      <anchor>01d01f9945bd93e227403cdbb8271e2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor4</name>
    <filename>classsigc_1_1bound__volatile__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::volatile_mem_functor4</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor4.html</anchorfile>
      <anchor>7a30b6a2e3067254fdea50104fea8469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor4.html</anchorfile>
      <anchor>e2385ee536e72cfbb0d945ba770f2e69</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor4.html</anchorfile>
      <anchor>7264500594318b92a0a668fcfbbeffbc</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor4.html</anchorfile>
      <anchor>c394e06d0e3745ad4ca62bc495ce23d0</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor4.html</anchorfile>
      <anchor>4bb276cfe8c35645f166cde087f5d17f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor5</name>
    <filename>classsigc_1_1bound__volatile__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::volatile_mem_functor5</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor5.html</anchorfile>
      <anchor>1561f499bd4d950fd36ee43ee60db585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor5.html</anchorfile>
      <anchor>f5e4db24b5ba51d92746aa3fee080d49</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor5.html</anchorfile>
      <anchor>01734765e6a89bd0ab89063f130541e3</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor5.html</anchorfile>
      <anchor>9f4a121e0e0709b28dfcf31df7a7e0a3</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor5.html</anchorfile>
      <anchor>e17c42b74b72c74f3a7e4d5faadaa761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor6</name>
    <filename>classsigc_1_1bound__volatile__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::volatile_mem_functor6</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor6.html</anchorfile>
      <anchor>6eeca5f695bff3c3302e4cf7d222a73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor6.html</anchorfile>
      <anchor>cb8a7befd300496343cf46d8520db04f</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor6.html</anchorfile>
      <anchor>f79be68e9cb6c772f6d6e817bffe9656</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor6.html</anchorfile>
      <anchor>8f826c208d2cb84e687c508e671b0eb3</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor6.html</anchorfile>
      <anchor>64c4455bc351be0f2b42dc28b03baeb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_volatile_mem_functor7</name>
    <filename>classsigc_1_1bound__volatile__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::volatile_mem_functor7</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor7.html</anchorfile>
      <anchor>fce6246f9f2828a7185b3c696435d70a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor7.html</anchorfile>
      <anchor>18f28191685aa86228328e7016b5c803</anchor>
      <arglist>(T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor7.html</anchorfile>
      <anchor>3109683023c9e82a586660399b12769e</anchor>
      <arglist>(T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor7.html</anchorfile>
      <anchor>bb41ad4fced6ba1de91d0ffbb58fe2de</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable">
      <type>volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__volatile__mem__functor7.html</anchorfile>
      <anchor>32b6c9b9aaa1e750217fc1f9d9e4b2df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor0</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <base>sigc::const_volatile_mem_functor0</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor0.html</anchorfile>
      <anchor>622322ff2ef93f0e611fd6f93f6ccdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor0.html</anchorfile>
      <anchor>364e1b19994e41acf1d99d27ffca8924</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor0</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor0.html</anchorfile>
      <anchor>12e99e7dc91602d1e7170a791f96a616</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor0.html</anchorfile>
      <anchor>fb8c169d3deea2b7becf1f3860f46040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor0.html</anchorfile>
      <anchor>dfea0aeaf66e1531da58af3051327949</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor1</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::const_volatile_mem_functor1</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor1.html</anchorfile>
      <anchor>c7a0c09914219d8baf1715675e838e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor1.html</anchorfile>
      <anchor>c99241e0e7ba52e295f6176c03cdd741</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor1</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor1.html</anchorfile>
      <anchor>accca7de16e3da31976680b714d10e79</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor1.html</anchorfile>
      <anchor>028c7c04ce109691819316e77b822e7a</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor1.html</anchorfile>
      <anchor>4c6537ee7b64251b8f418047cb9fd87d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor2</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::const_volatile_mem_functor2</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor2.html</anchorfile>
      <anchor>26e4bc5d2c64c1029b760fe7994fee3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor2.html</anchorfile>
      <anchor>1b629cd2ff30fcaeb035136e190c3f4d</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor2</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor2.html</anchorfile>
      <anchor>6a7a540b5e6a5e7d322a448904bc8881</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor2.html</anchorfile>
      <anchor>e28dac1656f7ad45057b8ad3dd5882f9</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor2.html</anchorfile>
      <anchor>28eef54f97c2468f3385358b75d6cb70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor3</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::const_volatile_mem_functor3</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor3.html</anchorfile>
      <anchor>e127200c20b69f91ccaf40eb60f2c448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor3.html</anchorfile>
      <anchor>7c5661cbb3554624e50c62789f339aaf</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor3</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor3.html</anchorfile>
      <anchor>3fbbc6533b408ccde3d517b1f2a38223</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor3.html</anchorfile>
      <anchor>ae92092631a6fdb479f07914807343bc</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor3.html</anchorfile>
      <anchor>65b0c3f640389160aa73a299aed8c512</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor4</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::const_volatile_mem_functor4</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor4.html</anchorfile>
      <anchor>2c06c731ae9564be215802a98541d06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor4.html</anchorfile>
      <anchor>97b15b931ba6db1852011d252dd3d5f0</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor4</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor4.html</anchorfile>
      <anchor>4e0fdda617113a58f8839ab53a9fa613</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor4.html</anchorfile>
      <anchor>1d900d359f3a2d828f3e1f676bd53d48</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor4.html</anchorfile>
      <anchor>52abd6d1eb7dd0919ecb6d3a667b0e18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor5</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::const_volatile_mem_functor5</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor5.html</anchorfile>
      <anchor>54debcbe3edf1a9606aad9cfcc1e004c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor5.html</anchorfile>
      <anchor>cc05a40bf47bd943c5d822b354a80ae9</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor5</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor5.html</anchorfile>
      <anchor>178805b13affaa2b0fbaafe287cb9390</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor5.html</anchorfile>
      <anchor>51d355f17daacfbc2dbe01194c5821e9</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor5.html</anchorfile>
      <anchor>72dab40d6161daa1ad1655a03e5a5aa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor6</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::const_volatile_mem_functor6</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor6.html</anchorfile>
      <anchor>a8d75053aa097f0632c13bf1185f84a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor6.html</anchorfile>
      <anchor>e07e825b1d3ee4fa7d4dd45eb7f2fbad</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor6</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor6.html</anchorfile>
      <anchor>c5aa6dc8967fed463dd69f412ded1fd1</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor6.html</anchorfile>
      <anchor>1ca04b8397d16d03e086f0dc98241eee</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor6.html</anchorfile>
      <anchor>bbd560d8331fbab5cd8a08afd756c8fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::bound_const_volatile_mem_functor7</name>
    <filename>classsigc_1_1bound__const__volatile__mem__functor7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::const_volatile_mem_functor7</base>
    <member kind="typedef">
      <type>base_type_::function_type</type>
      <name>function_type</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor7.html</anchorfile>
      <anchor>48030a47276e3eede338fc78c79e5a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor7.html</anchorfile>
      <anchor>6f2635a9548c06f2f5090d75df09fbf1</anchor>
      <arglist>(const T_obj *_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bound_const_volatile_mem_functor7</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor7.html</anchorfile>
      <anchor>ed3adf188de8b282a4a597fb5e4a07bc</anchor>
      <arglist>(const T_obj &amp;_A_obj, function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor7.html</anchorfile>
      <anchor>ee72086f8a25fd7935f8024f2d2d01b7</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable">
      <type>const_volatile_limit_reference&lt; T_obj &gt;</type>
      <name>obj_</name>
      <anchorfile>classsigc_1_1bound__const__volatile__mem__functor7.html</anchorfile>
      <anchor>ec37eae62ba95f04b55dd6c55c6161c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor0</name>
    <filename>classsigc_1_1pointer__functor0.html</filename>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor0.html</anchorfile>
      <anchor>f44316e53e33b4184ca151b6b11c70e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor0</name>
      <anchorfile>classsigc_1_1pointer__functor0.html</anchorfile>
      <anchor>fdb67f682e7b9190f646eed879dcfbe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor0</name>
      <anchorfile>classsigc_1_1pointer__functor0.html</anchorfile>
      <anchor>9ae3efd5c13c738db815f619499004d7</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor0.html</anchorfile>
      <anchor>fb058396d0f84a248197ddb7d4aed109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor0.html</anchorfile>
      <anchor>f998b64dac7b3c7eeb2e9a2856a4213e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor1</name>
    <filename>classsigc_1_1pointer__functor1.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor1.html</anchorfile>
      <anchor>4080910d23a74b102a123838fa93e90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor1</name>
      <anchorfile>classsigc_1_1pointer__functor1.html</anchorfile>
      <anchor>6ce467c0641f8e3e0d91f3b843b07c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor1</name>
      <anchorfile>classsigc_1_1pointer__functor1.html</anchorfile>
      <anchor>8ab0c5b707dc41a821c63769344db2cb</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor1.html</anchorfile>
      <anchor>1cfeea6457156cf41949233ed844fa9f</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor1.html</anchorfile>
      <anchor>864ab55240be5287faf07c341ae9501e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor2</name>
    <filename>classsigc_1_1pointer__functor2.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor2.html</anchorfile>
      <anchor>297b784eb0cea07b364c854e5dd5f864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor2</name>
      <anchorfile>classsigc_1_1pointer__functor2.html</anchorfile>
      <anchor>2977aa1d72f5f0fd6c778b60ad791b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor2</name>
      <anchorfile>classsigc_1_1pointer__functor2.html</anchorfile>
      <anchor>428226381ff7bda06044c8fa53d4e27e</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor2.html</anchorfile>
      <anchor>880e4d5fb06711c795e684e943add25e</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor2.html</anchorfile>
      <anchor>340680ba8ae5ea67eb0afe33d118c82b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor3</name>
    <filename>classsigc_1_1pointer__functor3.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor3.html</anchorfile>
      <anchor>2a0ed29803c02cc62fcc6497f83f88bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor3</name>
      <anchorfile>classsigc_1_1pointer__functor3.html</anchorfile>
      <anchor>1a4909d1444e4456a89eb5852933d1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor3</name>
      <anchorfile>classsigc_1_1pointer__functor3.html</anchorfile>
      <anchor>ae48103ba1c48e192a04c9a1b81ae9dc</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor3.html</anchorfile>
      <anchor>f51742fc7043ed921c42ffab60ebe386</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor3.html</anchorfile>
      <anchor>1ac1e43f2515d64c0da4656cdfac1f44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor4</name>
    <filename>classsigc_1_1pointer__functor4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor4.html</anchorfile>
      <anchor>787f8ea1c15d7bfab7643081a408401c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor4</name>
      <anchorfile>classsigc_1_1pointer__functor4.html</anchorfile>
      <anchor>b8e3bf143e71c5ffe8f155ace0f895a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor4</name>
      <anchorfile>classsigc_1_1pointer__functor4.html</anchorfile>
      <anchor>30eaeb5f9974bed73d7577b862c2e06b</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor4.html</anchorfile>
      <anchor>bfa342f31460fda528345ede847c2636</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor4.html</anchorfile>
      <anchor>f7079533ac64ac9ba23eab99e5c54269</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor5</name>
    <filename>classsigc_1_1pointer__functor5.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor5.html</anchorfile>
      <anchor>00dcbec8a920ea784e3210743c77855b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor5</name>
      <anchorfile>classsigc_1_1pointer__functor5.html</anchorfile>
      <anchor>a86bb74ff5e188f8f6497b7e73621cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor5</name>
      <anchorfile>classsigc_1_1pointer__functor5.html</anchorfile>
      <anchor>bf1e06db145e4554ec53964ca79171cf</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor5.html</anchorfile>
      <anchor>14f326f46993aea1013256a307b954d0</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor5.html</anchorfile>
      <anchor>1c97e4e7e8598e06802b07cb86b32466</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor6</name>
    <filename>classsigc_1_1pointer__functor6.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor6.html</anchorfile>
      <anchor>9fd7af745ebad4d59f67e0f60fb395e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor6</name>
      <anchorfile>classsigc_1_1pointer__functor6.html</anchorfile>
      <anchor>26551fa703a65a9a14190c7579a3b77d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor6</name>
      <anchorfile>classsigc_1_1pointer__functor6.html</anchorfile>
      <anchor>b56acb7713cf87d0b3094adc4ffe7a15</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor6.html</anchorfile>
      <anchor>93455713ca148bff6f50ec6578235357</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor6.html</anchorfile>
      <anchor>69c965009b6c3b65106c731b20e60368</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::pointer_functor7</name>
    <filename>classsigc_1_1pointer__functor7.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_return</templarg>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1pointer__functor7.html</anchorfile>
      <anchor>41613e64e2b96656b85aa9eefa35aa91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor7</name>
      <anchorfile>classsigc_1_1pointer__functor7.html</anchorfile>
      <anchor>1268abfa3437c0977517dd4cd0548080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointer_functor7</name>
      <anchorfile>classsigc_1_1pointer__functor7.html</anchorfile>
      <anchor>01a6793cd057cd94bba98db3b34a3e7c</anchor>
      <arglist>(function_type _A_func)</arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1pointer__functor7.html</anchorfile>
      <anchor>3c6940094b0f84e8818d55cb6e21a1b1</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>function_type</type>
      <name>func_ptr_</name>
      <anchorfile>classsigc_1_1pointer__functor7.html</anchorfile>
      <anchor>a092fb6515cb3496529b253b1a57118b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot0</name>
    <filename>classsigc_1_1slot0.html</filename>
    <templarg>T_return</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>ca0c967b605e09d5a87015d95e93d4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>217f897aa20f2a1a9fffcb6500598600</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot0</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>8681082ecd439d5b294922e4d27a3f49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot0</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>b5e8957dd339cc35bfc58fa64718eb51</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot0</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>cce9a5d9a4f939e405383092ba717f72</anchor>
      <arglist>(const slot0 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot0 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot0.html</anchorfile>
      <anchor>49bba0540dcc76fb19e49d19a1acd563</anchor>
      <arglist>(const slot0 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot1</name>
    <filename>classsigc_1_1slot1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>b4991fe5d80761ddab482fda9ebe6d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>1dad398bbdcf04d01cce1215d20059be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>278a26f4629fb0beb286add4141c5ac8</anchor>
      <arglist>(arg1_type_ _A_a1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot1</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>a8ac5eadba778c11a424e255889e67f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot1</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>bc5b60c5c3bf803b337f2a8f9c1ec5e5</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot1</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>c6ecaff0a20a57d2168ea126e565e36a</anchor>
      <arglist>(const slot1 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot1 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot1.html</anchorfile>
      <anchor>2e0d65cfc434718b6c5f7d7135ac384e</anchor>
      <arglist>(const slot1 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot2</name>
    <filename>classsigc_1_1slot2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>0bb920e3d5628c3d01a4337a2a8a97fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>5e4e9f45f294cc0596822273e909fd04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>8b4e8493ea6e18ad923aae1c49c5587d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>bae441b7fdd6dd5850a4283d95b9e647</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot2</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>3f9f6cf199bbb40011eca25eb9da67c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot2</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>384aabbb4edb55a918a7e306b1b11f74</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot2</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>868deef9d947dfa4fcbb0cfe64cbd42e</anchor>
      <arglist>(const slot2 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot2.html</anchorfile>
      <anchor>6b3d5de4d2e7a6134cc883b98380caa7</anchor>
      <arglist>(const slot2 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot3</name>
    <filename>classsigc_1_1slot3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>69cca26f164c63de6ffa70a3806fb936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>2aa9798df311c3de224e535788bb9a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>dd77d4126a1dd4e56f19320767b9cc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>arg3_type_</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>fef6a5f4b398ef66242d1568e472a82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>5bc54482d1e813a4dbded24a0893f996</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot3</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>c477d74beed45b2b3e26d19b083147ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot3</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>0672eb82919bdd0c2bd9ef38e28b9264</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot3</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>fa87acf0475e178f8d970bf05f84b04b</anchor>
      <arglist>(const slot3 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot3.html</anchorfile>
      <anchor>2ff8f9202019d25ddab688128c504e72</anchor>
      <arglist>(const slot3 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot4</name>
    <filename>classsigc_1_1slot4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>3f6b5b11385536c1c199ca29468c638a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>4e83a8c2b863d63a3a62c980311c3cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>fa40f41b2158ca59ce1e3fd74b6904f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>arg3_type_</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>157a0ea716942080dbabe5baf86f26dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>arg4_type_</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>bfec1ba21a151b20403967d5eb9e02cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>8d7a64f3e5c308136ea6456450d83f43</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot4</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>4b8ef0494eea86c0d787486ce121db91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot4</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>e88657b620af0e8fa9b4855ecb4f0c20</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot4</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>7b7080168e769cdec8d916f71fa58d21</anchor>
      <arglist>(const slot4 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot4 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot4.html</anchorfile>
      <anchor>c2fb7f8ae312ced5b7436f0a0d062132</anchor>
      <arglist>(const slot4 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot5</name>
    <filename>classsigc_1_1slot5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>ac50a6486dddcac3a42022a6f2189f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>a3dd44327a3881b5fbf725456a08cb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>cf28e48ef5d2fbac436b2b5480c54924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>arg3_type_</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>148432d9435380a29d4cb2501bcbe12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>arg4_type_</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>8a06dbe3ec0dc66d60a7cd005fd6e134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>arg5_type_</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>7838ffea5ef5d1b1e980267dba0d63e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>2c05f974b6c5c8b59b2a5259ace5e1c7</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot5</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>7548f0d175acd8296064c9bc6d76ea88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot5</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>2e67f263b100b6f542234dc37b3fe85f</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot5</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>d54fd2ef5f50844c214f1a5fbaef9299</anchor>
      <arglist>(const slot5 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot5 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot5.html</anchorfile>
      <anchor>24d22be7be827080b34109c625bad7fd</anchor>
      <arglist>(const slot5 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot6</name>
    <filename>classsigc_1_1slot6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>8dae48d6160e0f917f545eb10950a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>b3e64e9000818c57d71ace5378cd88d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>79bb5bb8a57aafc7be66a0e818370b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>arg3_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>37cd654d10964686d687b3eb6815be77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>arg4_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>82916dd6aa5592a30180204bf470cc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>arg5_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>8701fd8f302584b2cef720dca31b1626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg6 &gt;::take</type>
      <name>arg6_type_</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>5cb150b657589e5b80a04fa7a7da3e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>5eb35859b00d0a210dd73a8834345331</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5, arg6_type_ _A_a6) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot6</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>3c763adcaa8b9c34c808ef0f15b1fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot6</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>0342e330b0f531adddf974a377d866f3</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot6</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>7e4c0f209961d3797f6fadfe9d1c6078</anchor>
      <arglist>(const slot6 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot6 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot6.html</anchorfile>
      <anchor>7d13ed520a19d287719bd24050b7d8a2</anchor>
      <arglist>(const slot6 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot7</name>
    <filename>classsigc_1_1slot7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::slot_base</base>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>06a374d3304636cb48fed29542dc851f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>arg1_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>8b4a6d6d00970a10f21ed9f02a8f954f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>arg2_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>a171043774935c1f80184f6c554ca6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>arg3_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>6cd9dd374e6ae4a7e3dcdb31cb1e53d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>arg4_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>ccd7c6d48979d45a13b797e0b9bcd3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>arg5_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>797e3dda33c3f0c8e6536cb4ab21d017</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg6 &gt;::take</type>
      <name>arg6_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>04e594a0728d461d2557d5c4378e6b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_trait&lt; T_arg7 &gt;::take</type>
      <name>arg7_type_</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>61a70d5528d7f46eaa410249efad14d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>115f4dc171664e693a6bb7afc41778d4</anchor>
      <arglist>(arg1_type_ _A_a1, arg2_type_ _A_a2, arg3_type_ _A_a3, arg4_type_ _A_a4, arg5_type_ _A_a5, arg6_type_ _A_a6, arg7_type_ _A_a7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot7</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>bf200ae4152fb26fc96a6863be3548b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot7</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>aa67b3ae8d8d9c89e8f6501b496b5c21</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot7</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>6411349bb6f8d7151f41ae7772e61f6d</anchor>
      <arglist>(const slot7 &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>slot7 &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot7.html</anchorfile>
      <anchor>f6bf09a0b3c09245257af113e70269d2</anchor>
      <arglist>(const slot7 &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot</name>
    <filename>classsigc_1_1slot.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::slot7</base>
    <member kind="typedef">
      <type>slot7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot.html</anchorfile>
      <anchor>e1e87340d79ea3597eb8d895b245a400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot.html</anchorfile>
      <anchor>f643a8ef3eafd24f738224bbd6056fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot.html</anchorfile>
      <anchor>5ef6d7b77b877fda0a67d33ea5d08c30</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot.html</anchorfile>
      <anchor>c53122c7f0f1f4dd9493e9ac88837ae2</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <base>sigc::slot0</base>
    <member kind="typedef">
      <type>slot0&lt; T_return &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9937c7fbdb8be4e387fddcebf328fa41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>bdb48282bb8b1b5404fcea6474eca5a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>564bba9b4edfef0665a6c9b475ac5026</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9312dc3f121832083362b21334b939d2</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::slot1</base>
    <member kind="typedef">
      <type>slot1&lt; T_return, T_arg1 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2b6b5b8590577c765c7a32f7e619250a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d34e10be904557368c241f53e972c8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9f85db5c3dfa6ef4b5d3d07f5aa78548</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2765416a5563c2d264c892aa6ab5a83c</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::slot2</base>
    <member kind="typedef">
      <type>slot2&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>9bdec547b9af364b717ea1802a77128b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>ae3ba9ffc1ab8ea95ba75dd6f5753c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>f7b12a0b9f20d99aa1734d8581169857</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>7b7a49a2270daf31abdc237d440b21b1</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::slot3</base>
    <member kind="typedef">
      <type>slot3&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>78e95d6a202ff298ccbc41c8dcb36904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d99678bf6a2affc9a1607046e158b22b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>d4a7fa0bed0b54da7faae18554d6d4f6</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>508b21923e1ef3d7d689984132d89360</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::slot4</base>
    <member kind="typedef">
      <type>slot4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>a3da9f3a253c0a0e33de6132d79e15aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>fb4ec5a164ca622ab9c1a97e61e9cfdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>954ad190941380e2d7a0f749209a9a28</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>fb9ff761d6f8519ea01b4fd1c254ee60</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::slot5</base>
    <member kind="typedef">
      <type>slot5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>1ae53a1f68dd2dcaca31f853476fd046</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>81c9e625279217aee1ae00696927c39e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>641f192e02f6e897b7fc2e37b1b2cf67</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>fab26283085a050db6d75a1bfe273f86</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</name>
    <filename>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::slot6</base>
    <member kind="typedef">
      <type>slot6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>parent_type</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>79d727f70a14572d400adb1330fe3ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>290753f903665f059c25a4f71c9a9e16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>75b147f3ae1398a180da15438ec8a324</anchor>
      <arglist>(const T_functor &amp;_A_func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot</name>
      <anchorfile>classsigc_1_1slot_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>8be1480e392dcaa57d47e1c2a132edd4</anchor>
      <arglist>(const slot &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::slot_base</name>
    <filename>classsigc_1_1slot__base.html</filename>
    <base>sigc::functor_base</base>
    <member kind="typedef">
      <type>trackable::func_destroy_notify</type>
      <name>func_destroy_notify</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>7e1a0c2fe43a42187810e8997abeb341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_base</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>558d209f5e7330680b4a6f0e7894be3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_base</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>afce3e11630a5081208a4dd0d809e55f</anchor>
      <arglist>(rep_type *rep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_base</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>adcbb54832b5207bddf89ac5433b531a</anchor>
      <arglist>(const slot_base &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~slot_base</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>75c18c50860f63fb020fc2953576ea57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>37e4b7151de10ac301eda9cd78d580bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parent</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>2fb1bd8f20bd2c1f8514193a512d84eb</anchor>
      <arglist>(void *parent, void *(*cleanup)(void *)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_destroy_notify_callback</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>fb626f3bce53c7430ee4b5e00449837e</anchor>
      <arglist>(void *data, func_destroy_notify func) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_destroy_notify_callback</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>6374e1400eef020eab09dfdbdc563912</anchor>
      <arglist>(void *data) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>ef88c874f0fc444ff4c5b783b12d2537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blocked</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>824a4b0b72b85c3b5fb0a9f479790d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>block</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>69042c2e2b0e5449fbf8203e862192a7</anchor>
      <arglist>(bool should_block=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unblock</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>d93eaf25fae13186a1af8f699c6004a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>4042d221f7f07a7394d2eb0f14db2857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>19522528264f1646f8ed982b0042ffad</anchor>
      <arglist>(const slot_base &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>rep_type *</type>
      <name>rep_</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>a482f7dfc73c6950abde0fd51b3125b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blocked_</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>9dc4958860c0f8300b461a743b7f2a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1slot__base.html</anchorfile>
      <anchor>b91782d31bcb34d94230b1a2885c8471</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::limit_reference</name>
    <filename>classsigc_1_1limit__reference.html</filename>
    <templarg>T_type</templarg>
    <templarg>I_derives_trackable</templarg>
    <member kind="function">
      <type></type>
      <name>limit_reference</name>
      <anchorfile>classsigc_1_1limit__reference.html</anchorfile>
      <anchor>58bf17e1eaa63d86336c831fa885bc66</anchor>
      <arglist>(T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1limit__reference.html</anchorfile>
      <anchor>66b544da149f382aed7f66353d7b06ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1limit__reference.html</anchorfile>
      <anchor>951ae1d15397406945d4a6b67f30936f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::limit_reference&lt; T_type, true &gt;</name>
    <filename>classsigc_1_1limit__reference_3_01T__type_00_01true_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>limit_reference</name>
      <anchorfile>classsigc_1_1limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>26ef98ef1f11a4b5891d426e9722c2c8</anchor>
      <arglist>(T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const trackable &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>cda4db64eb1cf4156d6b35acbe75cef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>d5fbda2f506ff396ed2b83fe327fc8d8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_limit_reference</name>
    <filename>classsigc_1_1const__limit__reference.html</filename>
    <templarg>T_type</templarg>
    <templarg>I_derives_trackable</templarg>
    <member kind="function">
      <type></type>
      <name>const_limit_reference</name>
      <anchorfile>classsigc_1_1const__limit__reference.html</anchorfile>
      <anchor>cee8a4c09720730cd5f66696fd018b4c</anchor>
      <arglist>(const T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1const__limit__reference.html</anchorfile>
      <anchor>9518c78a342f7d4bba9ca01b129c894d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1const__limit__reference.html</anchorfile>
      <anchor>2cb583845b99f2fdb56297bc6dff57d0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_limit_reference&lt; T_type, true &gt;</name>
    <filename>classsigc_1_1const__limit__reference_3_01T__type_00_01true_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>const_limit_reference</name>
      <anchorfile>classsigc_1_1const__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>68f1337800c19036c81512e76e0dd6cd</anchor>
      <arglist>(const T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const trackable &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1const__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>92af9590581d2e66bbc2ef4c7c353752</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1const__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>1fce594fb08b83a297ab51a59cba668d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_limit_reference</name>
    <filename>classsigc_1_1volatile__limit__reference.html</filename>
    <templarg>T_type</templarg>
    <templarg>I_derives_trackable</templarg>
    <member kind="function">
      <type></type>
      <name>volatile_limit_reference</name>
      <anchorfile>classsigc_1_1volatile__limit__reference.html</anchorfile>
      <anchor>cb3e6e1ecc628343f94faae718b58066</anchor>
      <arglist>(T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1volatile__limit__reference.html</anchorfile>
      <anchor>14357ecc1a8e064d5f5531ce82542e74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>volatile T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1volatile__limit__reference.html</anchorfile>
      <anchor>932be0a7adce8fac57f269d551e271a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::volatile_limit_reference&lt; T_type, true &gt;</name>
    <filename>classsigc_1_1volatile__limit__reference_3_01T__type_00_01true_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>volatile_limit_reference</name>
      <anchorfile>classsigc_1_1volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>a0b69d0a82616d6db2eb86d7a041df23</anchor>
      <arglist>(T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const trackable &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>738e7c10d15b06753ce46353bf238d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>volatile T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>8cf967bfe708cc604f943022cf713c42</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_limit_reference</name>
    <filename>classsigc_1_1const__volatile__limit__reference.html</filename>
    <templarg>T_type</templarg>
    <templarg>I_derives_trackable</templarg>
    <member kind="function">
      <type></type>
      <name>const_volatile_limit_reference</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference.html</anchorfile>
      <anchor>9a01809bae79cb1b13ee50ce9d84dcb8</anchor>
      <arglist>(const T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const T_type &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference.html</anchorfile>
      <anchor>b3ce1b09cad7a91c24c510e5915e4b7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const volatile T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference.html</anchorfile>
      <anchor>541dc87d0bda7a418aaa3dca1f9928da</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::const_volatile_limit_reference&lt; T_type, true &gt;</name>
    <filename>classsigc_1_1const__volatile__limit__reference_3_01T__type_00_01true_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>const_volatile_limit_reference</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>94bf04779d798bd2737c521d20655122</anchor>
      <arglist>(const T_type &amp;_A_target)</arglist>
    </member>
    <member kind="function">
      <type>const trackable &amp;</type>
      <name>visit</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>b80aef9841aa200aec2aa7c55f8eea4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const volatile T_type &amp;</type>
      <name>invoke</name>
      <anchorfile>classsigc_1_1const__volatile__limit__reference_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>22ff9a2f21147faa12dd2d0fae6d410c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::reference_wrapper</name>
    <filename>structsigc_1_1reference__wrapper.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>reference_wrapper</name>
      <anchorfile>structsigc_1_1reference__wrapper.html</anchorfile>
      <anchor>05dfcad06f2af395c5e2daa9600d455a</anchor>
      <arglist>(T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T_type &amp;</name>
      <anchorfile>structsigc_1_1reference__wrapper.html</anchorfile>
      <anchor>4ee5921a6939b4341c994c31b685ac55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>T_type &amp;</type>
      <name>value_</name>
      <anchorfile>structsigc_1_1reference__wrapper.html</anchorfile>
      <anchor>cf0463810eeadc10cc3dd2eab900145f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::const_reference_wrapper</name>
    <filename>structsigc_1_1const__reference__wrapper.html</filename>
    <templarg>T_type</templarg>
    <member kind="function">
      <type></type>
      <name>const_reference_wrapper</name>
      <anchorfile>structsigc_1_1const__reference__wrapper.html</anchorfile>
      <anchor>249ae888fb9be126598d81ce339fbf81</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T_type &amp;</name>
      <anchorfile>structsigc_1_1const__reference__wrapper.html</anchorfile>
      <anchor>d5d7fb58fb9e6ab969caa8af0b6a8512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const T_type &amp;</type>
      <name>value_</name>
      <anchorfile>structsigc_1_1const__reference__wrapper.html</anchorfile>
      <anchor>aaba3da60073e485144be648f8c4f69f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::unwrap_reference</name>
    <filename>structsigc_1_1unwrap__reference.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1unwrap__reference.html</anchorfile>
      <anchor>f35cad963fc073623282a2fb9c81f02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::unwrap_reference&lt; reference_wrapper&lt; T_type &gt; &gt;</name>
    <filename>structsigc_1_1unwrap__reference_3_01reference__wrapper_3_01T__type_01_4_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type &amp;</type>
      <name>type</name>
      <anchorfile>structsigc_1_1unwrap__reference_3_01reference__wrapper_3_01T__type_01_4_01_4.html</anchorfile>
      <anchor>25182a927492ff79290f9820f7131e58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::unwrap_reference&lt; const_reference_wrapper&lt; T_type &gt; &gt;</name>
    <filename>structsigc_1_1unwrap__reference_3_01const__reference__wrapper_3_01T__type_01_4_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>const T_type &amp;</type>
      <name>type</name>
      <anchorfile>structsigc_1_1unwrap__reference_3_01const__reference__wrapper_3_01T__type_01_4_01_4.html</anchorfile>
      <anchor>9820651050b0059841f9a92d9c478ba8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::slot_iterator</name>
    <filename>structsigc_1_1slot__iterator.html</filename>
    <templarg>T_slot</templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>96b2232ef8300ae2f217a93e54aaa38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>fe65c6b978415dda361e6b99d2d484a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>0c882521b418b9faaac879a1d337ace5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>f7a0ed93fca0064021d77275305e04a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot</type>
      <name>value_type</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>94f7fcbd3224e1f7e88b84f9e326b0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>fb36f2add6064e0d7e7ae63ee2ddcde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot &amp;</type>
      <name>reference</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>a3e69a557b73d817a1951af1b1767632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::signal_impl::iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>189fa620b9d90dc1a224d9ad91da5011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>82d4023ad9dc38dcde4cae6bf65cd8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>07933d72e788285673121e5ce019a260</anchor>
      <arglist>(const iterator_type &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator *</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>ab1046062280b1a4d0b9c79673c8d67b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>769643885f6e23411bb1bbbcacb8cf9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>slot_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>f5a3b852c1c6e8f69c41f64a17204758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>7469f1ad5f1802d7a04f031ee4b3e54e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>8aeef4e41dc0930beaa8d6a37b27775c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>fd2ebfa71c2df96290f2bce0746d6fa5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>fccca03555b8185635ab4b9e29f75ae3</anchor>
      <arglist>(const slot_iterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>e69f637123137f19f7fcb219a2e2cac8</anchor>
      <arglist>(const slot_iterator &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>iterator_type</type>
      <name>i_</name>
      <anchorfile>structsigc_1_1slot__iterator.html</anchorfile>
      <anchor>5e113a9e58ce7e16a11838a203b72649</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::slot_const_iterator</name>
    <filename>structsigc_1_1slot__const__iterator.html</filename>
    <templarg>T_slot</templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>ab24c5676092cc654f6772789f4b486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>70bc9d99a14e3047f9508bf96739ffd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>fc9dff16373a2fa7a4f373bd48a852c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>e377905cad9a91ca23d09877c72d82cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_slot</type>
      <name>value_type</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>20a9337066a01a137ea9945bdd509e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_slot *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>28f3f0d2ac11dd8805d75682d8f38022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_slot &amp;</type>
      <name>reference</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>8300967b4b29096e7ad0b96db04e095a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>3466a35177b6a0999a12ff0ee10e91b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_const_iterator</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>2b9e80b87a3400bb6f794c07f90d2d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_const_iterator</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>f84ef3ee54ae482534d88ac6a5b871ae</anchor>
      <arglist>(const iterator_type &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator *</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>d703755760d08e41c0dcef2326268dc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>d22e3311d946a52c698cd93af796cff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>slot_const_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>ed166d716b032a781d2169c919cefdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_const_iterator</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>a2f7b6d4c7aa7192fca0bdcc08b74ba6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>slot_const_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>1c1d7d7798914c80d6a60d87c4b24c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_const_iterator</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>9ece84f63e078754915dcc6dc6ee1cc4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>610aaac1dde93014ed62a563e89bb46a</anchor>
      <arglist>(const slot_const_iterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>c665f75d2a7cad5012a3ec0ab6be1230</anchor>
      <arglist>(const slot_const_iterator &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>iterator_type</type>
      <name>i_</name>
      <anchorfile>structsigc_1_1slot__const__iterator.html</anchorfile>
      <anchor>5e8020f4f1c3da18fcac4c9babee306f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::slot_list</name>
    <filename>structsigc_1_1slot__list.html</filename>
    <templarg>T_slot</templarg>
    <member kind="typedef">
      <type>T_slot</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>f769819a62b19adb888eb231709e894f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type &amp;</type>
      <name>reference</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>b0f2255639f24ff02d45f97994bc0e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const slot_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>3ac6e61271e7e8623d1bd493c61f1214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_iterator&lt; slot_type &gt;</type>
      <name>iterator</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>9774e07e467d9463e6e7cc7aa2f5c05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_const_iterator&lt; slot_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>957838a7111e132824c10c2d5a897a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>ddb44a7590825f917b3fcf0179fadadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>8293bfca54539958326f57375e4d8c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_list</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>a83ff2d263581f80f9d15d14fa31bc7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_list</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>5baac8e52fda5f6fc4fa31bed67077e3</anchor>
      <arglist>(internal::signal_impl *__list)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>e179ec4300ddc793492bc574f6a92fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>e8eb4f17ab471807ce54c09f01bc3f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>ffef6e4e62e4be8743c56aa8753f76d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>21ba66b2a5531b18598b65ec9cdf779f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>898411734692d01a320b20a20d9e6978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>96274762b287c25fd3c4d44bd56ac50a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>e4759ca19577b31dca5116292e7de19c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>60a463998de82604f1e42e562dd3bab2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>bcd398b9cb6fe9506e548d121081163a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>a8574b36237432c6e23e261771812c6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>2b1145f2e387c041913d01b5b197f12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>f6e4223484094a2ee9496da89c984cc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>34c421956609463692527793e49b87ae</anchor>
      <arglist>(iterator i, const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>5bb241c13cb363825f787ecd244ebf7d</anchor>
      <arglist>(const slot_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>5c7401657a6020c14616e62b20949de8</anchor>
      <arglist>(const slot_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>092ed557b1519062804a41e9b527e99d</anchor>
      <arglist>(iterator i)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>76e40607d0329865e549ac78105a5d7d</anchor>
      <arglist>(iterator first_, iterator last_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>9244005ecc265b07b7f451e63662686e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>bb28f82ef0cbc78a86a4becd61b0c9ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::signal_impl *</type>
      <name>list_</name>
      <anchorfile>structsigc_1_1slot__list.html</anchorfile>
      <anchor>2c5b3ecf068ec93cdc34a4ae8d48313c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal0</name>
    <filename>classsigc_1_1signal0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>e291a90c83f8ad1cdcc7c2a4cdd958de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>690a3c47a9f5274fafde08b1bb051e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>dd195c1c738ee8efe10294f21d258b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>d61e875748cf4e1c2a6d89a930ae093e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>d4f7c62954f5c270e115d9b2a2df15ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>1d9c390974304392ed12ee81543ab997</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>476f559a69eef5999c99cd6262a9aa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>609b1e0770f47c9081a3de56b65314d2</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>3749597ca18ce12390fb317c407e9554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>b9012529a34abee9c62beacb7b790411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor0&lt; result_type, signal0 &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>3aa8a572b95835eb1367838d675c68de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>5576113ddfd6b92a96f86072262307f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>ab880dfd826e15ad110e484d2635e279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal0</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>2fb24e11a8f645e5122646ea2b4a5d2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal0</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>7dc687f1afb4088a3d888aa05dbf56d9</anchor>
      <arglist>(const signal0 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>9ee0590431632d224a047e8c1c506ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal0.html</anchorfile>
      <anchor>802fc05bd51e579cf8379e21ab1e742f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal1</name>
    <filename>classsigc_1_1signal1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>dcdcfa50d60e1832ce038a4a5554fce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>30b59d44cc9ab48cb39f040cbfc3a526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>5fadeb350140d6aaf560b217e7e7c4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>b61e2d1fcaf903dffbb26b01800907fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>f1e262b35c9574e65b2607cdfcaad707</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>b0443049aa736d88770d0f534600b2bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>eb327519f808dfec9a723511ef82caa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>ac2ade0896bd4a982777d5dd6ac75888</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>3d6fc96f07c19d77e5eab9925c101c83</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>5f150c88559aacf13edd07bd7917c96a</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor1&lt; result_type, signal1, typename type_trait&lt; T_arg1 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>3b476d67c4622e69aeb4d495603d9fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>7653b68e6a3b8445de91f89060bf2600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>f43eb365c7c52560f1c4c1eb3340155d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal1</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>ba62d8d0b9591bcfd728f8ae8a22d600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal1</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>b3378dd754ffddb4760f2a3afb271dbe</anchor>
      <arglist>(const signal1 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>094446495a930dcc28f04c48a379ad4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>b98bfb29f76184a31eb272ed88d07d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal1.html</anchorfile>
      <anchor>ea0fddccd42e546ac8b22eab27a881a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal2</name>
    <filename>classsigc_1_1signal2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>55151695417c33540357ff524bfe2665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>6492dc93eb53f633d93e889b760c9691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>f31262f54dfb2a97540de9c4a1fc5726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>658ba1c6468882c9b1d480be2bbaf55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>d507bc5ea29adb2305f8fa91acbd30ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>6710759bdeb8e626fc09d8c448e6613f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>acb8fe57ffe01dea5c5fb5af44634287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>a686af4f961b098a23d4f7276437c2b0</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>87dc42578a7adf951a07a4185528ec8e</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>bd0c26d0af75ee365d5f02d01a8584d8</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor2&lt; result_type, signal2, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>8f60f18a9b99464e4da26159798d2498</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>c28b0205aa1e60cc5ce062d4d8545323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>258c0e2926cc21629989bee8a92ec86a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal2</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>47aba9b19bc2bef0be7183022567e3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal2</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>a634515507f2ea4a35584e12e2dc92e7</anchor>
      <arglist>(const signal2 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>d06064d30a042b0e4e71ac05243830c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>74d1f82b0f25ee5eec48b00f89bd08cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>a9518c9bc614d6e23499e4e3e6dc64dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal2.html</anchorfile>
      <anchor>857021b91d39e058d69e7e7cba561d56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal3</name>
    <filename>classsigc_1_1signal3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>57c79755fc4c4b04196a9bf6742a0cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>49c13da0a30318464062f5b26ff87979</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>3bc0616e7ac933e702a889a2a84e92d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>8029a48126a2018947a2b6680ddabe6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>60e1ef95f82cd8981d61576d1e3f8e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>cc453f0d5fc7f277494b2d6e737f6f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>4ba3eb58c4c5ac2c25f49c48fd0af264</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>3eae0b3796b2736be847f33a5124aacd</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>85f1768341d975b5b81418ac774b47d8</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>4e0e9364afa1d0f23cead97c719e62c0</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor3&lt; result_type, signal3, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take, typename type_trait&lt; T_arg3 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>43ac12ebc85a72235f959f8dd72a5369</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>b9606b708078956a758b81503f956bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>ae26e88b26bb928f4931e2fc8668bb3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal3</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>52731959f272612fd6abfe8850c5c8cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal3</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>fe2c4320927b403b011a2538317e6c70</anchor>
      <arglist>(const signal3 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>bcd41852d5cae50c8b7558a6b34ae87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>4c10d68dc1b800c7ce359e1f83be3022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>f5f45ca94ee1171066895124045c266e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg3</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>dc22206c2be761596564073ac3a51bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal3.html</anchorfile>
      <anchor>34ae16700a301886fd776a72ae875ec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal4</name>
    <filename>classsigc_1_1signal4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>f32418ba14001a63d28af08abb7407f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>f3b67a976dba41d102d27b2004ad70c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>0ad0f56a43825c6d77d36dd2f06ef828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>31e8354263a3097bba9c63b8494143f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>3d2626edc726047c04c8fe5b9824b958</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>1395da7d3283b0166af135193a4047c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>555ce030884fdf2bde788b75db01bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>5fdb6df3cf74f5c96fb6319eef4d0a39</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>9e0f06318470c16279cd7f56cc5c2bc1</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>c1efa42f5753dbe3e0c0313ee087c8a6</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor4&lt; result_type, signal4, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take, typename type_trait&lt; T_arg3 &gt;::take, typename type_trait&lt; T_arg4 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>669d1b2bf4a8af809a719b637a3b3ef6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>e490f1a6802c40a4c3b12e1580520c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>3336c8164cb70eae8f5de655f55ed29f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal4</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>2d469f516a9edac2b20d7f6cf46e821a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal4</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>2d29b39c12c6c014ed7166190e9c8e22</anchor>
      <arglist>(const signal4 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>e419457f53f8b00ce649d24ab197db47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>5e798af75ab8c107d1a699cb03307a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>e82d0663826eee50d33268b3dd074290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg3</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>799aa64e14344a6656b1005d42a7bbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg4</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>ccaaf071f9f4d420a202240a07369232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal4.html</anchorfile>
      <anchor>543e9831a1a1bffefc7421a50aa4c36f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal5</name>
    <filename>classsigc_1_1signal5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>ceb959897dcf8e3c7209c283d4848b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>83371ad9149475a300527c62e9206683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>4c79ab227fc3b31b990e925636f7788e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>cee689b441305fcee098345729fc28f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>17e79eed46f178a12d2751eddcf85290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>b684cb9920d0f7949f28c03d50b58275</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>d5ba46907fe236e0cff806888696d569</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>057789cc27a920700e240f8f3d78dd65</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>db7ae6a12e70f96bfdf2b0d36ba0d974</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>17d8e59e84767681fc29d679287f7770</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor5&lt; result_type, signal5, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take, typename type_trait&lt; T_arg3 &gt;::take, typename type_trait&lt; T_arg4 &gt;::take, typename type_trait&lt; T_arg5 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>811b18f85f44b6d41f90d564856e9a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>d6a4ae2a214d8710be6e36bb425587fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>84f5c68895c8d6da07c1caa00088617b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal5</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>f717d1a6fd8612da84dce33fe6640b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal5</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>7885861b9cdbacbe2d58a13cd96ec265</anchor>
      <arglist>(const signal5 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>49d0beabc4898bb82b392b052eda5599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>4972bded2721f20cce07c321aa6b76c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>3dbd409efdb36a98d0f488cdd892f18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg3</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>4d1d4a013954078c775172e6613c207d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg4</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>51d9e649ea99832281227619f4c7ab9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg5</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>0a3bad47e4f10ab64ddced8308e6f172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal5.html</anchorfile>
      <anchor>803e129debb689c881efe4d993cf4065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal6</name>
    <filename>classsigc_1_1signal6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>56f1acca230e676dae665d41a10acc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>ecf1de06927caea9a7bfd4acb00edbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>0e4fea9bd1ed35f9d60bbc26c4fae007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>1acee11287974cdac1bc63c856e5331d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>c88a9c4e9bab5ad04c66d3f5d3978f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>79b741b3f0def8f52fc185ad50b60673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>ff490e7f75a83aa2f324a859f9071a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>66c302607cf4fb74f5d3352f9c394c9b</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>804470d76f7df1e58ff5334b2a16735f</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>2c2c5ecc4fc0157d337eea628a9ac214</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor6&lt; result_type, signal6, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take, typename type_trait&lt; T_arg3 &gt;::take, typename type_trait&lt; T_arg4 &gt;::take, typename type_trait&lt; T_arg5 &gt;::take, typename type_trait&lt; T_arg6 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>eee428133efe156ad9cafa21d9d073ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>f44115a7bfa4586fc5312259a1df9567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>33206535cad2a3c5d32d8391904c9524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal6</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>f7f529bbd9cf26d468ed18426b9b51ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal6</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>0244dde296bd892c590c86ced5281e3b</anchor>
      <arglist>(const signal6 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>f7a5eab7d9c6ab8eea1346d826f05af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>2af96f47b0733133d3c32c2783f9908f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>9385aef636c9dbeb4499eb7cf9ef3bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg3</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>e584a6c0986b7508f85aebda47cb4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg4</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>5e21dab00667cf9c903d0b83e7804efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg5</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>551e5ddf40ec7f5c0bbae48c147cc494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg6</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>cd676843c7b53c4e159e90030621672a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal6.html</anchorfile>
      <anchor>81135b97b707642a6b63a6c1963efe3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal7</name>
    <filename>classsigc_1_1signal7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal_base</base>
    <member kind="typedef" protection="package">
      <type>emitter_type::result_type</type>
      <name>result_type</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>5a75d73a254cf91a0f3ad1cd3545e29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_type</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>0e460927cf6ace4e195cf61f937d1ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list&lt; slot_type &gt;</type>
      <name>slot_list_type</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>79686c2174ab01dc23394953955ff003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>bc62e52cc684f917577a2fe3cd914d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>6eef6225eba66a86dd32c3f3b79845f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>59c9c9fee7a98528839df592241351a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>slot_list_type::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>d1ba32ad7dae0c05a4012ada78077505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator</type>
      <name>connect</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>dc55ac9b0f935fd87a67904022e03cb2</anchor>
      <arglist>(const slot_type &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>emit</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>5ee8eaa67f05f84ee185841142a34fb0</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>11b73bd2c5d40e02eab78b38ce0d097d</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>bound_const_mem_functor7&lt; result_type, signal7, typename type_trait&lt; T_arg1 &gt;::take, typename type_trait&lt; T_arg2 &gt;::take, typename type_trait&lt; T_arg3 &gt;::take, typename type_trait&lt; T_arg4 &gt;::take, typename type_trait&lt; T_arg5 &gt;::take, typename type_trait&lt; T_arg6 &gt;::take, typename type_trait&lt; T_arg7 &gt;::take &gt;</type>
      <name>make_slot</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>da63760137aa8093676ae73c5c024540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>68153d9079b4881352113079cd6216f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>const slot_list_type</type>
      <name>slots</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>89e3cab128cf4768f1e95e09bf66e088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal7</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>b6d54db53a164fb459fcb342d4b45ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal7</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>12d6e064d0a5c2a8c09d60a64184a823</anchor>
      <arglist>(const signal7 &amp;src)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>6393800023d4300886ce7d9abb2e42f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg1</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>18784404e6e65fdbeac0757cec608146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg2</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>0b3938038b267f9b1b36c0b14ae4509f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg3</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>da093373e39d6532dd9fd2d04b62bd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg4</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>d5b5a3312be867a2b8f13847e013f264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg5</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>0fbf6459a10fa1e00c0f3e23576a2c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg6</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>9dcfea35c2695bc3a40a52df00c9119c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>T_arg7</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>98f7754ea95950ddf20467143d190be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>T_accumulator</type>
      <name>emitter_type</name>
      <anchorfile>classsigc_1_1signal7.html</anchorfile>
      <anchor>c740975dea0e023861566863859a5b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal</name>
    <filename>classsigc_1_1signal.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <base>sigc::signal7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal.html</anchorfile>
      <anchor>50432d1aebfbee5ef17a3f434d0c50bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal.html</anchorfile>
      <anchor>271b486daa2bf801ed7d019da9aa33a1</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal::accumulated</name>
    <filename>classsigc_1_1signal_1_1accumulated.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal7</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_1_1accumulated.html</anchorfile>
      <anchor>46bed3515606e0a5807f08e239891ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_1_1accumulated.html</anchorfile>
      <anchor>032428476a190d9dea6313f70e5b8a10</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <base>sigc::signal0&lt; T_return, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>69bd320a61ade13046ae3ed20498ab83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3dcbc7a6481f46f08a366e489876a7a0</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, nil, nil, nil, nil, nil, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal0</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>54763bd7352a9c84b5e5956b4f65c914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>1cea5890a6ac54f475ae28062c99e4f4</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <base>sigc::signal1&lt; T_return, T_arg1, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>7561df6caf1f508eff71f035db8260c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>e55caf393287987076a093a17cd2a272</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, nil, nil, nil, nil, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal1</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>772b7939dc0552087c6b52a98d97eab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>94b30a9ffefefc43cb79b4f30ad65237</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <base>sigc::signal2&lt; T_return, T_arg1, T_arg2, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3ad9be2894fd3f78bfde9488207ff502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>199611dacb9e03614c9203ad27597667</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, nil, nil, nil, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal2</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>83f917545362d71b7d08fee23e619eaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_00_01nil_00_01nil_00_01nil_00_01nil_01_4_1_1accumulated.html</anchorfile>
      <anchor>a462577f7f52f54b2bf2c87cbb7aa9bc</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <base>sigc::signal3&lt; T_return, T_arg1, T_arg2, T_arg3, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>3866d625025ecae063d59e81f86ec836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>80e31f482db26fc380264b7dea1041d7</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, nil, nil, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01852c349c390cefa04662a850d84c0a94.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal3</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01852c349c390cefa04662a850d84c0a94.html</anchorfile>
      <anchor>86aae36f669ce2f9d7f1f0ac9a696f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_00_01nil_00_01852c349c390cefa04662a850d84c0a94.html</anchorfile>
      <anchor>b20d2ddd7330aa974d61ddec753413b6</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <base>sigc::signal4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>76731fb4092ef8d9b459c8c32c5433dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>299bbe1b511723c6c854e516aaf0a926</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_0d729ce48b1328d982e0ee754652fed04.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal4</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_0d729ce48b1328d982e0ee754652fed04.html</anchorfile>
      <anchor>994494b04443cda13eef81e13321db83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_0d729ce48b1328d982e0ee754652fed04.html</anchorfile>
      <anchor>2d21852efcef1d59cc96c8c873e6ce37</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <base>sigc::signal5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>5e64ba037f3567ab5dbb49811a447b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_00_01nil_01_4.html</anchorfile>
      <anchor>2f45d321526546618c56c1d5400507d2</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arcf6cb51783c363bfae7c4a91d9685109.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal5</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arcf6cb51783c363bfae7c4a91d9685109.html</anchorfile>
      <anchor>0b18943e223f1ae150ee5541673a2e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arcf6cb51783c363bfae7c4a91d9685109.html</anchorfile>
      <anchor>3e41ce87d15bc90960abd857ca80aed9</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <base>sigc::signal6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</base>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>1dd1e779ef29d6df2b570847c4f2819e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01T__arg6_00_01nil_01_4.html</anchorfile>
      <anchor>a070e4d37a8a06ef9fc02256d236472c</anchor>
      <arglist>(const signal &amp;src)</arglist>
    </member>
    <class kind="class">sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;::accumulated</class>
  </compound>
  <compound kind="class">
    <name>sigc::signal&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;::accumulated</name>
    <filename>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__are33def4d0c1a12dcbfd220489302db67.html</filename>
    <templarg>T_accumulator</templarg>
    <base>sigc::signal6</base>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__are33def4d0c1a12dcbfd220489302db67.html</anchorfile>
      <anchor>0f2cc39e9f222a296072f8c05ad98796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>accumulated</name>
      <anchorfile>classsigc_1_1signal_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__are33def4d0c1a12dcbfd220489302db67.html</anchorfile>
      <anchor>239f7a4fefc7cb2cc6c4fb6c9c332d2f</anchor>
      <arglist>(const accumulated &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::signal_base</name>
    <filename>structsigc_1_1signal__base.html</filename>
    <base>sigc::trackable</base>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>ea0a19d1bfe7fd0f0e04668e6813d859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal_base</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>a6112fc84ae5bd06fb09a8fb0dfbba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal_base</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>aeb49371ba502691978e2f860117e3c3</anchor>
      <arglist>(const signal_base &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~signal_base</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>fa2e5807537c989b430015e5ae05a357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>signal_base &amp;</type>
      <name>operator=</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>90b36a7b33e107ce0af0de895e0df286</anchor>
      <arglist>(const signal_base &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>bc8fe88ca813837ff3fb3ef4ecb4e8a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>17597d66e680d222248c523985f0afd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>06e0889c75cccc15dcec71a48acae00d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator_type</type>
      <name>connect</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>5c89a76a27d69c512f554b841b1bd08a</anchor>
      <arglist>(const slot_base &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator_type</type>
      <name>insert</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>87da23ad801faa9e2b6b4be2a747e757</anchor>
      <arglist>(iterator_type i, const slot_base &amp;slot_)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>iterator_type</type>
      <name>erase</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>21efc57eea29c3139855909ad4807984</anchor>
      <arglist>(iterator_type i)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>internal::signal_impl *</type>
      <name>impl</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>b1b7d9bc2a59c4c67d0123a65a7baab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>c09db1be46a5bc15fc056e777c2ee832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>internal::signal_impl *</type>
      <name>impl_</name>
      <anchorfile>structsigc_1_1signal__base.html</anchorfile>
      <anchor>747d448c28fd256ef580d165eb69f17a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::trackable</name>
    <filename>structsigc_1_1trackable.html</filename>
    <member kind="function">
      <type></type>
      <name>trackable</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>09f5b2fe24c2ac1da8322ed0ea1553ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>trackable</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>7efefbcab4645648a366da3439242198</anchor>
      <arglist>(const trackable &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>trackable &amp;</type>
      <name>operator=</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>7494fbad23a65932ff1457d00d4edaf5</anchor>
      <arglist>(const trackable &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~trackable</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>75587da09e30031db7a2519843f1f4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>void</type>
      <name>add_destroy_notify_callback</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>b14931670837728e49bb5ca88fb16db5</anchor>
      <arglist>(void *data, func_destroy_notify func) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>void</type>
      <name>remove_destroy_notify_callback</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>8b9dffa8a50ff13ba33e6c7f10468e2b</anchor>
      <arglist>(void *data) const </arglist>
    </member>
    <member kind="function" protection="package">
      <type>void</type>
      <name>notify_callbacks</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>f2e23cfe7adc1ca844a3350bbac557cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1trackable.html</anchorfile>
      <anchor>4252ad5a7ba4e36581921749ce2ab9ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::type_trait</name>
    <filename>structsigc_1_1type__trait.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1type__trait.html</anchorfile>
      <anchor>e312a7f4e2466a20c9eec73136cd271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type &amp;</type>
      <name>pass</name>
      <anchorfile>structsigc_1_1type__trait.html</anchorfile>
      <anchor>ebfa426334f8de7b93031de35d2495e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_type &amp;</type>
      <name>take</name>
      <anchorfile>structsigc_1_1type__trait.html</anchorfile>
      <anchor>191a797ea6e2d851287b8a87b6305157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1type__trait.html</anchorfile>
      <anchor>326607e19653e2094262034f2aed0451</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::type_trait&lt; T_type[N]&gt;</name>
    <filename>structsigc_1_1type__trait_3_01T__type[N]_4.html</filename>
    <templarg>T_type</templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T_type *</type>
      <name>type</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type[N]_4.html</anchorfile>
      <anchor>cac14097ce3113948c5b85cc04210ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type *&amp;</type>
      <name>pass</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type[N]_4.html</anchorfile>
      <anchor>bfd06dd56be6fda2436e9e15acb1fc72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_type *&amp;</type>
      <name>take</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type[N]_4.html</anchorfile>
      <anchor>9cb9e2faaa68a89ef1a74b8b7c98d81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type **</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type[N]_4.html</anchorfile>
      <anchor>e72df00db2702679e9653c3d26e5f04f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::type_trait&lt; T_type &amp; &gt;</name>
    <filename>structsigc_1_1type__trait_3_01T__type_01_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type_01_6_01_4.html</anchorfile>
      <anchor>07466c8c7e5eb429759e9412225636a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type &amp;</type>
      <name>pass</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type_01_6_01_4.html</anchorfile>
      <anchor>1b24e79fed94df3fc0e7574e0ae1c991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type &amp;</type>
      <name>take</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type_01_6_01_4.html</anchorfile>
      <anchor>604c7ad05de42e3f9d28ab45c8d865b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1type__trait_3_01T__type_01_6_01_4.html</anchorfile>
      <anchor>97f7ab2233eabcbbd25ebab4a50c5ee9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::type_trait&lt; const T_type &amp; &gt;</name>
    <filename>structsigc_1_1type__trait_3_01const_01T__type_01_6_01_4.html</filename>
    <templarg>T_type</templarg>
    <member kind="typedef">
      <type>const T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1type__trait_3_01const_01T__type_01_6_01_4.html</anchorfile>
      <anchor>bb378de548c634f3b56dab5d4fbd1841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_type &amp;</type>
      <name>pass</name>
      <anchorfile>structsigc_1_1type__trait_3_01const_01T__type_01_6_01_4.html</anchorfile>
      <anchor>7b9cd2a3e6e7cf986e4e25e05c665c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_type &amp;</type>
      <name>take</name>
      <anchorfile>structsigc_1_1type__trait_3_01const_01T__type_01_6_01_4.html</anchorfile>
      <anchor>2c3a2a62adee114867045a7f77096435</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T_type *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1type__trait_3_01const_01T__type_01_6_01_4.html</anchorfile>
      <anchor>29b3ee172528ab2940d9731de9e4b132</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::type_trait&lt; void &gt;</name>
    <filename>structsigc_1_1type__trait_3_01void_01_4.html</filename>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structsigc_1_1type__trait_3_01void_01_4.html</anchorfile>
      <anchor>dd6e3395f22d8169275eafdbb3035fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pass</name>
      <anchorfile>structsigc_1_1type__trait_3_01void_01_4.html</anchorfile>
      <anchor>b5d97b4ec126f3afeaf67e9a6b05b0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>take</name>
      <anchorfile>structsigc_1_1type__trait_3_01void_01_4.html</anchorfile>
      <anchor>40d187392469ee48d24838ef38531b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>pointer</name>
      <anchorfile>structsigc_1_1type__trait_3_01void_01_4.html</anchorfile>
      <anchor>69243f1c0d0e537e066632c1b6a107f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::is_base_and_derived</name>
    <filename>structsigc_1_1is__base__and__derived.html</filename>
    <templarg>T_base</templarg>
    <templarg>T_derived</templarg>
    <member kind="function">
      <type>void</type>
      <name>avoid_gcc3_warning_</name>
      <anchorfile>structsigc_1_1is__base__and__derived.html</anchorfile>
      <anchor>549da4a5cdd426b53fe766cebfc3cadd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structsigc_1_1is__base__and__derived.html</anchorfile>
      <anchor>639a5267d6ab0a754da024d0bffa2d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>internal_class</name>
      <anchorfile>structsigc_1_1is__base__and__derived.html</anchorfile>
      <anchor>505546af289136b005b412f8fc041e13</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::is_base_and_derived::big</class>
    <class kind="struct">sigc::is_base_and_derived::internal_class</class>
  </compound>
  <compound kind="struct">
    <name>sigc::is_base_and_derived&lt; T_base, T_base &gt;</name>
    <filename>structsigc_1_1is__base__and__derived_3_01T__base_00_01T__base_01_4.html</filename>
    <templarg>T_base</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structsigc_1_1is__base__and__derived_3_01T__base_00_01T__base_01_4.html</anchorfile>
      <anchor>48d192adf0841f00c675f4bc10830317</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_00_01false_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_00_01false_01_4.html</anchorfile>
      <anchor>7125aa5f20ccd3c31378829de9b146b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_00_01false_01_4.html</anchorfile>
      <anchor>35a41e4207680ace2e2ae12b425062c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)() const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_01const_00_01false_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_01const_00_01false_01_4.html</anchorfile>
      <anchor>5e6c22eeb0d427c2e70c604df55feb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor0&lt; T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)()_01const_00_01false_01_4.html</anchorfile>
      <anchor>bf332071cfb8eeb037d413710b7dde22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_00_01false_01_4.html</anchorfile>
      <anchor>ed5751daec42b1de216e87c8759bec4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor1&lt; T_arg1, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_00_01false_01_4.html</anchorfile>
      <anchor>77444d3aed40a2ea9953d26974c200fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_01const_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_01const_00_01false_01_4.html</anchorfile>
      <anchor>1ee6430395c6d7eae8e186d67f8a4d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor1&lt; T_arg1, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1)_01const_00_01false_01_4.html</anchorfile>
      <anchor>ae89e3e57dad73322d3af46618030831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</anchorfile>
      <anchor>9415c7ea4316bf082152a463373c1d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor2&lt; T_arg1, T_arg2, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_00_01false_01_4.html</anchorfile>
      <anchor>d3358a22c1acf61702aa6c4145e4a477</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_01const_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_01const_00_01false_01_4.html</anchorfile>
      <anchor>d4a446c6f5c5b30aee0e367de4c0b6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor2&lt; T_arg1, T_arg2, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2)_01const_00_01false_01_4.html</anchorfile>
      <anchor>6ae684e50d19c0664129daf2d366f5b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</anchorfile>
      <anchor>7ed8daeade390185579f0d363b19c703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor3&lt; T_arg1, T_arg2, T_arg3, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_00_01false_01_4.html</anchorfile>
      <anchor>735e3b4703eba18ce29370310a7d7699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_01const_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_01const_00_01false_01_4.html</anchorfile>
      <anchor>999f7fab1861f18e4b1ab9b9fae422cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor3&lt; T_arg1, T_arg2, T_arg3, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3)_01const_00_01false_01_4.html</anchorfile>
      <anchor>006bf7bbe804c687271bb1a8ec97b76b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</anchorfile>
      <anchor>c1f91e1add0363ec746e29ec49b165a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4)_00_01false_01_4.html</anchorfile>
      <anchor>77a1b285a647f66f2b5dfa7e55af1b78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_015071c56f0e0d7a7d55483dbb2eb6cb42.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_015071c56f0e0d7a7d55483dbb2eb6cb42.html</anchorfile>
      <anchor>1f1ffea580b293824743f538eebcf068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor4&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_015071c56f0e0d7a7d55483dbb2eb6cb42.html</anchorfile>
      <anchor>adfda0bfecb6b15d05cd62d7c56d338d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012f3cd1a918b83864a027f5dde7e6e822.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012f3cd1a918b83864a027f5dde7e6e822.html</anchorfile>
      <anchor>7a04778030bfc830afb466741af391e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012f3cd1a918b83864a027f5dde7e6e822.html</anchorfile>
      <anchor>0f71ec39e41ca95cbd2c72e1cfe4291b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012c47e7de3cf754c7c14b6e1819d0803c.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012c47e7de3cf754c7c14b6e1819d0803c.html</anchorfile>
      <anchor>1dc6059170b7c74623931f04ee96c886</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor5&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_012c47e7de3cf754c7c14b6e1819d0803c.html</anchorfile>
      <anchor>48e33b911c8c7bca13e4a8eca966d71e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_0111aed1ad908b410000f77ed067bc242e.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_0111aed1ad908b410000f77ed067bc242e.html</anchorfile>
      <anchor>00bd8a4a6bf46d5596d9f33ac2d26adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_0111aed1ad908b410000f77ed067bc242e.html</anchorfile>
      <anchor>6b91c2ed7b798a188eec75f0e95a4e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_017b31a2c9fdd955c87a204ef3048b4df3.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_017b31a2c9fdd955c87a204ef3048b4df3.html</anchorfile>
      <anchor>36b4b88bd29ce1c61896649d3790a9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor6&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_017b31a2c9fdd955c87a204ef3048b4df3.html</anchorfile>
      <anchor>d2fceb3adc7b090099d65dfe5666c8c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7), false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01c07573bd5b0df80fd2a3218f3a082998.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01c07573bd5b0df80fd2a3218f3a082998.html</anchorfile>
      <anchor>957b51cfaa59497623a46ac94bc914f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mem_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01c07573bd5b0df80fd2a3218f3a082998.html</anchorfile>
      <anchor>040ff2eeb074c17cffa49aa776ab300b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::functor_trait&lt; T_return(T_obj::*)(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const, false &gt;</name>
    <filename>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01e1b17a8788250985f9518122bdd7a5db.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_return</templarg>
    <templarg>T_obj</templarg>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01e1b17a8788250985f9518122bdd7a5db.html</anchorfile>
      <anchor>7ffd3537cec1b4051afeb79ca2120616</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_mem_functor7&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_return, T_obj &gt;</type>
      <name>functor_type</name>
      <anchorfile>structsigc_1_1functor__trait_3_01T__return(T__obj_1_1_5)(T__arg1_00_01T__arg2_00_01T__arg3_00_01e1b17a8788250985f9518122bdd7a5db.html</anchorfile>
      <anchor>9ec22d38a9fb3d980c10a52d94803c6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sigc::internal</name>
    <filename>namespacesigc_1_1internal.html</filename>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, true &gt;</class>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, false &gt;</class>
    <class kind="struct">sigc::internal::lambda_select1</class>
    <class kind="struct">sigc::internal::lambda_select2</class>
    <class kind="struct">sigc::internal::lambda_select3</class>
    <class kind="struct">sigc::internal::lambda_select4</class>
    <class kind="struct">sigc::internal::lambda_select5</class>
    <class kind="struct">sigc::internal::lambda_select6</class>
    <class kind="struct">sigc::internal::lambda_select7</class>
    <class kind="struct">sigc::internal::typed_slot_rep</class>
    <class kind="struct">sigc::internal::slot_call0</class>
    <class kind="struct">sigc::internal::slot_call1</class>
    <class kind="struct">sigc::internal::slot_call2</class>
    <class kind="struct">sigc::internal::slot_call3</class>
    <class kind="struct">sigc::internal::slot_call4</class>
    <class kind="struct">sigc::internal::slot_call5</class>
    <class kind="struct">sigc::internal::slot_call6</class>
    <class kind="struct">sigc::internal::slot_call7</class>
    <class kind="struct">sigc::internal::slot_rep</class>
    <class kind="struct">sigc::internal::slot_do_bind</class>
    <class kind="struct">sigc::internal::slot_do_unbind</class>
    <class kind="struct">sigc::internal::slot_iterator_buf</class>
    <class kind="struct">sigc::internal::slot_iterator_buf&lt; T_emitter, void &gt;</class>
    <class kind="struct">sigc::internal::signal_emit0</class>
    <class kind="struct">sigc::internal::signal_emit0&lt; T_return, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit0&lt; void, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit1</class>
    <class kind="struct">sigc::internal::signal_emit1&lt; T_return, T_arg1, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit1&lt; void, T_arg1, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit2</class>
    <class kind="struct">sigc::internal::signal_emit2&lt; T_return, T_arg1, T_arg2, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit2&lt; void, T_arg1, T_arg2, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit3</class>
    <class kind="struct">sigc::internal::signal_emit3&lt; T_return, T_arg1, T_arg2, T_arg3, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit3&lt; void, T_arg1, T_arg2, T_arg3, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit4</class>
    <class kind="struct">sigc::internal::signal_emit4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit4&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit5</class>
    <class kind="struct">sigc::internal::signal_emit5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit5&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit6</class>
    <class kind="struct">sigc::internal::signal_emit6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit6&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit7</class>
    <class kind="struct">sigc::internal::signal_emit7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_emit7&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</class>
    <class kind="struct">sigc::internal::signal_impl</class>
    <class kind="struct">sigc::internal::signal_exec</class>
    <class kind="struct">sigc::internal::temp_slot_list</class>
    <class kind="struct">sigc::internal::trackable_callback</class>
    <class kind="struct">sigc::internal::trackable_callback_list</class>
    <class kind="struct">sigc::internal::with_type&lt; false, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::with_type&lt; true, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::limit_derived_target</class>
    <class kind="struct">sigc::internal::with_type_pointer&lt; false, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::with_type_pointer&lt; true, T_type, T_limit &gt;</class>
    <class kind="struct">sigc::internal::limit_derived_target&lt; T_target *, T_action &gt;</class>
    <member kind="typedef">
      <type>void *(*</type>
      <name>hook</name>
      <anchorfile>namespacesigc_1_1internal.html</anchorfile>
      <anchor>90eb672083d15b8a9acea95db57987f5</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>func_destroy_notify</name>
      <anchorfile>namespacesigc_1_1internal.html</anchorfile>
      <anchor>38b13093b4c9ccd2311a37b00f1113b8</anchor>
      <arglist>)(void *data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_core&lt; T_type, true &gt;</name>
    <filename>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</filename>
    <templarg>T_type</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>T_type::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>15075c76cbec194ed975fcf5660d53cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_type</type>
      <name>lambda_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>cc78dd35c9464e1e56731c3e37f7a91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>576742eaf5f8fd62fad5a5efc0cdc5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>2140cf8238c0d7e21ac4e3dad1e9f12c</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>f71e142c4d636377de14613242125d02</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>ef04d111842f2a4c13062d24a0bed497</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>67e74d9eff8612081fefe9e5537005bb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>bb2bc597d34ee6a4754e6b046d7b35eb</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>80f902fb8677733e5d7b50e1e2e4d8e5</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>8609c4c61ea701fb6723d6d2c81969ad</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>88229f1b79eb5f136f167abd8b43e5d5</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>2be13a00a8767df96c7af1da51ab65b2</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>fa1103e2c22461c927afe9fdf14190ea</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>b91a580288657442ca838e37335cd307</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>c472f3caed99a43e6edfe225b083dfb0</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>b7bbe3ea920c84381d6123a49d010ae3</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>deduce_result_type&lt; T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;::type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>3624829f8e61e962e4612fc64c0bb763</anchor>
      <arglist>(T_arg1 _A_1, T_arg2 _A_2, T_arg3 _A_3, T_arg4 _A_4, T_arg5 _A_5, T_arg6 _A_6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_core</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>bd44e672bcfeda0036137f01b70ab0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_core</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>6e70b8575bfca4656bcf87ec50f7de22</anchor>
      <arglist>(const T_type &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>T_type</type>
      <name>value_</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4.html</anchorfile>
      <anchor>85a9c5d0456098d503bfef32087b7a72</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, true &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_core&lt; T_type, true &gt;::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_type::template deduce_result_type&lt; typename type_trait&lt; T_arg1 &gt;::pass, typename type_trait&lt; T_arg2 &gt;::pass, typename type_trait&lt; T_arg3 &gt;::pass, typename type_trait&lt; T_arg4 &gt;::pass, typename type_trait&lt; T_arg5 &gt;::pass, typename type_trait&lt; T_arg6 &gt;::pass, typename type_trait&lt; T_arg7 &gt;::pass &gt;::type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01true_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>d6c97edf0930d86662ec5c92793414ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_core&lt; T_type, false &gt;</name>
    <filename>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</filename>
    <templarg>T_type</templarg>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>T_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>1c9416225c064a143aacc5495dd5a76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lambda&lt; T_type &gt;</type>
      <name>lambda_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>dba544b8610b24ac69f6b7c18bda3c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>4178ffc07211daa2f26ba5bb85571eff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>5eff47f85018323cb6923e69eb9131a6</anchor>
      <arglist>(T_arg1) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>bb0b0897015c59d178aba7fb27c503c6</anchor>
      <arglist>(T_arg1) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>bad36bae88032ff3dcbe589d084615be</anchor>
      <arglist>(T_arg1, T_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>d815bdf4eace1aae0367ea71a47d2781</anchor>
      <arglist>(T_arg1, T_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>f3f3f76df94a0d81942fe9387a61e1f4</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>52ba127ea2ba6145b110d8c12d91fab2</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>49a351710b6e9105e099ef58cdc063b3</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>988ab901f7bbcbe2c1efdf14966c4c5f</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>b34e560ae13443849e4fe0d322c88778</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>abe9f38227e7a99fb322bc6bcbb21dc7</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>4ef1fe8529b8b3fd35b8512e5c88258a</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>2cd1e30b7bf205a374dc8260ab7124e6</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>6bc96007f7c6c4b130d5663c344b96f9</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>1ebdff965bdc9695a474af9f4be33df2</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lambda_core</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>ef73e109a6197db3602036457fae042c</anchor>
      <arglist>(typename type_trait&lt; T_type &gt;::take v)</arglist>
    </member>
    <member kind="variable">
      <type>T_type</type>
      <name>value_</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4.html</anchorfile>
      <anchor>0522cab1dc6c98e3577ccbeea30f4339</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_core&lt; T_type, false &gt;::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_core&lt; T_type, false &gt;::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_type</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__core_3_01T__type_00_01false_01_4_1_1deduce__result__type.html</anchorfile>
      <anchor>a6cf0e03f4dcd16c2892673d97c7a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select1</name>
    <filename>structsigc_1_1internal_1_1lambda__select1.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>d10b39b7f73c7cb370fcd26da9e08016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>6d5f2ac6b0300884f46abc09b790dd06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>683989e4b639804ff0da8a3982024cbd</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>9752a50cc29089d3f8fb182a1809168d</anchor>
      <arglist>(T_arg1 _A_1) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>c6afe6037e72a9d51c961fc8476b5157</anchor>
      <arglist>(T_arg1 _A_1, T_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>430fd0ce6297a26526f3dc7237fde811</anchor>
      <arglist>(T_arg1 _A_1, T_arg2) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>ddea794bffab505dd263c64cd1a8436c</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>bb8487ed83bbdf35c6adee2fcf568ef3</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>ec90dcbfb563ab1d3a42a219b2d3c2b8</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>28c18a9c5956c594b90401a75c5c2445</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>fe267ac46464e3bc07183eda2c0804e5</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>e9145388bd183afb92a29ba435f6d3fc</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>d73a25c869582b71dbfe2caca28406bc</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>ebbe76caa818dec7c21dace6290ab189</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>388c420e82ed3a39707e8aeee8cd5fdc</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg1</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1.html</anchorfile>
      <anchor>51d0e0f154b8bbe639604f1ce767ff1d</anchor>
      <arglist>(T_arg1 _A_1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select1::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select1::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select1_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg1</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select1_1_1deduce__result__type.html</anchorfile>
      <anchor>872d0fbea43197a123a22b8561dc2444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select2</name>
    <filename>structsigc_1_1internal_1_1lambda__select2.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>9ea2100a6745304b792bb46698cceb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>238a9bc77efa5b06081ae4efde3fad93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>15a5352fa7a999b4dc18e02c19fc1044</anchor>
      <arglist>(T_arg1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>6487fe7de5ad525382746d9a41a573ee</anchor>
      <arglist>(T_arg1, T_arg2 _A_2) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>328711bd80910b086d8dd70d43d8f364</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>a896625112d8175975248c24c8d29b13</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>4e15d1573e503eeb59f239149df0b276</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>e0923dfc68790665ea0aa0c8d446fd34</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>815cd9616c5300dbeb80f0d5f7bc7b8b</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>4816b054706ee87aa8f828a1f9576145</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>e01aeb196a0d90a82bacd5d01f366207</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>4d3c02f3f19932301e0f575a83e5b015</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>3ba68555f88c7b1e5095d30a58776ea9</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg2</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2.html</anchorfile>
      <anchor>4b6c133e401947d526194c2114e73adf</anchor>
      <arglist>(T_arg1, T_arg2 _A_2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select2::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select2::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select2_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg2</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select2_1_1deduce__result__type.html</anchorfile>
      <anchor>c3e1b4e4bd7203f5a812985edd912530</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select3</name>
    <filename>structsigc_1_1internal_1_1lambda__select3.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>1f6e52b6f494ac93036bde9415a530a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>3abd19dcf653565671f213324f550807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>2068d374b44cae24d06c2437f178865d</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>113d758f7a29d544acaf319ab322c589</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>f1f8162ff24121bd4d2eac863cfb6e27</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>c0f39e80c4d0c93523d8ac0ee328dfcd</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>c06cf84a90ec03ad14a0830563835604</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>a30ac10100b424d9c15e1f9e91565403</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>330cd8f3f95e0594784b203538894784</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>55272d64caaca9c4ad8f706cd2da1715</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>ad9b3d1eec6889d3292d52fa2ba350af</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg3</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3.html</anchorfile>
      <anchor>d7bccde4c9a157b08a08a2f8055596d9</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3 _A_3, T_arg4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select3::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select3::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select3_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg3</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select3_1_1deduce__result__type.html</anchorfile>
      <anchor>fec0bd580a651c0f547df03f870ce237</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select4</name>
    <filename>structsigc_1_1internal_1_1lambda__select4.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>68156fac91dc7990a47f61babc3d30d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>d4601b3ea137c4c90685dcaa2d04aed7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>e4bf494c346ff0358a53fef3cee6f461</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>82999d099c41d060b386eb846fe369e5</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>4704c39c0c7b9d7d4a8832096cdadabb</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>294cb8fb5bd89ec7f6b071a178cf1ada</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>f17b1831681f10a0ace9d5e326e453e4</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>ea8f2fe06a648ffc373eef821209ed5d</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>082c4545c466e33fb7684b584a09c0f0</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg4</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4.html</anchorfile>
      <anchor>16005aa56dd289e30ae45685a86e4ead</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4 _A_4, T_arg5, T_arg6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select4::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select4::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select4_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg4</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select4_1_1deduce__result__type.html</anchorfile>
      <anchor>19f953bc41b0580638be4630b70458d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select5</name>
    <filename>structsigc_1_1internal_1_1lambda__select5.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>675d3e292752230bfccf66c6ffabbd31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>7463c81dd1553ebe871f45eb3e3cded2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>2bef399efdef2453f58ee3f5257dae90</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>4b9b9fb1b4aeb286d41d1da5463bb022</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>7a6f29aba8ff373ff4137b09eaf210b4</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>2376640ef93f767005e9f190f3eab77a</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>d2b2a30b54383dfa94cec65083211146</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg5</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5.html</anchorfile>
      <anchor>e76deb006bf65b804b4f4f90f3bba215</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 _A_5, T_arg6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select5::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select5::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select5_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg5</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select5_1_1deduce__result__type.html</anchorfile>
      <anchor>5adfa45c51ce726d8fca95f523cb2071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select6</name>
    <filename>structsigc_1_1internal_1_1lambda__select6.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>1d7d8f57d2da3c6277cd9fcbf2aa5ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>5ecbdaa427fdc66480c7441eaae37d80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg6</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>dfc7ffec63725682590cc534523f625c</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg6</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>1aef48695495cb8f5928ca443447496a</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg6</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>bc7fa5f40ff14ce80f935e0137ddd164</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6, T_arg7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg6</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6.html</anchorfile>
      <anchor>e65ef27f0213662f8b309d6451723046</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 _A_6, T_arg7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select6::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select6::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select6_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg6</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select6_1_1deduce__result__type.html</anchorfile>
      <anchor>94c9ea5d74e5f35c821526deff234cfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select7</name>
    <filename>structsigc_1_1internal_1_1lambda__select7.html</filename>
    <base>sigc::lambda_base</base>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select7.html</anchorfile>
      <anchor>5fcacc75cc68c5e748c2c827694fdff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select7.html</anchorfile>
      <anchor>de37a5c6f73c5795d215de64a4196554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T_arg7</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select7.html</anchorfile>
      <anchor>77605c2c46d7d28cc3d0076e36ad8acd</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 _A_7) const </arglist>
    </member>
    <member kind="function">
      <type>T_arg7</type>
      <name>sun_forte_workaround</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select7.html</anchorfile>
      <anchor>f34f9a1e0bf18cbc235628f72421a1e1</anchor>
      <arglist>(T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 _A_7) const </arglist>
    </member>
    <class kind="struct">sigc::internal::lambda_select7::deduce_result_type</class>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::lambda_select7::deduce_result_type</name>
    <filename>structsigc_1_1internal_1_1lambda__select7_1_1deduce__result__type.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>T_arg7</type>
      <name>type</name>
      <anchorfile>structsigc_1_1internal_1_1lambda__select7_1_1deduce__result__type.html</anchorfile>
      <anchor>3d9b3552b33f01d67ecc7536724837e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::typed_slot_rep</name>
    <filename>structsigc_1_1internal_1_1typed__slot__rep.html</filename>
    <templarg>T_functor</templarg>
    <base>sigc::internal::slot_rep</base>
    <member kind="typedef">
      <type>typed_slot_rep&lt; T_functor &gt;</type>
      <name>self</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>4fdad532af1f1bd577e59ba2376e6af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adaptor_trait&lt; T_functor &gt;::adaptor_type</type>
      <name>adaptor_type</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>28e4646c8666714f3840a5179d9465e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>typed_slot_rep</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>358bc07ee1d399b311454d01442b2b97</anchor>
      <arglist>(const T_functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>typed_slot_rep</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>ce6447525c2083cf94dc2ab63b550ece</anchor>
      <arglist>(const typed_slot_rep &amp;cl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~typed_slot_rep</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>0da18e450556f55d4187980fef7996ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>destroy</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>657f34131dc07e26ba85f4e3bb27a7ed</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>dup</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>614e0c008fde885c99ca57bf91256099</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="variable">
      <type>adaptor_type</type>
      <name>functor_</name>
      <anchorfile>structsigc_1_1internal_1_1typed__slot__rep.html</anchorfile>
      <anchor>20a7d30427aeca24e959c9081b8a72ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call0</name>
    <filename>structsigc_1_1internal_1_1slot__call0.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call0.html</anchorfile>
      <anchor>5fb58d4c8ee6d220000e2478c8f3b0c3</anchor>
      <arglist>(slot_rep *rep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call0.html</anchorfile>
      <anchor>84d3d23607e2dae62bb64dd377603d96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call1</name>
    <filename>structsigc_1_1internal_1_1slot__call1.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call1.html</anchorfile>
      <anchor>d33cfb76f74b8a1eebdc783ac62a3c88</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call1.html</anchorfile>
      <anchor>2c85cb2944c5e67f61cfd0db3b7a816a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call2</name>
    <filename>structsigc_1_1internal_1_1slot__call2.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call2.html</anchorfile>
      <anchor>c5824f6261a2f2ba8854af31031cee6a</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call2.html</anchorfile>
      <anchor>e8c78dbf4c00e1126cdfb2c50ecf44b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call3</name>
    <filename>structsigc_1_1internal_1_1slot__call3.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call3.html</anchorfile>
      <anchor>efb40db0270562a546c8a017d40c15b7</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2, typename type_trait&lt; T_arg3 &gt;::take a_3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call3.html</anchorfile>
      <anchor>6aa4ca4a4788dbb3b4890f06c21703fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call4</name>
    <filename>structsigc_1_1internal_1_1slot__call4.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call4.html</anchorfile>
      <anchor>418b5455cbd22d478a9375d884e04ab4</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2, typename type_trait&lt; T_arg3 &gt;::take a_3, typename type_trait&lt; T_arg4 &gt;::take a_4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call4.html</anchorfile>
      <anchor>c840ae3bc366da3b4ae9f5e7416fce4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call5</name>
    <filename>structsigc_1_1internal_1_1slot__call5.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call5.html</anchorfile>
      <anchor>7026e4c6e71665286230ba54bd888997</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2, typename type_trait&lt; T_arg3 &gt;::take a_3, typename type_trait&lt; T_arg4 &gt;::take a_4, typename type_trait&lt; T_arg5 &gt;::take a_5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call5.html</anchorfile>
      <anchor>3cbdafc13a2a560c487a7e823cc51a71</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call6</name>
    <filename>structsigc_1_1internal_1_1slot__call6.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call6.html</anchorfile>
      <anchor>33a6f5b3b5ab2ba3c2e979d2a3614882</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2, typename type_trait&lt; T_arg3 &gt;::take a_3, typename type_trait&lt; T_arg4 &gt;::take a_4, typename type_trait&lt; T_arg5 &gt;::take a_5, typename type_trait&lt; T_arg6 &gt;::take a_6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call6.html</anchorfile>
      <anchor>890d2359921e8407042a808660fe40a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_call7</name>
    <filename>structsigc_1_1internal_1_1slot__call7.html</filename>
    <templarg>T_functor</templarg>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="function" static="yes">
      <type>static T_return</type>
      <name>call_it</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call7.html</anchorfile>
      <anchor>a15c496502f38f995b873ad9119d3350</anchor>
      <arglist>(slot_rep *rep, typename type_trait&lt; T_arg1 &gt;::take a_1, typename type_trait&lt; T_arg2 &gt;::take a_2, typename type_trait&lt; T_arg3 &gt;::take a_3, typename type_trait&lt; T_arg4 &gt;::take a_4, typename type_trait&lt; T_arg5 &gt;::take a_5, typename type_trait&lt; T_arg6 &gt;::take a_6, typename type_trait&lt; T_arg7 &gt;::take a_7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hook</type>
      <name>address</name>
      <anchorfile>structsigc_1_1internal_1_1slot__call7.html</anchorfile>
      <anchor>78ab7d4593e41f797f60b7ce9ebcdf7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_rep</name>
    <filename>structsigc_1_1internal_1_1slot__rep.html</filename>
    <base>sigc::trackable</base>
    <member kind="function">
      <type></type>
      <name>slot_rep</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>42acb490363be17dfdb5232afcac9915</anchor>
      <arglist>(hook call__, hook destroy__, hook dup__)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~slot_rep</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>53804f43b458e79ea8531d5031327a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>155c710631dfc08cfddf9dd3a82178d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_rep *</type>
      <name>dup</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>6b822aeb458fcc3e8fe388f2bf274d7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parent</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>03c2ff727f790261680a3b17d9fa5b2f</anchor>
      <arglist>(void *parent, hook cleanup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>b04da102080f9d5b9345e5c9c84a7a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>notify</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>595b38db0e50edef1bcf48f72758c388</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="variable">
      <type>hook</type>
      <name>call_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>545e69c90f8727d37d7aa989cd137550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hook</type>
      <name>destroy_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>5a018077dd2783098ae809e859df1a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hook</type>
      <name>dup_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>89e33ee22909573ae3417d36785d231b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hook</type>
      <name>cleanup_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>e7c4db95e3b8f481e24b66757f21b3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>parent_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__rep.html</anchorfile>
      <anchor>f79569389378f728a3b56d96a0af01ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_do_bind</name>
    <filename>structsigc_1_1internal_1_1slot__do__bind.html</filename>
    <member kind="function">
      <type></type>
      <name>slot_do_bind</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__bind.html</anchorfile>
      <anchor>8290864a4b9e7828edad27cf785a01f0</anchor>
      <arglist>(slot_rep *rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__bind.html</anchorfile>
      <anchor>a229fe2d34ef8f7e6b424b295bfdde2f</anchor>
      <arglist>(const trackable *t) const </arglist>
    </member>
    <member kind="variable">
      <type>slot_rep *</type>
      <name>rep_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__bind.html</anchorfile>
      <anchor>62f7858cb9a09f1d2656b5603d0a520d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_do_unbind</name>
    <filename>structsigc_1_1internal_1_1slot__do__unbind.html</filename>
    <member kind="function">
      <type></type>
      <name>slot_do_unbind</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__unbind.html</anchorfile>
      <anchor>5fe5b5799556bb39d173406e85891033</anchor>
      <arglist>(slot_rep *rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__unbind.html</anchorfile>
      <anchor>115760b7da0880359629e9679ef1cac9</anchor>
      <arglist>(const trackable *t) const </arglist>
    </member>
    <member kind="variable">
      <type>slot_rep *</type>
      <name>rep_</name>
      <anchorfile>structsigc_1_1internal_1_1slot__do__unbind.html</anchorfile>
      <anchor>2f1bc9e9432f2ff7aed1e7345da7378c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_iterator_buf</name>
    <filename>structsigc_1_1internal_1_1slot__iterator__buf.html</filename>
    <templarg>T_emitter</templarg>
    <templarg>T_result</templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>27821ef47e760ea62f8a22f16cc39ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>6770ad202aa85ae8b904bae837f0e90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>cdeb64097453c88bb04e8895e6d46c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_emitter</type>
      <name>emitter_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>a36b1614d912b2f513ac0a1a1dc97050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_result</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>8bdce488cf051bfff63e9ec4b15dbf5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_emitter::slot_type</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>83410dc4592eadf28ad7bf931dc3fdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>1e8e3af3edc8b14d8d9e22a206550560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator_buf</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>71acda6b2d95c1a4f850a2101d51a111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator_buf</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>a497e2c4ad555799dfce56a28af0d5a1</anchor>
      <arglist>(const iterator_type &amp;i, const emitter_type *c)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator *</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>d912f56985977904f0dfb250e147ff95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf &amp;</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>7ec6481a40ef7167f8ce8260a6d9adbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>8e986e6e04e02c98ba1c0503a1c93816</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf &amp;</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>6c28851f8bb2f604ef2ba328d09662f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>165d7656c4200cc997ccebd02b43d38c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>76b94379fa27e93d0869b82dbb3e536d</anchor>
      <arglist>(const slot_iterator_buf &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf.html</anchorfile>
      <anchor>e82303bc54df8bd3d340995cc1004aea</anchor>
      <arglist>(const slot_iterator_buf &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::slot_iterator_buf&lt; T_emitter, void &gt;</name>
    <filename>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</filename>
    <templarg>T_emitter</templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>b034cfb69e44d7c01f78ce7fd6f8aa48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>0808efda7d7dd224cf759da908118220</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>23beb2efd6e5ebd066dc8f9604c72c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_emitter</type>
      <name>emitter_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>594d72cd6d35e700bee5874f6dc6f378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>72a3e68b80ffeeb48f425324dce6f5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_emitter::slot_type</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>6c22133a8a3dbafec0e2580a8f41ec44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>6edcb2daf8febf281819de5c8a4248f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator_buf</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>05b43088df5d384c01d27e9548448d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>slot_iterator_buf</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>f439576e02a433da4d3fdfdab51b0139</anchor>
      <arglist>(const iterator_type &amp;i, const emitter_type *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator *</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>5cc7f38594db465b6708f0187cb18ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf &amp;</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>f31c7e111182268da41e74f189944b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf</type>
      <name>operator++</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>d35d1db6e101c09477c16c73393fd5a7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf &amp;</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>663b50d606978e1cb4d01ccca60d3d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>slot_iterator_buf</type>
      <name>operator--</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>ba5caa1a6d4ded3daaa2a0e85a455341</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>f001635195e14dc71d6611937f1aa431</anchor>
      <arglist>(const slot_iterator_buf &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structsigc_1_1internal_1_1slot__iterator__buf_3_01T__emitter_00_01void_01_4.html</anchorfile>
      <anchor>f1bd99308e3ef520dbdeedc37594b77a</anchor>
      <arglist>(const slot_iterator_buf &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit0</name>
    <filename>structsigc_1_1internal_1_1signal__emit0.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit0&lt; T_return, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>f6e4c0b49383a61d367c67ffe7663ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>62d7a0ea688df9a573151c5a2efe4022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>b7b8dd983c23e99ae054afb4f6044345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>002d682375446e704162a12b36aa0a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit0</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>6652b4c60183875d454fd91446dae701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>84039397f88b6759daf6c24721f22ab5</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>997240df636887245b7f02dedb036557</anchor>
      <arglist>(signal_impl *impl)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0.html</anchorfile>
      <anchor>a5641eb2cd9cb3f57f82c97c2cdf1050</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit0&lt; T_return, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <member kind="typedef">
      <type>signal_emit0&lt; T_return, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>84e31ca658a5686f037d7217e595ccd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>2de7c60d55aa5025e40a522b6454405f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>b0fcc24324aaf00f2c2a5ea07bfa1673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>36c87d9537ca343f3d3f964b0141351a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>ab29c9be36669961473c2765cdad2fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01T__return_00_01nil_01_4.html</anchorfile>
      <anchor>92e8f73d5d82794f2f361c30edbecf16</anchor>
      <arglist>(signal_impl *impl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit0&lt; void, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</filename>
    <member kind="typedef">
      <type>signal_emit0&lt; void, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>638b0c81070a3176028ec249fa055dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>905a6ac689a6d07f3587250e9d09d6e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>d4b07c948b26378090ad2af3041d3767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>f2c4395a9ba9ab2aa23756954f5e86da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>08d10d6207ca0b1bfc922c227bc09527</anchor>
      <arglist>)(slot_rep *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit0_3_01void_00_01nil_01_4.html</anchorfile>
      <anchor>e7644ef217d53e5d0ed14f180bb4d7ad</anchor>
      <arglist>(signal_impl *impl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit1</name>
    <filename>structsigc_1_1internal_1_1signal__emit1.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit1&lt; T_return, T_arg1, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>651ce153e192f524957a15e44b3793b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>5c35c1ead887916f920572a71f56ad5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>274decf98e25dee6964ff70e6bcbd8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>1bc3edfe1ce8b938fb1c52ac973ccaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit1</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>58708a4d34748d36d28fa35fa5094e2f</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>b277efc24018a1d37a3f7180847daa00</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>81b70ed4df3570b3bc9eba92e4571924</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>94bf108c9d4a910b798c60450fc83e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1.html</anchorfile>
      <anchor>2183d3647053a80ce8300d389ed62ac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit1&lt; T_return, T_arg1, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <member kind="typedef">
      <type>signal_emit1&lt; T_return, T_arg1, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>af4b663c14ce34736c52cceaf8d8a3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>6d39cd3f6fac564810286f5b898b0b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>8c67d626594da064aabe4262d4bdc026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>3175eaa7d9bce718ca02d24576e24655</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>ed2b6a3eb8c02f5b744f48999b2fc140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01T__return_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>d0acb082356c367001a18edbf9922493</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit1&lt; void, T_arg1, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <member kind="typedef">
      <type>signal_emit1&lt; void, T_arg1, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>8ac22253acbe2344dcc909a79e383d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>d965038f593b0018b35e5caadcd3108d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>a30b6afa03bc57da078fce9dcc758ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>1e69c986ce3a931157e198d92b9995f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>f291789d708792cf32e3c1862e5113fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit1_3_01void_00_01T__arg1_00_01nil_01_4.html</anchorfile>
      <anchor>16ed6044136f9e2191d31460b544bb47</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit2</name>
    <filename>structsigc_1_1internal_1_1signal__emit2.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit2&lt; T_return, T_arg1, T_arg2, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>3a34cd12d93445b0deb12a93ae53becd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>317732ece5456609e790b7c06dcb828e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>71f8a73564a69f77333b40ef0f12318b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>7baf6344f475f52cce9dd09d0a798923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit2</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>19e5584328e54a9491684705ce829144</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>e18ed20a89cdc11727940418d2538c98</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>5b42bd6bf7c8df006f6c4dfb2191f1f9</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>9be9f04f807be4d8920fe4dbbcc125ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>973b53521ac9e3f2b99dbedc9829fa1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2.html</anchorfile>
      <anchor>d7f1a11ee544c8d9497621f19c979280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit2&lt; T_return, T_arg1, T_arg2, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <member kind="typedef">
      <type>signal_emit2&lt; T_return, T_arg1, T_arg2, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>52c46dfd5537e2e1e4f94d4f0394fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>4874e1a0d6703012dfc6362deebd8744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>2f130a35cf01ea733300ad58d9179706</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>3eeaed82fbdacb402f586543a29cc88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>ae17183553bb763aa37f604c7624fceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01T__return_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>8587d41fa28a52487713c0abe68e7bf8</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit2&lt; void, T_arg1, T_arg2, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <member kind="typedef">
      <type>signal_emit2&lt; void, T_arg1, T_arg2, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>c6eec2ed8abdcf58c14096eb2eccd8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>2e0a706158746a59f5723b13dc7954c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>fce921cfc8a6fb9547849070194f59c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>e4f4004811c42d506abe23d40979e6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>0e31036b1c5f8822566315e4817f4617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit2_3_01void_00_01T__arg1_00_01T__arg2_00_01nil_01_4.html</anchorfile>
      <anchor>839e83832280fb5a6effe6b14dc33b5e</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit3</name>
    <filename>structsigc_1_1internal_1_1signal__emit3.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit3&lt; T_return, T_arg1, T_arg2, T_arg3, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>cffcfad6df74ddf8a80c567ebff5b5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>a3e7b467c2841d5110960382bb0deca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>9a21782c45461f6924440a2b46c3d8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>be139e0387eded87b52b98ce0858ea15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit3</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>1c5a74ebbede2c6830852667339b6425</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>0f68c6ff397ac1bb8f2d6b0f54c71d28</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>6eb59675a1d1e1d786c5a02305e5d357</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>dee81b6d9907018ce2c9105976dbfada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>cff02eea15c6f9117f834c86f8118d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>786543f648e160f312efe8f282c9dc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>_A_a3_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3.html</anchorfile>
      <anchor>a9f3d48a76e9ce6b0eb94b341f663ed3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit3&lt; T_return, T_arg1, T_arg2, T_arg3, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <member kind="typedef">
      <type>signal_emit3&lt; T_return, T_arg1, T_arg2, T_arg3, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>2b57fc61a60367c2464ac20fe3453374</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>9dd57b87b81e951d69c9d2cdb869d227</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>e612cfe8b7ffc6d50f0066515f0f3524</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>652ce22b9ba8938b863ad50fd90c76f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>89f7d1ad21250388fd12e730d7fb9240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>fb0c5a782ca5d8a23c81aa5c99846416</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit3&lt; void, T_arg1, T_arg2, T_arg3, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <member kind="typedef">
      <type>signal_emit3&lt; void, T_arg1, T_arg2, T_arg3, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>fe6c24f36f97f7be01c4cc7734754bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>3d4b22f3f6b76143c219718b8d6cf37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2, T_arg3 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>15bc18d1e110e9a4a5bfb47ff5b299ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>be33e825e34366426eebec18cab92405</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>7a1411e76dd4ab020927a176192a88a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit3_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01nil_01_4.html</anchorfile>
      <anchor>2e41667f0ea34e7eebe4936c56f0c5a9</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit4</name>
    <filename>structsigc_1_1internal_1_1signal__emit4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>91f1d185c7222031b63dacf1ad06bdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>313c5468529414024f6fdd00fcc0f55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>b173e3af1b6ea4f38b9a3461f942857d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>0c9377600bdc6991a8dbe1f60c946131</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit4</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>f8823405fd3a75991e43735b576edd5a</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>2c1004edafb9131d43c6caf8a2e1bb79</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>3ad9bf0724fc4b56fffff6400b6da50b</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>aabdbc47b27c7809d53f23e2e5d9577c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>39752b899dc610813d9fe97d200fc27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>a2132af0c09ac9df11d4794708d3ad9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>_A_a3_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>1f31df8c378a70f3551c42d9b376535f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>_A_a4_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4.html</anchorfile>
      <anchor>1fffee44719876f1c35d6ac41220da66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <member kind="typedef">
      <type>signal_emit4&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>484ad51cbfbcc06647f30e3ea624fa66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>784816cbbc6c54880c45f2ad45d9bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>e836ee28fe5da88383768ec14e012ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>531fc00ae9bdf8f0d01056e8ea9d811a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>b5e12ef5a00219e79b14acafb927cf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>fc445ae0ee6b3034b4fec9dcffbc18a3</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit4&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <member kind="typedef">
      <type>signal_emit4&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>386760a96d8737bb4821ed917d3d1a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>303a3f3e387a57f7a04c10fc0a239b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2, T_arg3, T_arg4 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>3129eb5e55bd0ffd8388dd497e65f7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>68c7a57db4cfa28bdcc6e42583d05578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>972ce0e5185da76da0f17eadb50f8f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit4_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01nil_01_4.html</anchorfile>
      <anchor>b252c53ee2bc733ef2001901525917a3</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit5</name>
    <filename>structsigc_1_1internal_1_1signal__emit5.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>9940fa4abaa9056d9b1ac29164b15248</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>654a71dafffcd0ee5ba54bffda090eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>a68034e52ec03083ccef60b993f510be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>954ed4f21db43aeb863b27a0800a80f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit5</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>effab9f23ad45fb0a666bf52213cd5c2</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>f80b8021db27e9b00beedd1509325abd</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>6f21d1435fd907b7925a913290aaf5e2</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>c43f043ded6a0fc16c1ac71fdd3f89d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>b6552be36c556899b523ca12c78e1d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>59809684f36cd6a9fba565443a77e4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>_A_a3_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>4acf680dd46aa779586cc553837ab1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>_A_a4_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>e4f82f3c0873a712e6fd5df8be90ec53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>_A_a5_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5.html</anchorfile>
      <anchor>dafdbbcf6477ac9fd3ced5b160b12930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <member kind="typedef">
      <type>signal_emit5&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>6708a151a0e9310e420ecd97628356fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>952caf9b502f125639af49ffc32fb72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>381d7260c5a2d0edbd74dbdc2a015025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>5e909070ee648209661281138c2fc02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>bcab78da61796d921b665e6d93e5d22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_3f4bb8e01797a41c0c00b013098e1284.html</anchorfile>
      <anchor>d13ee058161d98298cf5c0a44dd0369b</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit5&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <member kind="typedef">
      <type>signal_emit5&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>516b3d6a24b2692cc30a2d01d7be209a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>efe7ac3a1e1c7c49ea42b4ae4da71f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>d1b4aaac168ad7be4a3f2fd211669505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>abb363cd267022117a7a377d972abe08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>cb016c85ccce7b9ba62e3206930443ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit5_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__arg4_00_01T__arg5_00_01nil_01_4.html</anchorfile>
      <anchor>5544cc7c601908f17503b14f41fbc7e2</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit6</name>
    <filename>structsigc_1_1internal_1_1signal__emit6.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>d3f2b6d6ea151f7900483f9c657296a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>698c80593b8b4b6c19c5dec4c74760be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>5f39100b3a2e797e111573caa41160a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>74d536292e162cbbc03c6bc9d6aff641</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit6</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>87970544cf50c532d1ab38eb59ae94f2</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>1c1eb1ed15be6b5af09c44e119c5b2c5</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>666e749b3f249bf1eb8cf7107293b364</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>cc011f22f8c590405dffb1bac58dbc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>8fa690db474a49075e68bd146c3068ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>95dd9ac181d8d30b200f794e23d5c548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>_A_a3_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>4e832e86574ed1ef96f8a2111378b53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>_A_a4_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>3e9e1cdcfce36ad1747b9928382e53ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>_A_a5_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>1f06dc98e50428e069c31135c9749ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg6 &gt;::take</type>
      <name>_A_a6_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6.html</anchorfile>
      <anchor>4c4c25a6b7720caa5cb322eece8fe065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <member kind="typedef">
      <type>signal_emit6&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>eb83894396ff7bf4102b8ead41d675a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>13de6972dd65d7f1807b957d7ba28ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>c414f9e597cf825ad7e88000819140c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>ed3cdf6db66cae3328303d02a900d66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>191267994b24fa09fd778262ef116247</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_a9e1619660cfeb2602951ce20f87e84b.html</anchorfile>
      <anchor>ab6d9e086b945c806e7edbd082f9e12d</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit6&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <member kind="typedef">
      <type>signal_emit6&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>ff3fb7a8cd0d7307ec7f35857ce42a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>21d9f9214574bca741b87fbe965bf155</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>fd2ae722cc51e24f46606c67e949ca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>36616b0e1a3300585590d7061c147487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>fb43a8792e2b71f79cc6348ae0a38ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit6_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__f3dcda56bfe17026f667832eb433c2de.html</anchorfile>
      <anchor>b1785d85ee0eb6590eda47c06b1798bd</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit7</name>
    <filename>structsigc_1_1internal_1_1signal__emit7.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <templarg>T_accumulator</templarg>
    <member kind="typedef">
      <type>signal_emit7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, T_accumulator &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>e9257a8b3cb7280831e6c2781a28204f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_accumulator::result_type</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>71a210aebf40e1637c68dbd36c3bd235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>b4d4b3d102656298f97540ac58ac72bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="package">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>4c33d5dd4197980a21964771362e5371</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="package">
      <type></type>
      <name>signal_emit7</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>22bfee6c0c25cd2522596ea989e93afd</anchor>
      <arglist>(typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>T_return</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>076d9a0f23b6263cc2c27dfe446826ee</anchor>
      <arglist>(const slot_type &amp;_A_slot) const </arglist>
    </member>
    <member kind="function" protection="package" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>a8229647f303df1f560b85a3b3343eae</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>9f6110c6b847b8936bf85824602c8c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg1 &gt;::take</type>
      <name>_A_a1_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>006387ecb18b119fa28be29040c297d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg2 &gt;::take</type>
      <name>_A_a2_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>6a70e1e2e54e9bfa85e19fd288b4e2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg3 &gt;::take</type>
      <name>_A_a3_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>c835857b96095581b8520d0f09978bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg4 &gt;::take</type>
      <name>_A_a4_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>c361fd60001939e8f661574738279700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg5 &gt;::take</type>
      <name>_A_a5_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>33dcf4e8e7574dcc88b28693fe249cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg6 &gt;::take</type>
      <name>_A_a6_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>0f622b28c1a2caf260a3f966d54aecf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>type_trait&lt; T_arg7 &gt;::take</type>
      <name>_A_a7_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7.html</anchorfile>
      <anchor>a91a45ada74ef90dd6599c036fd81f5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</filename>
    <templarg>T_return</templarg>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>signal_emit7&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>c001d8348264492a2f6b33147f03560f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_return</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>85c3b6b41ceafba78215fd8a032ba128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; T_return, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>beed26cc7acd97313f6df5ca5c5ba97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>abee048d6cab92e35c72b93d2fe9e3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>74865279f0975cda5b9adb1207778815</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01T__return_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_26095f8e771386a14913b4dce00192fe.html</anchorfile>
      <anchor>bd772a7a4b4dc983a4cc19b205484a9d</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_emit7&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</name>
    <filename>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</filename>
    <templarg>T_arg1</templarg>
    <templarg>T_arg2</templarg>
    <templarg>T_arg3</templarg>
    <templarg>T_arg4</templarg>
    <templarg>T_arg5</templarg>
    <templarg>T_arg6</templarg>
    <templarg>T_arg7</templarg>
    <member kind="typedef">
      <type>signal_emit7&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7, nil &gt;</type>
      <name>self_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>9915c6785464f0d3cba00664dc5228c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>02877a24b1ca0c45b6b60c67f7511c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot&lt; void, T_arg1, T_arg2, T_arg3, T_arg4, T_arg5, T_arg6, T_arg7 &gt;</type>
      <name>slot_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>59cf6a49beebd131b03bc3e62f7a8ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>facd3626892ede13bd8d73ffae5990a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_type::call_type</type>
      <name>call_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>7f83913f102977ad73963ee519365320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static result_type</type>
      <name>emit</name>
      <anchorfile>structsigc_1_1internal_1_1signal__emit7_3_01void_00_01T__arg1_00_01T__arg2_00_01T__arg3_00_01T__e0f7e390dc5e7bae31afdc6f6e59cd29.html</anchorfile>
      <anchor>d971bb20dd9ec82f9cc5955903cac6e3</anchor>
      <arglist>(signal_impl *impl, typename type_trait&lt; T_arg1 &gt;::take _A_a1, typename type_trait&lt; T_arg2 &gt;::take _A_a2, typename type_trait&lt; T_arg3 &gt;::take _A_a3, typename type_trait&lt; T_arg4 &gt;::take _A_a4, typename type_trait&lt; T_arg5 &gt;::take _A_a5, typename type_trait&lt; T_arg6 &gt;::take _A_a6, typename type_trait&lt; T_arg7 &gt;::take _A_a7)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_impl</name>
    <filename>structsigc_1_1internal_1_1signal__impl.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>01884c869ebb0f8fb57a06e6bc2769f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; slot_base &gt;</type>
      <name>slot_list</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>19f02201bede823402d019db8cbd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_list::iterator</type>
      <name>iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>089c04c7605a941bcedac4fdb6758acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>slot_list::const_iterator</type>
      <name>const_iterator_type</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>6f82c5ca29357643e478de1ea5a07d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>signal_impl</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>9afb812b703181ffab2007369302c8fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>9c753983015d9c5d6ee94cc7867f7bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference_exec</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>00b391521cfc0cdd858ff1f9622ad5f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>ec5b6d060338943199fd5bfd857b9760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference_exec</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>bedaa2c5f9b1194ae9445c5dcce058d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>7e477d7973dab8a4bf1ef0d6cd7745e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>23621888e04c9ffc3a8582dc042ab330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>b3e885ece710b34a9a56c1ee9326c37d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>connect</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>0cc1576bb323ae3ea0c32ea89173525f</anchor>
      <arglist>(const slot_base &amp;slot_)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>insert</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>dabe2acc04998437834dec1e68c18c16</anchor>
      <arglist>(iterator_type i, const slot_base &amp;slot_)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>erase</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>94ad29c4fe8af4dd5184f03062ff0d6a</anchor>
      <arglist>(iterator_type i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sweep</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>71215ca4e3de1406ce680b91eb873915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>notify</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>28a74d848c7036df713a40cd925198f8</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>ref_count_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>35207d1cca9c9e389b5e3628cbfe6f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>exec_count_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>2e2a818ee0e7a4faa1d3952f3906cd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>deferred_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>9ea90d2283b19a2b5002b37126f2938a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; slot_base &gt;</type>
      <name>slots_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__impl.html</anchorfile>
      <anchor>882eaebc99068384098502ecd48022e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::signal_exec</name>
    <filename>structsigc_1_1internal_1_1signal__exec.html</filename>
    <member kind="function">
      <type></type>
      <name>signal_exec</name>
      <anchorfile>structsigc_1_1internal_1_1signal__exec.html</anchorfile>
      <anchor>d1a33115deba99fdc81f4818a14d3889</anchor>
      <arglist>(const signal_impl *sig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~signal_exec</name>
      <anchorfile>structsigc_1_1internal_1_1signal__exec.html</anchorfile>
      <anchor>9a5378e79df614c9dfab0286cda8504d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>signal_impl *</type>
      <name>sig_</name>
      <anchorfile>structsigc_1_1internal_1_1signal__exec.html</anchorfile>
      <anchor>ecde3b982b9803ec9797a46f12012a69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::temp_slot_list</name>
    <filename>structsigc_1_1internal_1_1temp__slot__list.html</filename>
    <member kind="typedef">
      <type>signal_impl::slot_list</type>
      <name>slot_list</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>5b26dc2e48f5a09bb8c8b376461c7e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::iterator_type</type>
      <name>iterator</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>c654e5deddeacc3166737cdd86bad365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signal_impl::const_iterator_type</type>
      <name>const_iterator</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>692b554eaf3750431820b1cee2799be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>temp_slot_list</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>d9c37f142e77df9875ae7fe97fbe12ba</anchor>
      <arglist>(slot_list &amp;slots)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~temp_slot_list</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>8f642c2d75c624f3d3160dade9958b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>7492591ffcd2b8cbfd15d26985e927f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>ad8c9f9956a23bcc4062f8015d369407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>53149b1d944c92926c801d86411fd17c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structsigc_1_1internal_1_1temp__slot__list.html</anchorfile>
      <anchor>04fb762a1adfb428b5502e73f2534854</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::trackable_callback</name>
    <filename>structsigc_1_1internal_1_1trackable__callback.html</filename>
    <member kind="function">
      <type></type>
      <name>trackable_callback</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback.html</anchorfile>
      <anchor>3b83fc7b5be5ce9be085a0560a8de1eb</anchor>
      <arglist>(void *data, func_destroy_notify func)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data_</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback.html</anchorfile>
      <anchor>cf5a89dbace421d15e02b935fb2e33d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>func_destroy_notify</type>
      <name>func_</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback.html</anchorfile>
      <anchor>382a0724b9e43951361703ef34ce71e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::trackable_callback_list</name>
    <filename>structsigc_1_1internal_1_1trackable__callback__list.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_callback</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback__list.html</anchorfile>
      <anchor>97bd6928a59b827c6631e0435a6faac4</anchor>
      <arglist>(void *data, func_destroy_notify func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_callback</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback__list.html</anchorfile>
      <anchor>fed7ee97f2a62b24909565adf43dc4e5</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback__list.html</anchorfile>
      <anchor>19d55f6f773d7b1f29ae4c26d777fa4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>trackable_callback_list</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback__list.html</anchorfile>
      <anchor>1c31219c4f47c97bb1a9c66f84adfda9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~trackable_callback_list</name>
      <anchorfile>structsigc_1_1internal_1_1trackable__callback__list.html</anchorfile>
      <anchor>0133362ec796440bcf9827f2101f66a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::with_type&lt; false, T_type, T_limit &gt;</name>
    <filename>structsigc_1_1internal_1_1with__type_3_01false_00_01T__type_00_01T__limit_01_4.html</filename>
    <templarg>T_type</templarg>
    <templarg>T_limit</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>execute_</name>
      <anchorfile>structsigc_1_1internal_1_1with__type_3_01false_00_01T__type_00_01T__limit_01_4.html</anchorfile>
      <anchor>455e2c2f9b3fed4fce004b880d627fb2</anchor>
      <arglist>(const T_type &amp;, const T_limit &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::with_type&lt; true, T_type, T_limit &gt;</name>
    <filename>structsigc_1_1internal_1_1with__type_3_01true_00_01T__type_00_01T__limit_01_4.html</filename>
    <templarg>T_type</templarg>
    <templarg>T_limit</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>execute_</name>
      <anchorfile>structsigc_1_1internal_1_1with__type_3_01true_00_01T__type_00_01T__limit_01_4.html</anchorfile>
      <anchor>a3b62094e6bacf344e73a0455a2b1ef9</anchor>
      <arglist>(const T_type &amp;_A_type, const T_limit &amp;_A_action)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::limit_derived_target</name>
    <filename>structsigc_1_1internal_1_1limit__derived__target.html</filename>
    <templarg>T_target</templarg>
    <templarg>T_action</templarg>
    <member kind="typedef">
      <type>limit_derived_target&lt; T_target, T_action &gt;</type>
      <name>T_self</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target.html</anchorfile>
      <anchor>9755531d160110b9d4e5ca98d54f8175</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target.html</anchorfile>
      <anchor>5bbd32c0df00dd4406e4bbe624d9e08f</anchor>
      <arglist>(const T_type &amp;_A_type) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>limit_derived_target</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target.html</anchorfile>
      <anchor>957b23646302b928b8fd71e8d44ec1bb</anchor>
      <arglist>(const T_action &amp;_A_action)</arglist>
    </member>
    <member kind="variable">
      <type>T_action</type>
      <name>action_</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target.html</anchorfile>
      <anchor>c9de0808198a91c37619343928654ee6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::with_type_pointer&lt; false, T_type, T_limit &gt;</name>
    <filename>structsigc_1_1internal_1_1with__type__pointer_3_01false_00_01T__type_00_01T__limit_01_4.html</filename>
    <templarg>T_type</templarg>
    <templarg>T_limit</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>execute_</name>
      <anchorfile>structsigc_1_1internal_1_1with__type__pointer_3_01false_00_01T__type_00_01T__limit_01_4.html</anchorfile>
      <anchor>74a3f89753f64ed6ee5c256e30a6a610</anchor>
      <arglist>(const T_type &amp;, const T_limit &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::with_type_pointer&lt; true, T_type, T_limit &gt;</name>
    <filename>structsigc_1_1internal_1_1with__type__pointer_3_01true_00_01T__type_00_01T__limit_01_4.html</filename>
    <templarg>T_type</templarg>
    <templarg>T_limit</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>execute_</name>
      <anchorfile>structsigc_1_1internal_1_1with__type__pointer_3_01true_00_01T__type_00_01T__limit_01_4.html</anchorfile>
      <anchor>41a6e3e6217df4aba1f5ce8d36cf72cc</anchor>
      <arglist>(const T_type &amp;_A_type, const T_limit &amp;_A_action)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sigc::internal::limit_derived_target&lt; T_target *, T_action &gt;</name>
    <filename>structsigc_1_1internal_1_1limit__derived__target_3_01T__target_01_5_00_01T__action_01_4.html</filename>
    <templarg>T_target</templarg>
    <templarg>T_action</templarg>
    <member kind="typedef">
      <type>limit_derived_target&lt; T_target *, T_action &gt;</type>
      <name>T_self</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target_3_01T__target_01_5_00_01T__action_01_4.html</anchorfile>
      <anchor>25382b8b5eb801933fc9af1650385e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target_3_01T__target_01_5_00_01T__action_01_4.html</anchorfile>
      <anchor>9c7ea16c7efecef18b39fdf132c635d9</anchor>
      <arglist>(const T_type &amp;_A_type) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>limit_derived_target</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target_3_01T__target_01_5_00_01T__action_01_4.html</anchorfile>
      <anchor>d3f15ec4b2a3adf289823280f7f8bd60</anchor>
      <arglist>(const T_action &amp;_A_action)</arglist>
    </member>
    <member kind="variable">
      <type>T_action</type>
      <name>action_</name>
      <anchorfile>structsigc_1_1internal_1_1limit__derived__target_3_01T__target_01_5_00_01T__action_01_4.html</anchorfile>
      <anchor>d2f9f38bda308428110c6432d5af5915</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
